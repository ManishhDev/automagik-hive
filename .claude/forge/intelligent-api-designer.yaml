# Forge Template: Intelligent API Designer
# Enhanced with MCP integration, memory, and WhatsApp notifications
# OpenAPI integration, RESTful design, and comprehensive API lifecycle management

name: "intelligent-api-designer"
title: "Design comprehensive API for [service/domain]"
description: "AI-powered API design with OpenAPI specifications, RESTful patterns, authentication integration, and comprehensive documentation"

## Memory Context
<memory>
<!-- Previous API designs, OpenAPI patterns, authentication strategies, and API lifecycle management approaches -->
</memory>

## Agno API Design Pattern Research
### Research Phase
- [ ] Search agno-agi/agi for API architecture and design patterns using ask-repo-agent
- [ ] Query context7/agno for RESTful API best practices and OpenAPI standards using search-repo-docs
- [ ] Research Agno's inter-service communication and API integration approaches
- [ ] Identify multi-agent API coordination and service mesh patterns
- [ ] Study Agno's API versioning and backward compatibility strategies
- [ ] Cross-reference with existing Automagik Hive API design patterns and standards

## Contextual API Design Analysis for Automagik Hive
### 1. Current API Landscape Assessment
- [ ] Map existing API endpoints and service interfaces
- [ ] Document current API design patterns and architectural decisions
- [ ] Identify existing authentication and authorization mechanisms
- [ ] Assess current API documentation and developer experience
- [ ] Review existing API versioning and compatibility strategies
- [ ] Document API performance characteristics and usage patterns

### 2. API Requirements and Domain Analysis
- [ ] Define API scope and business domain boundaries
- [ ] Identify target consumers and usage scenarios
- [ ] Document functional requirements and data model needs
- [ ] Assess non-functional requirements (performance, security, scalability)
- [ ] Define API lifecycle management and evolution requirements
- [ ] Evaluate integration requirements with existing systems

### 3. API Architecture and Design Strategy
- [ ] Design API architecture with appropriate patterns (REST, GraphQL, gRPC)
- [ ] Plan resource modeling and data representation strategies
- [ ] Create authentication and authorization integration approach
- [ ] Design error handling and status code standardization
- [ ] Plan API versioning and backward compatibility strategy
- [ ] Create API gateway and service mesh integration approach

## Comprehensive API Design Checklist

### 1. OpenAPI Specification and Documentation
- [ ] Create comprehensive OpenAPI 3.0+ specification document
- [ ] Define resource schemas with validation rules and constraints
- [ ] Document request/response examples with realistic data
- [ ] Create comprehensive error response documentation
- [ ] Implement interactive API documentation with try-it-out functionality
- [ ] Design API changelog and version history documentation
- [ ] Create developer guides and integration tutorials

### 2. RESTful Design and Resource Modeling
- [ ] Design intuitive resource hierarchies and URL structures
- [ ] Implement proper HTTP methods and status code usage
- [ ] Create consistent naming conventions and resource identifiers
- [ ] Design pagination, filtering, and sorting strategies
- [ ] Implement proper content negotiation and media type handling
- [ ] Create resource relationship modeling and hypermedia integration
- [ ] Design idempotency and safe operation handling

### 3. Authentication and Security Implementation
- [ ] Implement robust authentication mechanisms (OAuth 2.0, JWT, API keys)
- [ ] Design fine-grained authorization and permission systems
- [ ] Create secure credential management and token handling
- [ ] Implement rate limiting and API abuse prevention
- [ ] Design API security headers and CORS configuration
- [ ] Create comprehensive input validation and sanitization
- [ ] Implement security audit logging and monitoring

### 4. Data Validation and Error Handling
- [ ] Implement comprehensive input validation with clear error messages
- [ ] Create standardized error response format and error codes
- [ ] Design validation rule documentation and constraint explanation
- [ ] Implement data transformation and serialization strategies
- [ ] Create comprehensive error logging and debugging information
- [ ] Design user-friendly error messages and recovery suggestions
- [ ] Implement validation performance optimization and caching

### 5. API Performance and Scalability
- [ ] Implement efficient data serialization and compression strategies
- [ ] Design caching strategies with appropriate cache headers
- [ ] Create database query optimization for API endpoints
- [ ] Implement connection pooling and resource management
- [ ] Design asynchronous processing for long-running operations
- [ ] Create API performance monitoring and metrics collection
- [ ] Implement load testing and performance benchmarking

### 6. API Lifecycle and Version Management
- [ ] Design API versioning strategy with backward compatibility
- [ ] Create deprecation policies and migration guidance
- [ ] Implement feature flag integration for gradual rollouts
- [ ] Design API analytics and usage tracking
- [ ] Create API health monitoring and uptime measurement
- [ ] Implement API contract testing and validation
- [ ] Design API retirement and sunset procedures

## Database API Integration (if applicable)
- [ ] Use postgres tool to validate database API integration procedures
- [ ] Design efficient database query patterns for API operations
- [ ] Implement database transaction management for API operations
- [ ] Create database connection optimization for API scalability
- [ ] Design database schema validation for API data models
- [ ] Implement database performance monitoring for API endpoints

## Pattern Compliance Validation
- [ ] Verify API design follows Agno framework communication patterns
- [ ] Check alignment with context7/agno API best practices
- [ ] Validate consistency with Automagik Hive API standards
- [ ] Ensure API design supports system reliability and performance
- [ ] Document API design decisions and architectural trade-offs
- [ ] Confirm compliance with enterprise security and governance requirements

## Memory-Driven API Design Insights
- [ ] Apply successful API design patterns from previous implementations
- [ ] Reference effective authentication and security strategies from memory
- [ ] Leverage lessons learned from past API evolution and versioning challenges
- [ ] Cross-check against known API design anti-patterns and issues
- [ ] Apply historical performance optimization insights for API endpoints
- [ ] Utilize proven documentation and developer experience patterns from memory

## Goal
Design comprehensive, secure, and well-documented API with excellent developer experience, robust performance, and seamless integration capabilities for reliable service communication.

## Deliverables
1. **OpenAPI specification** with comprehensive documentation and examples
2. **API implementation** with RESTful design and security integration
3. **Authentication and authorization** with robust security mechanisms
4. **Interactive documentation** with developer guides and tutorials
5. **Performance optimization** with caching and scalability features
6. **Testing and monitoring** with comprehensive validation and analytics

## Success Criteria
- [ ] OpenAPI specification accurately documents all API functionality
- [ ] API design follows RESTful principles and industry best practices
- [ ] Authentication and authorization mechanisms function securely
- [ ] API performance meets latency and throughput requirements
- [ ] Developer documentation enables easy integration and adoption
- [ ] API monitoring provides comprehensive visibility and analytics
- [ ] API design aligns with Agno framework communication patterns
- [ ] Stakeholders can effectively consume and integrate with the API

## Automated Learning Capture
The system will automatically capture:
- Effective API design patterns and architectural decision strategies
- Authentication and security implementation approaches
- Developer experience optimization techniques and documentation patterns
- Performance optimization strategies and scalability enhancement methods
- API lifecycle management approaches and versioning strategies
- Integration pattern effectiveness and developer adoption insights

---

**Enhanced with MCP Integration**: This template leverages ask-repo-agent for Agno API research, search-repo-docs for context7 API approaches, postgres tool for database API validation, and intelligent memory system for API design pattern learning and developer experience optimization.