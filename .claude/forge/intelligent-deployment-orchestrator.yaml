# Forge Template: Intelligent Deployment Orchestrator
# Enhanced with MCP integration, memory, and WhatsApp notifications
# CI/CD pipelines, blue-green deployments, and automated rollbacks

name: "intelligent-deployment-orchestrator"
title: "Orchestrate deployment pipeline for [application/service]"
description: "AI-powered CI/CD with blue-green deployments, canary releases, automated rollbacks, and comprehensive quality gates"

## Memory Context
<memory>
<!-- Previous deployment strategies, pipeline configurations, rollback scenarios, and quality gate patterns -->
</memory>

## Agno Deployment Pattern Research
### Research Phase
- [ ] Search agno-agi/agi for deployment orchestration patterns using ask-repo-agent
- [ ] Query context7/agno for CI/CD best practices and automation strategies using search-repo-docs
- [ ] Research Agno's deployment reliability and rollback mechanisms
- [ ] Identify multi-agent deployment coordination and scaling patterns
- [ ] Study Agno's quality gates and automated testing integration
- [ ] Cross-reference with existing Automagik Hive deployment infrastructure

## Contextual Deployment Analysis for Automagik Hive
### 1. Current Deployment Landscape Assessment
- [ ] Map existing CI/CD pipelines and deployment automation
- [ ] Document current deployment strategies and environment management
- [ ] Identify existing quality gates and testing integration points
- [ ] Assess current rollback procedures and incident response capabilities
- [ ] Review existing infrastructure as code and configuration management
- [ ] Document deployment monitoring and observability integration

### 2. Application Deployment Requirements Analysis
- [ ] Define deployment scope and application architecture characteristics
- [ ] Identify deployment environments and promotion workflow
- [ ] Assess scalability requirements and traffic management needs
- [ ] Document compliance and security requirements for deployment
- [ ] Evaluate performance and availability requirements during deployment
- [ ] Define rollback criteria and automated recovery procedures

### 3. Deployment Architecture Design
- [ ] Design deployment pipeline architecture with appropriate stages
- [ ] Plan environment management and infrastructure provisioning
- [ ] Create quality gate strategy with automated validation
- [ ] Design traffic management for zero-downtime deployments
- [ ] Plan monitoring and observability integration for deployments
- [ ] Create security scanning and compliance validation integration

## Comprehensive Deployment Orchestration Checklist

### 1. CI/CD Pipeline Architecture
- [ ] Design multi-stage pipeline with build, test, and deployment phases
- [ ] Implement automated build and artifact management
- [ ] Create comprehensive test automation integration (unit, integration, e2e)
- [ ] Set up code quality gates with static analysis and security scanning
- [ ] Design pipeline parallelization and optimization strategies
- [ ] Implement deployment approval workflows and governance controls
- [ ] Create pipeline observability with metrics and logging integration

### 2. Deployment Strategy Implementation
- [ ] Implement blue-green deployment for zero-downtime releases
- [ ] Create canary deployment with gradual traffic shifting
- [ ] Design rolling deployment with health check validation
- [ ] Set up feature flag integration for controlled feature rollout
- [ ] Implement A/B testing infrastructure for deployment validation
- [ ] Create deployment validation with automated smoke testing
- [ ] Design deployment scheduling and maintenance window management

### 3. Infrastructure and Environment Management
- [ ] Implement infrastructure as code with version control and validation
- [ ] Create environment provisioning and configuration management
- [ ] Set up environment parity validation and drift detection
- [ ] Design secrets management and secure configuration deployment
- [ ] Implement resource scaling and capacity management automation
- [ ] Create environment cleanup and cost optimization procedures
- [ ] Set up multi-cloud and hybrid deployment capabilities

### 4. Quality Gates and Validation
- [ ] Implement automated testing gates with comprehensive coverage validation
- [ ] Create security scanning gates with vulnerability assessment
- [ ] Set up performance testing gates with baseline validation
- [ ] Design compliance validation gates with regulatory requirements
- [ ] Implement code quality gates with technical debt assessment
- [ ] Create deployment readiness validation with health checks
- [ ] Set up user acceptance testing integration and approval workflows

### 5. Rollback and Recovery Automation
- [ ] Design automated rollback triggers with failure detection
- [ ] Implement database migration rollback and data consistency validation
- [ ] Create configuration rollback with environment state restoration
- [ ] Set up traffic routing rollback with gradual traffic shifting
- [ ] Design rollback validation with health checks and smoke testing
- [ ] Implement rollback notification and incident response integration
- [ ] Create rollback documentation and post-incident analysis procedures

### 6. Monitoring and Observability Integration
- [ ] Integrate deployment metrics with monitoring and alerting systems
- [ ] Create deployment dashboards with real-time status visibility
- [ ] Set up deployment event logging and audit trail creation
- [ ] Implement deployment performance tracking and optimization
- [ ] Create deployment health monitoring with SLI/SLO integration
- [ ] Set up deployment notification and stakeholder communication
- [ ] Design deployment analytics and continuous improvement metrics

## Database Deployment Management (if applicable)
- [ ] Use postgres tool to validate database deployment procedures
- [ ] Implement database migration automation with rollback capabilities
- [ ] Create database schema validation and compatibility testing
- [ ] Set up database backup and recovery integration with deployments
- [ ] Design database connection management during deployment transitions
- [ ] Implement database performance monitoring during deployments

## Pattern Compliance Validation
- [ ] Verify deployment strategy follows Agno framework patterns
- [ ] Check alignment with context7/agno deployment best practices
- [ ] Validate consistency with Automagik Hive deployment standards
- [ ] Ensure deployment maintains system reliability and performance
- [ ] Document deployment decisions and architectural trade-offs
- [ ] Confirm compliance with enterprise security and governance requirements

## Memory-Driven Deployment Insights
- [ ] Apply successful deployment patterns from previous implementations
- [ ] Reference effective rollback strategies from historical deployments
- [ ] Leverage lessons learned from past deployment failures and incidents
- [ ] Cross-check against known deployment anti-patterns and risks
- [ ] Apply historical performance optimization insights for deployments
- [ ] Utilize proven quality gate configurations from memory

## Goal
Establish reliable, automated deployment orchestration with comprehensive quality gates, zero-downtime deployment strategies, and robust rollback capabilities for consistent and safe software delivery.

## Deliverables
1. **CI/CD pipeline configuration** with multi-stage automation and quality gates
2. **Deployment strategy implementation** with blue-green, canary, or rolling approaches
3. **Infrastructure as code** with environment management and provisioning automation
4. **Rollback automation** with failure detection and recovery procedures
5. **Quality gate integration** with testing, security, and compliance validation
6. **Monitoring and alerting** with deployment visibility and incident response

## Success Criteria
- [ ] Deployment pipeline successfully automates build, test, and deployment phases
- [ ] Zero-downtime deployment strategy functions with traffic management
- [ ] Quality gates effectively prevent problematic deployments from reaching production
- [ ] Rollback procedures execute successfully with minimal recovery time
- [ ] Infrastructure provisioning and configuration management operates reliably
- [ ] Deployment monitoring provides comprehensive visibility and alerting
- [ ] Deployment strategy aligns with Agno framework patterns
- [ ] Stakeholders can track deployment status and system health effectively

## Automated Learning Capture
The system will automatically capture:
- Effective deployment strategy patterns and architecture decisions
- Quality gate configurations and validation effectiveness
- Rollback scenario handling and recovery optimization techniques
- Infrastructure as code patterns and environment management strategies
- Deployment performance optimization and scaling insights
- Incident response integration and stakeholder communication approaches

---

**Enhanced with MCP Integration**: This template leverages ask-repo-agent for Agno deployment research, search-repo-docs for context7 CI/CD approaches, postgres tool for database deployment validation, and intelligent memory system for deployment pattern learning and pipeline optimization.