# Forge Template: Intelligent Documentation Generation
# Enhanced with MCP integration, memory, and WhatsApp notifications
# Migrated from: documentation.yaml to match default template style

name: "intelligent-documentation"
title: "Generate comprehensive documentation for [component/system]"
description: "AI-powered documentation generation with Agno pattern research, memory-driven insights, and multi-format output"

## Memory Context
<memory>
<!-- Previous documentation structures, successful writing patterns, and maintenance insights -->
</memory>

## Agno Documentation Pattern Research
### Research Phase
- [ ] Search agno-agi/agi for documentation standards using ask-repo-agent
- [ ] Query context7/agno for documentation best practices using search-repo-docs
- [ ] Research Agno's modular documentation approach and structure
- [ ] Identify multi-agent system documentation patterns
- [ ] Study Agno's API documentation and usage example patterns

## Contextual Documentation Analysis for Automagik Hive
### 1. Current Documentation Landscape
- [ ] Audit existing documentation in `/docs/` and project root
- [ ] Review current documentation structure and organization
- [ ] Identify documentation gaps and outdated content
- [ ] Map component documentation coverage and quality
- [ ] Document existing documentation standards and formats

### 2. Target Audience and Use Case Analysis
- [ ] Identify primary documentation audiences (developers, users, admins)
- [ ] Map different documentation needs by user type
- [ ] Document complexity levels required for different audiences
- [ ] Identify integration and onboarding documentation requirements
- [ ] Assess maintenance and operational documentation needs

### 3. Technical Documentation Requirements
- [ ] Analyze API endpoints and interface documentation needs
- [ ] Map component dependencies and integration points
- [ ] Document configuration options and environment variables
- [ ] Identify deployment and operational procedure requirements
- [ ] Assess troubleshooting and debugging documentation needs

## Comprehensive Documentation Generation Checklist

### 1. API and Interface Documentation
- [ ] Generate comprehensive API reference with request/response examples
- [ ] Document all public interfaces and method signatures
- [ ] Create usage examples for common operations and workflows
- [ ] Include error handling and exception documentation
- [ ] Add integration examples with other Automagik Hive components
- [ ] Validate API documentation accuracy with actual implementations

### 2. Architecture and Design Documentation
- [ ] Create system architecture diagrams and component relationships
- [ ] Document design decisions and architectural trade-offs
- [ ] Explain data flow and communication patterns
- [ ] Map security architecture and access control mechanisms
- [ ] Document scalability considerations and performance characteristics
- [ ] Include deployment architecture and infrastructure requirements

### 3. User Guide and Tutorial Creation
- [ ] Write step-by-step installation and setup guides
- [ ] Create beginner-friendly tutorials with clear examples
- [ ] Document common use cases and workflow patterns
- [ ] Include troubleshooting guides and FAQ sections
- [ ] Add configuration guides for different environments
- [ ] Create quick-start guides for immediate value demonstration

### 4. Developer Documentation
- [ ] Generate code-level documentation from docstrings and comments
- [ ] Create contribution guidelines and development setup instructions
- [ ] Document coding standards and architectural patterns
- [ ] Include testing strategies and quality assurance procedures
- [ ] Add debugging guides and development tools documentation
- [ ] Create extension and customization documentation

### 5. Configuration and Operations Documentation
- [ ] Document all configuration options with examples and defaults
- [ ] Create deployment guides for different environments
- [ ] Include monitoring and observability setup instructions
- [ ] Document backup and disaster recovery procedures
- [ ] Add security configuration and hardening guidelines
- [ ] Create maintenance and upgrade procedures

### 6. Interactive Examples and Code Samples
- [ ] Include working code examples that can be copy-pasted
- [ ] Create interactive tutorials or notebook-style documentation
- [ ] Add real-world scenario examples and case studies
- [ ] Include performance benchmarks and optimization examples
- [ ] Document integration patterns with external services
- [ ] Provide template and boilerplate code for common tasks

## Database Documentation (if applicable)
- [ ] Use postgres tool to validate database schema documentation
- [ ] Document database design decisions and relationships
- [ ] Include migration guides and data model explanations
- [ ] Add query optimization and performance tuning guides
- [ ] Document backup and recovery procedures
- [ ] Create data management and maintenance documentation

## Agno Pattern Compliance Validation
- [ ] Verify documentation follows Agno's clear, minimal approach
- [ ] Check alignment with context7/agno documentation standards
- [ ] Ensure modular documentation structure like Agno's approach
- [ ] Validate comprehensive coverage of multi-agent patterns
- [ ] Apply Agno's example-driven documentation methodology

## Memory-Driven Documentation Insights
- [ ] Apply successful documentation structures from previous projects
- [ ] Reference effective writing patterns and organization from memory
- [ ] Leverage lessons learned about documentation maintenance
- [ ] Cross-check against known documentation quality patterns
- [ ] Apply historical insights about user adoption and feedback

## Multi-Format Output Generation
- [ ] Generate Markdown documentation for repository integration
- [ ] Create HTML documentation for web-based access
- [ ] Generate API documentation in OpenAPI/Swagger format
- [ ] Create PDF documentation for offline distribution
- [ ] Generate interactive documentation with search capabilities
- [ ] Ensure mobile-friendly responsive documentation design

## Documentation Quality Assurance
- [ ] Validate all code examples and ensure they execute correctly
- [ ] Check internal and external link functionality
- [ ] Ensure consistent formatting and style throughout
- [ ] Validate technical accuracy with subject matter experts
- [ ] Test documentation with target audience for usability
- [ ] Implement documentation version control and change tracking

## Goal
Create comprehensive, accurate, and user-friendly documentation that serves all stakeholder needs, following Agno documentation patterns and leveraging memory-driven insights for optimal structure and content.

## Deliverables
1. **Complete documentation suite** in multiple formats (Markdown, HTML, PDF)
2. **API reference documentation** with interactive examples
3. **User guides and tutorials** for different skill levels
4. **Architecture documentation** with diagrams and design rationale
5. **Developer documentation** including contribution guidelines
6. **Operational documentation** for deployment and maintenance

## Success Criteria
- [ ] All major components and APIs documented comprehensively
- [ ] Documentation serves identified user personas and use cases
- [ ] Code examples execute correctly and demonstrate real functionality
- [ ] Documentation follows Agno patterns for clarity and organization
- [ ] Multiple output formats generated and properly formatted
- [ ] Internal and external links functional and up-to-date
- [ ] Documentation integrated with existing project structure

## Automated Learning Capture
The system will automatically capture:
- Effective documentation structures and organization patterns
- Successful writing techniques and explanation approaches
- User engagement patterns and preferred documentation formats
- Maintenance strategies and update methodologies
- Technical accuracy validation processes and quality checks

---

**Enhanced with MCP Integration**: This template leverages ask-repo-agent for Agno documentation patterns, search-repo-docs for context7 documentation approaches, postgres tool for database documentation validation, and intelligent memory system for documentation pattern learning and structure optimization.