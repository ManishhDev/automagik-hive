# Forge Template: Intelligent Integration Builder
# Enhanced with MCP integration, memory, and WhatsApp notifications
# API mapping, data transformation, and robust error handling

name: "intelligent-integration-builder"
title: "Build integration between [system-a] and [system-b]"
description: "AI-powered integration design with API mapping, data transformation pipelines, authentication handling, and comprehensive error recovery"

## Memory Context
<memory>
<!-- Previous integration patterns, API compatibility solutions, data transformation strategies, and error handling approaches -->
</memory>

## Agno Integration Pattern Research
### Research Phase
- [ ] Search agno-agi/agi for integration architecture patterns using ask-repo-agent
- [ ] Query context7/agno for inter-system communication best practices using search-repo-docs
- [ ] Research Agno's multi-agent integration and coordination mechanisms
- [ ] Identify Agno's error handling and retry strategies for system integration
- [ ] Study Agno's data transformation and mapping approaches
- [ ] Cross-reference with existing Automagik Hive integration patterns

## Contextual Integration Analysis for Automagik Hive
### 1. System Integration Landscape Assessment
- [ ] Map existing integration points and communication patterns
- [ ] Document current API endpoints, data formats, and protocols
- [ ] Identify authentication and authorization mechanisms in use
- [ ] Assess current integration monitoring and error handling
- [ ] Review existing data transformation and validation logic
- [ ] Document integration performance and scalability characteristics

### 2. Integration Requirements and Compatibility Analysis
- [ ] Define integration scope and data flow requirements
- [ ] Analyze API compatibility and version alignment
- [ ] Identify data format differences and transformation needs
- [ ] Assess authentication and security requirement compatibility
- [ ] Document performance and latency requirements
- [ ] Evaluate error handling and recovery requirement alignment

### 3. Integration Architecture Design
- [ ] Design integration architecture with appropriate patterns
- [ ] Plan data transformation pipeline and validation strategies
- [ ] Design authentication and authorization integration approach
- [ ] Create error handling and retry mechanism architecture
- [ ] Plan monitoring and observability for integration health
- [ ] Design scalability and performance optimization approach

## Comprehensive Integration Building Checklist

### 1. API Analysis and Mapping
- [ ] Document source and target API specifications and schemas
- [ ] Create API compatibility matrix and version alignment strategy
- [ ] Map request/response structures and data field transformations
- [ ] Identify API rate limits and implement throttling strategies
- [ ] Design API versioning strategy for backward compatibility
- [ ] Create API mock services for development and testing
- [ ] Validate API authentication and authorization mechanisms

### 2. Data Transformation Pipeline Design
- [ ] Design data mapping and transformation logic for field alignment
- [ ] Implement data validation and sanitization procedures
- [ ] Create data format conversion utilities (JSON, XML, CSV, etc.)
- [ ] Design data enrichment and lookup mechanisms
- [ ] Implement data filtering and conditional transformation rules
- [ ] Create data integrity validation and consistency checks
- [ ] Design data transformation error handling and logging

### 3. Authentication and Security Integration
- [ ] Implement authentication mechanism integration (OAuth, JWT, API keys)
- [ ] Design secure credential storage and rotation strategies
- [ ] Create authorization and permission mapping between systems
- [ ] Implement SSL/TLS certificate management and validation
- [ ] Design API security headers and request signing mechanisms
- [ ] Create security audit logging and monitoring procedures
- [ ] Implement rate limiting and DDoS protection strategies

### 4. Error Handling and Resilience Patterns
- [ ] Design comprehensive error handling with categorized error types
- [ ] Implement exponential backoff retry strategies with jitter
- [ ] Create circuit breaker patterns for system protection
- [ ] Design dead letter queue handling for failed messages
- [ ] Implement timeout and connection pooling strategies
- [ ] Create fallback mechanisms and graceful degradation
- [ ] Design error notification and alerting procedures

### 5. Integration Testing and Validation
- [ ] Create comprehensive integration test suites with edge cases
- [ ] Implement API contract testing and schema validation
- [ ] Design load testing for integration performance validation
- [ ] Create chaos engineering tests for resilience validation
- [ ] Implement end-to-end workflow testing with real data
- [ ] Design security testing for integration vulnerabilities
- [ ] Create monitoring and health check validation procedures

### 6. Deployment and Operational Excellence
- [ ] Design integration deployment strategy with rollback capabilities
- [ ] Create monitoring dashboards for integration health and performance
- [ ] Implement logging and tracing for integration debugging
- [ ] Design alerting rules for integration failures and performance issues
- [ ] Create operational runbooks for common integration issues
- [ ] Implement integration metrics collection and analysis
- [ ] Design capacity planning and scaling strategies

## Database Integration Validation (if applicable)
- [ ] Use postgres tool to validate database integration procedures
- [ ] Test database connection pooling and transaction management
- [ ] Validate data consistency across integrated systems
- [ ] Test database replication and synchronization mechanisms
- [ ] Verify database security and access control for integration
- [ ] Validate database performance under integration load

## Pattern Compliance Validation
- [ ] Verify integration architecture follows Agno framework patterns
- [ ] Check alignment with context7/agno integration best practices
- [ ] Validate consistency with Automagik Hive integration standards
- [ ] Ensure integration maintains system reliability and performance
- [ ] Document integration decisions and architectural trade-offs
- [ ] Confirm compliance with enterprise security and governance requirements

## Memory-Driven Integration Insights
- [ ] Apply successful integration patterns from previous implementations
- [ ] Reference effective error handling strategies from memory
- [ ] Leverage lessons learned from past integration challenges
- [ ] Cross-check against known integration anti-patterns and failures
- [ ] Apply historical performance optimization insights
- [ ] Utilize proven security and authentication patterns from memory

## Goal
Build robust, secure, and performant integration between systems with comprehensive error handling, data transformation, monitoring, and operational excellence for reliable inter-system communication.

## Deliverables
1. **Integration architecture document** with detailed design and data flow diagrams
2. **API mapping specification** with transformation rules and validation logic
3. **Integration implementation** with error handling and resilience patterns
4. **Authentication and security configuration** with credential management
5. **Comprehensive test suite** with integration, load, and security testing
6. **Monitoring and alerting setup** with dashboards and operational runbooks

## Success Criteria
- [ ] Integration successfully connects and exchanges data between systems
- [ ] Data transformation accuracy exceeds 99.9% with comprehensive validation
- [ ] Integration performance meets latency and throughput requirements
- [ ] Error handling gracefully manages all identified failure scenarios
- [ ] Authentication and security mechanisms function correctly
- [ ] Integration monitoring provides comprehensive visibility and alerting
- [ ] Integration architecture aligns with Agno framework patterns
- [ ] Operational procedures enable efficient troubleshooting and maintenance

## Automated Learning Capture
The system will automatically capture:
- Effective integration architecture patterns and design decisions
- Data transformation strategies and mapping optimization techniques
- Error handling approaches and resilience pattern effectiveness
- Authentication and security integration implementation patterns
- Performance optimization techniques and scalability insights
- Operational excellence practices and troubleshooting strategies

---

**Enhanced with MCP Integration**: This template leverages ask-repo-agent for Agno integration research, search-repo-docs for context7 integration approaches, postgres tool for database integration validation, and intelligent memory system for integration pattern learning and architectural optimization.