# Forge Template: Intelligent Multi-Agent Coordinator
# Enhanced with MCP integration, memory, and WhatsApp notifications
# Agent orchestration, task distribution, and coordination optimization

name: "intelligent-multi-agent-coordinator"
title: "Coordinate multi-agent system for [workflow/domain]"
description: "AI-powered agent orchestration with task distribution, coordination optimization, conflict resolution, and performance monitoring"

## Memory Context
<memory>
<!-- Previous multi-agent coordination strategies, task distribution patterns, conflict resolution approaches, and orchestration optimizations -->
</memory>

## Agno Multi-Agent Pattern Research
### Research Phase
- [ ] Search agno-agi/agi for multi-agent coordination and orchestration patterns using ask-repo-agent
- [ ] Query context7/agno for agent collaboration and task distribution best practices using search-repo-docs
- [ ] Research Agno's agent lifecycle management and resource allocation strategies
- [ ] Identify Agno's inter-agent communication and synchronization patterns
- [ ] Study Agno's conflict resolution and consensus building approaches
- [ ] Cross-reference with existing Automagik Hive multi-agent architecture patterns

## Contextual Multi-Agent Analysis for Automagik Hive
### 1. Current Multi-Agent Landscape Assessment
- [ ] Map existing agent types and their capabilities within the system
- [ ] Document current agent coordination mechanisms and communication patterns
- [ ] Identify existing task distribution and load balancing strategies
- [ ] Assess current agent lifecycle management and resource allocation
- [ ] Review existing conflict resolution and error handling mechanisms
- [ ] Document agent performance monitoring and optimization capabilities

### 2. Multi-Agent Coordination Requirements Analysis
- [ ] Define coordination scope and agent interaction requirements
- [ ] Identify task complexity and distribution optimization needs
- [ ] Assess scalability requirements and agent capacity planning
- [ ] Document performance requirements and SLA obligations
- [ ] Evaluate fault tolerance and resilience requirements
- [ ] Define monitoring and observability requirements for agent coordination

### 3. Coordination Architecture Design
- [ ] Design multi-agent coordination architecture with appropriate patterns
- [ ] Plan task distribution and load balancing strategies
- [ ] Create agent communication and synchronization mechanisms
- [ ] Design conflict resolution and consensus building approaches
- [ ] Plan agent lifecycle management and resource optimization
- [ ] Create monitoring and performance optimization framework

## Comprehensive Multi-Agent Coordination Checklist

### 1. Agent Architecture and Lifecycle Management
- [ ] Design agent registration and discovery mechanisms
- [ ] Implement agent lifecycle management (creation, activation, deactivation)
- [ ] Create agent capability registration and advertisement systems
- [ ] Design agent health monitoring and failure detection
- [ ] Implement agent resource allocation and capacity management
- [ ] Create agent versioning and upgrade coordination procedures
- [ ] Design agent authentication and authorization mechanisms

### 2. Task Distribution and Load Balancing
- [ ] Implement intelligent task distribution algorithms based on agent capabilities
- [ ] Create dynamic load balancing with real-time capacity monitoring
- [ ] Design task priority management and queue optimization
- [ ] Implement task affinity and locality optimization for performance
- [ ] Create task retry and failure recovery mechanisms
- [ ] Design task progress tracking and completion validation
- [ ] Implement task cancellation and cleanup procedures

### 3. Inter-Agent Communication and Synchronization
- [ ] Design efficient inter-agent messaging and communication protocols
- [ ] Implement asynchronous communication patterns with message queuing
- [ ] Create agent synchronization mechanisms for coordinated operations
- [ ] Design event-driven communication with publish/subscribe patterns
- [ ] Implement communication security and message authentication
- [ ] Create communication monitoring and debugging capabilities
- [ ] Design communication failure handling and recovery procedures

### 4. Conflict Resolution and Consensus Building
- [ ] Implement conflict detection mechanisms for resource and task conflicts
- [ ] Create consensus algorithms for distributed decision making
- [ ] Design priority-based conflict resolution strategies
- [ ] Implement deadlock detection and resolution mechanisms
- [ ] Create resource contention management and fair allocation
- [ ] Design escalation procedures for unresolvable conflicts
- [ ] Implement conflict logging and analysis for pattern identification

### 5. Performance Optimization and Scalability
- [ ] Implement agent performance monitoring with comprehensive metrics
- [ ] Create dynamic scaling strategies based on workload and demand
- [ ] Design resource optimization and efficient utilization strategies
- [ ] Implement caching and data sharing optimization between agents
- [ ] Create performance bottleneck identification and resolution
- [ ] Design predictive scaling based on historical patterns and trends
- [ ] Implement performance benchmarking and continuous optimization

### 6. Monitoring and Observability
- [ ] Create comprehensive multi-agent system dashboards and visualization
- [ ] Implement agent performance metrics and KPI tracking
- [ ] Design coordination efficiency measurement and optimization
- [ ] Create agent interaction mapping and dependency analysis
- [ ] Implement alerting for coordination failures and performance issues
- [ ] Design audit logging for agent actions and decision tracking
- [ ] Create system health monitoring and predictive maintenance

## Database Multi-Agent Integration (if applicable)
- [ ] Use postgres tool to validate database coordination procedures
- [ ] Implement database connection pooling for multi-agent access
- [ ] Create database transaction coordination across multiple agents
- [ ] Design database consistency and isolation management
- [ ] Implement database performance monitoring for agent operations
- [ ] Create database backup and recovery coordination procedures

## Pattern Compliance Validation
- [ ] Verify coordination approach follows Agno framework multi-agent patterns
- [ ] Check alignment with context7/agno agent collaboration best practices
- [ ] Validate consistency with Automagik Hive multi-agent standards
- [ ] Ensure coordination maintains system reliability and performance
- [ ] Document coordination decisions and architectural trade-offs
- [ ] Confirm compliance with enterprise security and governance requirements

## Memory-Driven Multi-Agent Coordination Insights
- [ ] Apply successful coordination patterns from previous multi-agent implementations
- [ ] Reference effective task distribution strategies from historical systems
- [ ] Leverage lessons learned from past coordination challenges and solutions
- [ ] Cross-check against known multi-agent anti-patterns and coordination issues
- [ ] Apply historical performance optimization insights for agent coordination
- [ ] Utilize proven conflict resolution and consensus building approaches from memory

## Goal
Establish efficient, scalable, and reliable multi-agent coordination with optimized task distribution, seamless communication, effective conflict resolution, and comprehensive monitoring.

## Deliverables
1. **Multi-agent coordination architecture** with orchestration and communication design
2. **Task distribution system** with intelligent load balancing and optimization
3. **Inter-agent communication** with secure messaging and synchronization mechanisms
4. **Conflict resolution framework** with consensus building and escalation procedures
5. **Performance monitoring** with comprehensive metrics and optimization capabilities
6. **Operational procedures** with lifecycle management and troubleshooting guides

## Success Criteria
- [ ] Multi-agent coordination achieves target task throughput and efficiency
- [ ] Task distribution optimally utilizes agent capabilities and resources
- [ ] Inter-agent communication operates reliably with minimal latency
- [ ] Conflict resolution successfully manages resource and task conflicts
- [ ] System scales effectively with increased agent count and workload
- [ ] Monitoring provides comprehensive visibility into coordination effectiveness
- [ ] Coordination approach aligns with Agno framework multi-agent patterns
- [ ] Stakeholders can effectively manage and optimize multi-agent operations

## Automated Learning Capture
The system will automatically capture:
- Effective multi-agent coordination patterns and orchestration strategies
- Task distribution optimization techniques and load balancing approaches
- Inter-agent communication patterns and synchronization strategies
- Conflict resolution methods and consensus building approaches
- Performance optimization techniques and scalability enhancement strategies
- Monitoring and observability approaches for multi-agent system management

---

**Enhanced with MCP Integration**: This template leverages ask-repo-agent for Agno multi-agent research, search-repo-docs for context7 coordination approaches, postgres tool for database coordination validation, and intelligent memory system for multi-agent coordination pattern learning and orchestration optimization.