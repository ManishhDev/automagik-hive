# Forge Template: Intelligent Performance Optimization  
# Enhanced with MCP integration, memory, and WhatsApp notifications
# Migrated from: performance-boost.yaml to match default template style

name: "intelligent-performance-boost"
title: "Optimize performance for [component/system]"
description: "AI-powered performance analysis with Agno benchmarking patterns, memory-driven insights, and systematic optimization"

## Memory Context
<memory>
<!-- Previous performance bottlenecks, optimization results, and benchmark data -->
</memory>

## Agno Performance Pattern Research
### Research Phase
- [ ] Search agno-agi/agi for performance optimization patterns using ask-repo-agent
- [ ] Query context7/agno for benchmarking methodologies using search-repo-docs
- [ ] Research Agno's performance testing framework (1000+ run benchmarks)
- [ ] Identify multi-agent performance coordination patterns
- [ ] Study Agno's memory efficiency patterns (~6.5KiB per agent target)

## Contextual Performance Analysis for Automagik Hive
### 1. Performance Baseline Establishment
- [ ] Document current system performance metrics and benchmarks
- [ ] Identify performance-critical components and workflows
- [ ] Map resource usage patterns (CPU, memory, I/O, network)
- [ ] Establish baseline measurements for key performance indicators
- [ ] Review existing performance monitoring and alerting systems

### 2. Bottleneck Identification Analysis
- [ ] Profile agent instantiation and lifecycle performance
- [ ] Analyze database query performance using postgres tool
- [ ] Map memory usage patterns and potential leaks
- [ ] Identify I/O bottlenecks and file system operations
- [ ] Document network latency and throughput constraints

### 3. System Architecture Performance Review
- [ ] Analyze multi-agent coordination overhead
- [ ] Review workflow orchestration performance
- [ ] Assess API endpoint response times and throughput
- [ ] Evaluate container and deployment performance
- [ ] Map inter-service communication performance patterns

## Comprehensive Performance Optimization Checklist

### 1. Code-Level Performance Analysis
- [ ] Profile function execution times and call frequency
- [ ] Identify inefficient algorithms and data structures
- [ ] Optimize hot paths and frequently executed code
- [ ] Review loop efficiency and computational complexity
- [ ] Eliminate redundant calculations and operations
- [ ] Apply memory optimization patterns following Agno guidelines

### 2. Database Performance Optimization  
- [ ] Use postgres tool to analyze query execution plans
- [ ] Identify slow queries and optimization opportunities
- [ ] Optimize database indexes and table structures
- [ ] Review connection pooling and transaction efficiency
- [ ] Test database scaling and performance under load
- [ ] Validate backup and replication performance impact

### 3. Agent Performance Optimization (Automagik Hive Specific)
- [ ] Benchmark agent instantiation time (target: sub-microsecond like Agno)
- [ ] Optimize agent memory usage (target: minimal footprint like Agno's 6.5KiB)
- [ ] Profile agent-to-agent communication overhead
- [ ] Optimize workflow execution and state management
- [ ] Test agent scaling and resource utilization
- [ ] Validate agent lifecycle performance patterns

### 4. System Integration Performance
- [ ] Profile API request/response cycles and middleware overhead
- [ ] Optimize serialization and deserialization performance
- [ ] Test caching strategies and cache hit ratios
- [ ] Analyze load balancing and traffic distribution efficiency
- [ ] Optimize authentication and authorization performance
- [ ] Review third-party integration performance impact

### 5. Infrastructure and Deployment Performance
- [ ] Benchmark container startup and resource allocation
- [ ] Optimize build and deployment pipeline performance
- [ ] Test scaling behavior under various load conditions
- [ ] Analyze resource utilization and cost efficiency
- [ ] Validate monitoring and logging performance overhead
- [ ] Review backup and disaster recovery performance

### 6. Memory and Resource Management
- [ ] Profile memory allocation patterns and garbage collection
- [ ] Identify memory leaks and resource cleanup issues
- [ ] Optimize data structure choices and memory layout
- [ ] Test resource limits and constraint handling
- [ ] Validate resource pooling and reuse strategies
- [ ] Monitor long-running process resource consumption

## Agno-Style Performance Benchmarking
- [ ] Implement 1000+ run performance tests following Agno methodology
- [ ] Establish statistical significance for performance measurements
- [ ] Create automated performance regression testing
- [ ] Generate performance comparison reports and trends
- [ ] Document performance characteristics and scaling behavior

## Memory-Driven Performance Insights
- [ ] Apply performance optimization patterns from memory
- [ ] Reference successful optimization strategies from previous sessions
- [ ] Cross-check against known performance anti-patterns
- [ ] Leverage historical benchmark data for comparison
- [ ] Apply lessons learned from past performance investigations

## Pattern Compliance Validation
- [ ] Verify optimization approaches follow Agno performance patterns
- [ ] Check alignment with context7/agno performance best practices
- [ ] Validate consistency with Automagik Hive performance standards
- [ ] Ensure optimizations don't compromise system reliability
- [ ] Document performance trade-offs and architectural decisions

## Goal
Achieve measurable performance improvements with comprehensive optimization based on Agno benchmarking patterns, targeting specific metrics like sub-microsecond agent instantiation and minimal memory footprint while maintaining system reliability.

## Deliverables
1. **Performance analysis report** with detailed bottleneck identification
2. **Benchmark results** following Agno's 1000+ run methodology
3. **Optimization implementation** with before/after performance metrics
4. **Performance monitoring setup** with key performance indicators
5. **Scaling recommendations** based on load testing and capacity planning
6. **Performance documentation** with optimization patterns and maintenance guidelines

## Success Criteria
- [ ] Measurable performance improvements in identified bottlenecks
- [ ] Agent instantiation performance approaches Agno benchmarks
- [ ] Memory usage optimized following Agno efficiency patterns
- [ ] Database performance validated and optimized using postgres tool
- [ ] System scaling behavior documented and validated
- [ ] Performance monitoring and alerting systems functional
- [ ] Optimization patterns align with Agno framework best practices

## Automated Learning Capture
The system will automatically capture:
- Effective optimization strategies and performance gains achieved
- Benchmarking methodologies and statistical analysis approaches
- Performance bottleneck patterns and identification techniques
- Resource utilization insights and scaling behavior patterns
- Agent performance characteristics and optimization opportunities

---

**Enhanced with MCP Integration**: This template leverages ask-repo-agent for Agno performance patterns, search-repo-docs for context7 optimization approaches, postgres tool for database performance analysis, and intelligent memory system for performance optimization pattern learning and historical benchmark comparison.