# Forge Template: Intelligent Refactoring Architect
# Enhanced with MCP integration, memory, and WhatsApp notifications
# Code transformation, architectural improvements, and pattern modernization

name: "intelligent-refactoring-architect"
title: "Architect comprehensive refactoring for [component/system]"
description: "AI-powered refactoring with architectural analysis, code transformation strategies, pattern modernization, and technical debt reduction"

## Memory Context
<memory>
<!-- Previous refactoring strategies, architectural patterns, code transformation approaches, and technical debt solutions -->
</memory>

## Agno Refactoring Pattern Research
### Research Phase
- [ ] Search agno-agi/agi for refactoring and architectural evolution patterns using ask-repo-agent
- [ ] Query context7/agno for code transformation and modernization best practices using search-repo-docs
- [ ] Research Agno's architectural pattern evolution and system redesign approaches
- [ ] Identify multi-agent coordination patterns during large-scale refactoring
- [ ] Study Agno's technical debt management and code quality improvement strategies
- [ ] Cross-reference with existing Automagik Hive refactoring patterns and conventions

## Contextual Refactoring Analysis for Automagik Hive
### 1. Current Architecture and Code Quality Assessment
- [ ] Map existing system architecture and identify structural anti-patterns
- [ ] Analyze code quality metrics and technical debt accumulation
- [ ] Document current design patterns and architectural decisions
- [ ] Identify performance bottlenecks and scalability limitations
- [ ] Assess code maintainability and development velocity impact
- [ ] Review existing test coverage and refactoring safety measures

### 2. Refactoring Scope and Impact Analysis
- [ ] Define refactoring boundaries and affected components
- [ ] Identify breaking changes and backward compatibility requirements
- [ ] Assess business risk and user impact during refactoring phases
- [ ] Document resource requirements and timeline constraints
- [ ] Evaluate team skill requirements and knowledge transfer needs
- [ ] Plan incremental refactoring strategy with measurable milestones

### 3. Target Architecture Design
- [ ] Design improved architecture with modern patterns and best practices
- [ ] Plan component decoupling and dependency injection improvements
- [ ] Create data flow optimization and state management enhancements
- [ ] Design performance improvements and scalability enhancements
- [ ] Plan security hardening and vulnerability remediation
- [ ] Create maintainability improvements and code organization optimization

## Comprehensive Refactoring Architecture Checklist

### 1. Architectural Analysis and Planning
- [ ] Conduct comprehensive architectural review with pattern identification
- [ ] Create dependency mapping and coupling analysis
- [ ] Identify architectural smells and anti-pattern elimination opportunities
- [ ] Design target architecture with improved separation of concerns
- [ ] Plan component boundaries and interface definitions
- [ ] Create architectural decision records (ADRs) for major changes
- [ ] Design migration strategy with minimal disruption approach

### 2. Code Structure and Pattern Modernization
- [ ] Refactor legacy patterns to modern architectural approaches
- [ ] Implement design patterns for improved code organization
- [ ] Extract reusable components and eliminate code duplication
- [ ] Modernize data access patterns and repository implementations
- [ ] Improve error handling and exception management strategies
- [ ] Implement proper abstraction layers and interface segregation
- [ ] Optimize class hierarchies and inheritance relationships

### 3. Performance and Scalability Improvements
- [ ] Identify and eliminate performance bottlenecks through profiling
- [ ] Optimize data structures and algorithm implementations
- [ ] Implement caching strategies and memory usage optimization
- [ ] Refactor synchronous operations to asynchronous patterns
- [ ] Optimize database queries and data access patterns
- [ ] Implement resource pooling and connection management improvements
- [ ] Design horizontal scaling and load distribution enhancements

### 4. Technical Debt Reduction and Code Quality
- [ ] Eliminate dead code and unused dependencies
- [ ] Refactor complex methods and reduce cyclomatic complexity
- [ ] Improve naming conventions and code readability
- [ ] Add comprehensive documentation and inline comments
- [ ] Implement proper logging and debugging instrumentation
- [ ] Refactor configuration management and environment handling
- [ ] Improve code consistency and style standardization

### 5. Testing and Quality Assurance Integration
- [ ] Enhance test coverage with comprehensive unit and integration tests
- [ ] Refactor test code for maintainability and reliability
- [ ] Implement test automation and continuous quality validation
- [ ] Create performance regression testing for refactored components
- [ ] Design contract testing for interface changes
- [ ] Implement mutation testing for test quality validation
- [ ] Create comprehensive end-to-end testing for critical workflows

### 6. Migration and Deployment Strategy
- [ ] Design incremental migration strategy with feature flags
- [ ] Plan backward compatibility maintenance during transition
- [ ] Create rollback procedures and risk mitigation strategies
- [ ] Implement gradual rollout with monitoring and validation
- [ ] Design data migration and state transfer procedures
- [ ] Plan team training and knowledge transfer sessions
- [ ] Create documentation and runbook updates for operational changes

## Database Refactoring Integration (if applicable)
- [ ] Use postgres tool to validate database refactoring procedures
- [ ] Design database schema evolution and migration strategies
- [ ] Optimize database queries and indexing strategies
- [ ] Refactor data access patterns and ORM implementations
- [ ] Implement database connection pooling and transaction optimization
- [ ] Plan database performance testing and validation procedures

## Pattern Compliance Validation
- [ ] Verify refactoring approach follows Agno framework evolution patterns
- [ ] Check alignment with context7/agno refactoring best practices
- [ ] Validate consistency with Automagik Hive architectural standards
- [ ] Ensure refactoring maintains system reliability and performance
- [ ] Document refactoring decisions and architectural trade-offs
- [ ] Confirm compliance with enterprise security and governance requirements

## Memory-Driven Refactoring Insights
- [ ] Apply successful refactoring patterns from previous implementations
- [ ] Reference effective architectural evolution strategies from memory
- [ ] Leverage lessons learned from past refactoring challenges and successes
- [ ] Cross-check against known refactoring anti-patterns and pitfalls
- [ ] Apply historical technical debt reduction insights and strategies
- [ ] Utilize proven migration and deployment patterns from memory

## Goal
Execute comprehensive architectural refactoring with improved code quality, performance, maintainability, and scalability while minimizing business disruption and maintaining system reliability.

## Deliverables
1. **Architectural improvement plan** with target design and migration strategy
2. **Refactored codebase** with improved patterns and reduced technical debt
3. **Performance optimization** with measurable improvements and benchmarks
4. **Enhanced test suite** with comprehensive coverage and quality validation
5. **Migration procedures** with rollback capabilities and risk mitigation
6. **Documentation updates** with architectural decisions and operational changes

## Success Criteria
- [ ] Code quality metrics show measurable improvement in maintainability
- [ ] System performance meets or exceeds baseline measurements
- [ ] Technical debt reduction achieves target reduction percentages
- [ ] Test coverage increases with improved test quality and reliability
- [ ] Development velocity improves with reduced complexity and better organization
- [ ] System reliability maintains or improves during and after refactoring
- [ ] Refactoring approach aligns with Agno framework patterns
- [ ] Team productivity and satisfaction improve with modernized codebase

## Automated Learning Capture
The system will automatically capture:
- Effective refactoring strategy patterns and architectural decision approaches
- Code transformation techniques and pattern modernization strategies
- Technical debt reduction methods and quality improvement insights
- Performance optimization approaches and scalability enhancement techniques
- Migration strategy effectiveness and risk mitigation approaches
- Team collaboration patterns and knowledge transfer strategies during refactoring

---

**Enhanced with MCP Integration**: This template leverages ask-repo-agent for Agno refactoring research, search-repo-docs for context7 architectural approaches, postgres tool for database refactoring validation, and intelligent memory system for refactoring pattern learning and architectural optimization.