{
  "testModules": [
    {
      "moduleId": "tests/lib_utils/test_version_factory.py",
      "tests": [
        {
          "name": "test_create_coordinator_via_factory",
          "fullName": "tests/lib_utils/test_version_factory.py::TestCoordinatorIntegration::test_create_coordinator_via_factory",
          "state": "passed"
        },
        {
          "name": "test_coordinator_creation_methods_mapping",
          "fullName": "tests/lib_utils/test_version_factory.py::TestCoordinatorIntegration::test_coordinator_creation_methods_mapping",
          "state": "passed"
        },
        {
          "name": "test_coordinator_yaml_fallback",
          "fullName": "tests/lib_utils/test_version_factory.py::TestCoordinatorIntegration::test_coordinator_yaml_fallback",
          "state": "passed"
        },
        {
          "name": "test_coordinator_config_paths",
          "fullName": "tests/lib_utils/test_version_factory.py::TestCoordinatorIntegration::test_coordinator_config_paths",
          "state": "passed"
        },
        {
          "name": "test_coordinator_proxy_integration",
          "fullName": "tests/lib_utils/test_version_factory.py::TestCoordinatorIntegration::test_coordinator_proxy_integration",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestCoordinatorIntegration object at 0x74f41fd9cec0>\n\n    @pytest.mark.asyncio\n    async def test_coordinator_proxy_integration(self):\n        \"\"\"Test that coordinator proxy is properly integrated.\"\"\"\n        from lib.utils.version_factory import VersionFactory\n    \n        with patch.dict(\"os.environ\", {\"HIVE_DATABASE_URL\": \"postgresql://test\"}):\n            factory = VersionFactory()\n    \n            mock_coordinator = MagicMock()\n            mock_coordinator.metadata = {\"component_type\": \"coordinator\"}\n    \n            with patch(\"lib.utils.agno_proxy.get_agno_coordinator_proxy\") as mock_get_proxy:\n                mock_proxy = AsyncMock()\n                mock_proxy.create_coordinator.return_value = mock_coordinator\n                mock_proxy.get_supported_parameters.return_value = {\"test_param\"}\n                mock_get_proxy.return_value = mock_proxy\n    \n>               result = await factory._create_coordinator(\n                    \"test-coordinator\",\n                    {\"coordinator\": {\"name\": \"Test\"}},\n                    \"session123\",\n                    False,\n                    \"user123\"\n                )\n\ntests/lib_utils/test_version_factory.py:1583: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lib.utils.version_factory.VersionFactory object at 0x74f3caea1310>\ncomponent_id = 'test-coordinator', config = {'coordinator': {'name': 'Test'}}\nsession_id = 'session123', debug_mode = False, user_id = 'user123'\nmetrics_service = None, kwargs = {}\nget_agno_coordinator_proxy = <MagicMock name='get_agno_coordinator_proxy' id='128590430218544'>\nproxy = <AsyncMock name='get_agno_coordinator_proxy()' id='128590430222912'>\ncoordinator = <MagicMock name='get_agno_coordinator_proxy().create_coordinator()' id='128590430214752'>\n\n    async def _create_coordinator(\n        self,\n        component_id: str,\n        config: dict[str, Any],\n        session_id: str | None,\n        debug_mode: bool,\n        user_id: str | None,\n        metrics_service: object | None = None,\n        **kwargs,\n    ) -> Agent:\n        \"\"\"Create coordinator using dynamic Agno Agent proxy configured as coordinator.\"\"\"\n    \n        # Use the dynamic coordinator proxy system for automatic Agno compatibility\n        from lib.utils.agno_proxy import get_agno_coordinator_proxy\n    \n        proxy = get_agno_coordinator_proxy()\n    \n        # Create coordinator using dynamic proxy\n        coordinator = await proxy.create_coordinator(\n            component_id=component_id,\n            config=config,\n            session_id=session_id,\n            debug_mode=debug_mode,\n            user_id=user_id,\n            db_url=self.db_url,\n            metrics_service=metrics_service,\n            **kwargs,\n        )\n    \n        logger.debug(\n>           f\"\ud83c\udfaf Coordinator {component_id} created with {len(proxy.get_supported_parameters())} available Agno Agent parameters\"\n                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        )\nE       TypeError: object of type 'coroutine' has no len()\n\nlib/utils/version_factory.py:639: TypeError"
            }
          ]
        }
      ]
    }
  ]
}