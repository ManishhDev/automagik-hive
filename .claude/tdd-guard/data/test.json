{
  "testModules": [
    {
      "moduleId": "tests/ai_components/agents/test_agent_registry.py",
      "tests": [
        {
          "name": "test_discover_agents_no_directory",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentDiscovery::test_discover_agents_no_directory",
          "state": "passed"
        },
        {
          "name": "test_discover_agents_with_valid_configs",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentDiscovery::test_discover_agents_with_valid_configs",
          "state": "passed"
        },
        {
          "name": "test_discover_agents_skips_files",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentDiscovery::test_discover_agents_skips_files",
          "state": "passed"
        },
        {
          "name": "test_discover_agents_handles_invalid_yaml",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentDiscovery::test_discover_agents_handles_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_catalog_singleton",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_get_mcp_catalog_singleton",
          "state": "passed"
        },
        {
          "name": "test_get_available_agents",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_get_available_agents",
          "state": "passed"
        },
        {
          "name": "test_get_agent_success",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_get_agent_success",
          "state": "passed"
        },
        {
          "name": "test_get_agent_not_found",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_get_agent_not_found",
          "state": "passed"
        },
        {
          "name": "test_get_all_agents_success",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_get_all_agents_success",
          "state": "passed"
        },
        {
          "name": "test_get_all_agents_with_failures",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_get_all_agents_with_failures",
          "state": "passed"
        },
        {
          "name": "test_list_available_agents",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_list_available_agents",
          "state": "passed"
        },
        {
          "name": "test_list_mcp_servers",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_list_mcp_servers",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_server_info",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_get_mcp_server_info",
          "state": "passed"
        },
        {
          "name": "test_reload_mcp_catalog",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestAgentRegistry::test_reload_mcp_catalog",
          "state": "passed"
        },
        {
          "name": "test_get_agent_factory",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestFactoryFunctions::test_get_agent_factory",
          "state": "passed"
        },
        {
          "name": "test_get_team_agents",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestFactoryFunctions::test_get_team_agents",
          "state": "passed"
        },
        {
          "name": "test_list_mcp_servers_function",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestFactoryFunctions::test_list_mcp_servers_function",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_server_info_function",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestFactoryFunctions::test_get_mcp_server_info_function",
          "state": "passed"
        },
        {
          "name": "test_reload_mcp_catalog_function",
          "fullName": "tests/ai_components/agents/test_agent_registry.py::TestFactoryFunctions::test_reload_mcp_catalog_function",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/ai_components/mcp/test_catalog.py",
      "tests": [
        {
          "name": "test_basic_server_config_creation",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPServerConfig::test_basic_server_config_creation",
          "state": "passed"
        },
        {
          "name": "test_minimal_server_config",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPServerConfig::test_minimal_server_config",
          "state": "passed"
        },
        {
          "name": "test_post_init_args_initialization",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPServerConfig::test_post_init_args_initialization",
          "state": "passed"
        },
        {
          "name": "test_post_init_env_initialization",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPServerConfig::test_post_init_env_initialization",
          "state": "passed"
        },
        {
          "name": "test_is_sse_server_property",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPServerConfig::test_is_sse_server_property",
          "state": "passed"
        },
        {
          "name": "test_is_command_server_property",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPServerConfig::test_is_command_server_property",
          "state": "passed"
        },
        {
          "name": "test_sse_server_with_url",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPServerConfig::test_sse_server_with_url",
          "state": "passed"
        },
        {
          "name": "test_catalog_with_valid_config_file",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_with_valid_config_file",
          "state": "passed"
        },
        {
          "name": "test_catalog_with_missing_config_file",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_with_missing_config_file",
          "state": "passed"
        },
        {
          "name": "test_catalog_with_invalid_json",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_with_invalid_json",
          "state": "passed"
        },
        {
          "name": "test_catalog_with_non_dict_root",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_with_non_dict_root",
          "state": "passed"
        },
        {
          "name": "test_catalog_with_invalid_mcpservers",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_with_invalid_mcpservers",
          "state": "passed"
        },
        {
          "name": "test_catalog_with_mixed_server_types",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_with_mixed_server_types",
          "state": "passed"
        },
        {
          "name": "test_catalog_with_default_command_type",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_with_default_command_type",
          "state": "passed"
        },
        {
          "name": "test_catalog_skips_invalid_server_configs",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_skips_invalid_server_configs",
          "state": "passed"
        },
        {
          "name": "test_get_server_config_success",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_get_server_config_success",
          "state": "passed"
        },
        {
          "name": "test_get_server_config_not_found",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_get_server_config_not_found",
          "state": "passed"
        },
        {
          "name": "test_list_servers",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_list_servers",
          "state": "passed"
        },
        {
          "name": "test_has_server",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_has_server",
          "state": "passed"
        },
        {
          "name": "test_get_server_info",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_get_server_info",
          "state": "passed"
        },
        {
          "name": "test_reload_catalog",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_reload_catalog",
          "state": "passed"
        },
        {
          "name": "test_catalog_str_representation",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_str_representation",
          "state": "passed"
        },
        {
          "name": "test_catalog_repr_representation",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_catalog_repr_representation",
          "state": "passed"
        },
        {
          "name": "test_empty_mcpservers_section",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_empty_mcpservers_section",
          "state": "passed"
        },
        {
          "name": "test_missing_mcpservers_section",
          "fullName": "tests/ai_components/mcp/test_catalog.py::TestMCPCatalog::test_missing_mcpservers_section",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/ai_components/mcp/test_config.py",
      "tests": [
        {
          "name": "test_default_values",
          "fullName": "tests/ai_components/mcp/test_config.py::TestMCPSettings::test_default_values",
          "state": "passed"
        },
        {
          "name": "test_environment_override_boolean",
          "fullName": "tests/ai_components/mcp/test_config.py::TestMCPSettings::test_environment_override_boolean",
          "state": "passed"
        },
        {
          "name": "test_environment_override_float",
          "fullName": "tests/ai_components/mcp/test_config.py::TestMCPSettings::test_environment_override_float",
          "state": "passed"
        },
        {
          "name": "test_multiple_environment_overrides",
          "fullName": "tests/ai_components/mcp/test_config.py::TestMCPSettings::test_multiple_environment_overrides",
          "state": "passed"
        },
        {
          "name": "test_extra_environment_variables_ignored",
          "fullName": "tests/ai_components/mcp/test_config.py::TestMCPSettings::test_extra_environment_variables_ignored",
          "state": "passed"
        },
        {
          "name": "test_case_insensitive_env_vars",
          "fullName": "tests/ai_components/mcp/test_config.py::TestMCPSettings::test_case_insensitive_env_vars",
          "state": "passed"
        },
        {
          "name": "test_model_config_properties",
          "fullName": "tests/ai_components/mcp/test_config.py::TestMCPSettings::test_model_config_properties",
          "state": "passed"
        },
        {
          "name": "test_singleton_behavior",
          "fullName": "tests/ai_components/mcp/test_config.py::TestGetMCPSettings::test_singleton_behavior",
          "state": "passed"
        },
        {
          "name": "test_lazy_initialization",
          "fullName": "tests/ai_components/mcp/test_config.py::TestGetMCPSettings::test_lazy_initialization",
          "state": "passed"
        },
        {
          "name": "test_multiple_calls_single_initialization",
          "fullName": "tests/ai_components/mcp/test_config.py::TestGetMCPSettings::test_multiple_calls_single_initialization",
          "state": "passed"
        },
        {
          "name": "test_environment_variables_in_global_settings",
          "fullName": "tests/ai_components/mcp/test_config.py::TestGetMCPSettings::test_environment_variables_in_global_settings",
          "state": "passed"
        },
        {
          "name": "test_reset_global_settings",
          "fullName": "tests/ai_components/mcp/test_config.py::TestGetMCPSettings::test_reset_global_settings",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/ai_components/mcp/test_connection_manager.py",
      "tests": [
        {
          "name": "test_singleton_behavior",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetCatalog::test_singleton_behavior",
          "state": "passed"
        },
        {
          "name": "test_lazy_initialization",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetCatalog::test_lazy_initialization",
          "state": "passed"
        },
        {
          "name": "test_multiple_calls_single_initialization",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetCatalog::test_multiple_calls_single_initialization",
          "state": "passed"
        },
        {
          "name": "test_sse_server_connection",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetMCPTools::test_sse_server_connection",
          "state": "passed"
        },
        {
          "name": "test_command_server_connection",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetMCPTools::test_command_server_connection",
          "state": "passed"
        },
        {
          "name": "test_command_server_without_args",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetMCPTools::test_command_server_without_args",
          "state": "passed"
        },
        {
          "name": "test_server_not_found",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetMCPTools::test_server_not_found",
          "state": "passed"
        },
        {
          "name": "test_unknown_server_type",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetMCPTools::test_unknown_server_type",
          "state": "passed"
        },
        {
          "name": "test_mcp_tools_creation_failure",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetMCPTools::test_mcp_tools_creation_failure",
          "state": "passed"
        },
        {
          "name": "test_sse_server_with_empty_env",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestGetMCPTools::test_sse_server_with_empty_env",
          "state": "passed"
        },
        {
          "name": "test_sync_sse_server",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestCreateMCPToolsSync::test_sync_sse_server",
          "state": "passed"
        },
        {
          "name": "test_sync_command_server",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestCreateMCPToolsSync::test_sync_command_server",
          "state": "passed"
        },
        {
          "name": "test_sync_server_not_found",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestCreateMCPToolsSync::test_sync_server_not_found",
          "state": "passed"
        },
        {
          "name": "test_sync_unknown_server_type",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestCreateMCPToolsSync::test_sync_unknown_server_type",
          "state": "passed"
        },
        {
          "name": "test_sync_mcp_tools_creation_failure",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestCreateMCPToolsSync::test_sync_mcp_tools_creation_failure",
          "state": "passed"
        },
        {
          "name": "test_sync_command_server_empty_env",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestCreateMCPToolsSync::test_sync_command_server_empty_env",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_connection_manager",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestLegacyCompatibility::test_get_mcp_connection_manager",
          "state": "passed"
        },
        {
          "name": "test_shutdown_mcp_connection_manager",
          "fullName": "tests/ai_components/mcp/test_connection_manager.py::TestLegacyCompatibility::test_shutdown_mcp_connection_manager",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/ai_components/mcp/test_exceptions.py",
      "tests": [
        {
          "name": "test_basic_exception_creation",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPException::test_basic_exception_creation",
          "state": "passed"
        },
        {
          "name": "test_inheritance_chain",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPException::test_inheritance_chain",
          "state": "passed"
        },
        {
          "name": "test_exception_can_be_raised",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPException::test_exception_can_be_raised",
          "state": "passed"
        },
        {
          "name": "test_exception_with_empty_message",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPException::test_exception_with_empty_message",
          "state": "passed"
        },
        {
          "name": "test_exception_with_none_message",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPException::test_exception_with_none_message",
          "state": "passed"
        },
        {
          "name": "test_basic_connection_error_creation",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_basic_connection_error_creation",
          "state": "passed"
        },
        {
          "name": "test_connection_error_with_server_name",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_connection_error_with_server_name",
          "state": "passed"
        },
        {
          "name": "test_connection_error_positional_server_name",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_connection_error_positional_server_name",
          "state": "passed"
        },
        {
          "name": "test_inheritance_chain",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_inheritance_chain",
          "state": "passed"
        },
        {
          "name": "test_connection_error_can_be_raised",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_connection_error_can_be_raised",
          "state": "passed"
        },
        {
          "name": "test_catch_as_base_exception",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_catch_as_base_exception",
          "state": "passed"
        },
        {
          "name": "test_server_name_attribute_access",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_server_name_attribute_access",
          "state": "passed"
        },
        {
          "name": "test_empty_server_name",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_empty_server_name",
          "state": "passed"
        },
        {
          "name": "test_none_server_name_explicit",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_none_server_name_explicit",
          "state": "passed"
        },
        {
          "name": "test_exception_str_representation",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_exception_str_representation",
          "state": "passed"
        },
        {
          "name": "test_exception_repr_representation",
          "fullName": "tests/ai_components/mcp/test_exceptions.py::TestMCPConnectionError::test_exception_repr_representation",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/ai_components/workflows/test_workflow_registry.py",
      "tests": [
        {
          "name": "test_discover_workflows_no_directory",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_discover_workflows_no_directory",
          "state": "passed"
        },
        {
          "name": "test_discover_workflows_success_integration",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_discover_workflows_success_integration",
          "state": "passed"
        },
        {
          "name": "test_discover_workflows_skips_files",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_discover_workflows_skips_files",
          "state": "passed"
        },
        {
          "name": "test_discover_workflows_skips_underscore_dirs",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_discover_workflows_skips_underscore_dirs",
          "state": "passed"
        },
        {
          "name": "test_discover_workflows_missing_config",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_discover_workflows_missing_config",
          "state": "passed"
        },
        {
          "name": "test_discover_workflows_missing_workflow_file",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_discover_workflows_missing_workflow_file",
          "state": "passed"
        },
        {
          "name": "test_discover_workflows_no_factory_function",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_discover_workflows_no_factory_function",
          "state": "passed"
        },
        {
          "name": "test_discover_workflows_import_exception",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_discover_workflows_import_exception",
          "state": "passed"
        },
        {
          "name": "test_hyphen_to_underscore_conversion_logic",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowDiscovery::test_hyphen_to_underscore_conversion_logic",
          "state": "passed"
        },
        {
          "name": "test_get_workflow_registry_lazy_initialization",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_get_workflow_registry_lazy_initialization",
          "state": "passed"
        },
        {
          "name": "test_get_workflow_success",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_get_workflow_success",
          "state": "passed"
        },
        {
          "name": "test_get_workflow_not_found",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_get_workflow_not_found",
          "state": "passed"
        },
        {
          "name": "test_get_workflow_without_version",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_get_workflow_without_version",
          "state": "passed"
        },
        {
          "name": "test_list_available_workflows",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_list_available_workflows",
          "state": "passed"
        },
        {
          "name": "test_list_available_workflows_empty",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_list_available_workflows_empty",
          "state": "passed"
        },
        {
          "name": "test_is_workflow_registered_true",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_is_workflow_registered_true",
          "state": "passed"
        },
        {
          "name": "test_is_workflow_registered_false",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_is_workflow_registered_false",
          "state": "passed"
        },
        {
          "name": "test_workflow_registry_logging",
          "fullName": "tests/ai_components/workflows/test_workflow_registry.py::TestWorkflowRegistry::test_workflow_registry_logging",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_api_dependencies.py",
      "tests": [
        {
          "name": "test_validate_message_dependency_success",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_message_dependency_success",
          "state": "passed"
        },
        {
          "name": "test_validate_message_dependency_empty",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_message_dependency_empty",
          "state": "passed"
        },
        {
          "name": "test_validate_message_dependency_whitespace_only",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_message_dependency_whitespace_only",
          "state": "passed"
        },
        {
          "name": "test_validate_message_dependency_too_long",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_message_dependency_too_long",
          "state": "passed"
        },
        {
          "name": "test_validate_optional_message_dependency_none",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_optional_message_dependency_none",
          "state": "passed"
        },
        {
          "name": "test_validate_optional_message_dependency_valid",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_optional_message_dependency_valid",
          "state": "passed"
        },
        {
          "name": "test_validate_runs_request_json",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_runs_request_json",
          "state": "passed"
        },
        {
          "name": "test_validate_runs_request_empty_json_message",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_runs_request_empty_json_message",
          "state": "passed"
        },
        {
          "name": "test_validate_runs_request_form_data",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_runs_request_form_data",
          "state": "passed"
        },
        {
          "name": "test_validate_runs_request_unsupported_content_type",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestActualMessageValidation::test_validate_runs_request_unsupported_content_type",
          "state": "passed"
        },
        {
          "name": "test_message_validation_integration",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestDependencyIntegration::test_message_validation_integration",
          "state": "passed"
        },
        {
          "name": "test_error_response_format",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestDependencyIntegration::test_error_response_format",
          "state": "passed"
        },
        {
          "name": "test_content_type_handling",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestDependencyIntegration::test_content_type_handling",
          "state": "passed"
        },
        {
          "name": "test_header_validation",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestDependencyIntegration::test_header_validation",
          "state": "passed"
        },
        {
          "name": "test_unicode_message_validation",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestValidationEdgeCases::test_unicode_message_validation",
          "state": "passed"
        },
        {
          "name": "test_special_characters_validation",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestValidationEdgeCases::test_special_characters_validation",
          "state": "passed"
        },
        {
          "name": "test_boundary_length_validation",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestValidationEdgeCases::test_boundary_length_validation",
          "state": "passed"
        },
        {
          "name": "test_validation_error_logging",
          "fullName": "tests/api_integration/test_api_dependencies.py::TestValidationEdgeCases::test_validation_error_logging",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_e2e_integration.py",
      "tests": [
        {
          "name": "test_health_check_to_component_listing",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EUserJourneys::test_health_check_to_component_listing",
          "state": "passed"
        },
        {
          "name": "test_mcp_system_integration_flow",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EUserJourneys::test_mcp_system_integration_flow",
          "state": "passed"
        },
        {
          "name": "test_component_lifecycle_management",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EUserJourneys::test_component_lifecycle_management",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.api_integration.test_e2e_integration.TestE2EUserJourneys object at 0x7bb47b812ab0>\ntest_client = <starlette.testclient.TestClient object at 0x7bb419c06c60>\napi_headers = {'Content-Type': 'application/json', 'x-api-key': 'test-api-key'}\n\n    def test_component_lifecycle_management(self, test_client, api_headers):\n        \"\"\"Test complete component lifecycle management.\"\"\"\n        component_id = \"test-lifecycle-component\"\n    \n        # 1. Create a new component version\n        create_data = {\n            \"component_type\": \"agent\",\n            \"version\": 1,\n            \"config\": {\"test\": True, \"lifecycle\": \"test\"},\n            \"description\": \"Lifecycle test component\",\n            \"is_active\": False,\n        }\n    \n        create_response = test_client.post(\n            f\"/api/v1/version/components/{component_id}/versions\",\n            json=create_data,\n            headers=api_headers,\n        )\n    \n        if create_response.status_code == status.HTTP_200_OK:\n            # 2. Get the created version\n            get_response = test_client.get(\n                f\"/api/v1/version/components/{component_id}/versions/1\",\n                headers=api_headers,\n            )\n            assert get_response.status_code == status.HTTP_200_OK\n    \n            # 3. Update the version configuration\n            update_data = {\n                \"config\": {\"test\": True, \"lifecycle\": \"updated\"},\n                \"reason\": \"Lifecycle test update\",\n            }\n    \n            update_response = test_client.put(\n                f\"/api/v1/version/components/{component_id}/versions/1\",\n                json=update_data,\n                headers=api_headers,\n            )\n            # Expect 501 Not Implemented - waiting for production fix: FORGE-TASK-30582ec6\n            # TODO: Change to HTTP_200_OK when PUT endpoint is implemented in AgnoVersionService\n>           assert update_response.status_code == status.HTTP_501_NOT_IMPLEMENTED\nE           assert 200 == 501\nE            +  where 200 = <Response [200 OK]>.status_code\nE            +  and   501 = status.HTTP_501_NOT_IMPLEMENTED\n\ntests/api_integration/test_e2e_integration.py:96: AssertionError"
            }
          ]
        },
        {
          "name": "test_invalid_component_execution_flow",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EErrorScenarios::test_invalid_component_execution_flow",
          "state": "passed"
        },
        {
          "name": "test_malformed_request_error_flow",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EErrorScenarios::test_malformed_request_error_flow",
          "state": "passed"
        },
        {
          "name": "test_authentication_error_flow",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EErrorScenarios::test_authentication_error_flow",
          "state": "passed"
        },
        {
          "name": "test_concurrent_health_checks",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EPerformanceScenarios::test_concurrent_health_checks",
          "state": "passed"
        },
        {
          "name": "test_mixed_endpoint_load",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EPerformanceScenarios::test_mixed_endpoint_load",
          "state": "passed"
        },
        {
          "name": "test_large_request_handling",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EPerformanceScenarios::test_large_request_handling",
          "state": "passed"
        },
        {
          "name": "test_component_version_consistency",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EDataConsistency::test_component_version_consistency",
          "state": "passed"
        },
        {
          "name": "test_mcp_data_consistency",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EDataConsistency::test_mcp_data_consistency",
          "state": "passed"
        },
        {
          "name": "test_async_endpoint_integration",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EAsyncIntegration::test_async_endpoint_integration",
          "state": "passed"
        },
        {
          "name": "test_async_concurrent_requests",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EAsyncIntegration::test_async_concurrent_requests",
          "state": "passed"
        },
        {
          "name": "test_system_resilience_after_errors",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EErrorRecovery::test_system_resilience_after_errors",
          "state": "passed"
        },
        {
          "name": "test_graceful_degradation",
          "fullName": "tests/api_integration/test_e2e_integration.py::TestE2EErrorRecovery::test_graceful_degradation",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_health_endpoints.py",
      "tests": [
        {
          "name": "test_health_check_success",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_success",
          "state": "passed"
        },
        {
          "name": "test_health_check_headers",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_headers",
          "state": "passed"
        },
        {
          "name": "test_health_check_no_auth_required",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_no_auth_required",
          "state": "passed"
        },
        {
          "name": "test_health_check_different_methods",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_different_methods",
          "state": "passed"
        },
        {
          "name": "test_health_check_with_query_params",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_with_query_params",
          "state": "passed"
        },
        {
          "name": "test_health_check_response_time",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_response_time",
          "state": "passed"
        },
        {
          "name": "test_health_check_concurrent_requests",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_concurrent_requests",
          "state": "passed"
        },
        {
          "name": "test_health_check_async",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_async",
          "state": "passed"
        },
        {
          "name": "test_health_check_with_custom_headers",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_with_custom_headers",
          "state": "passed"
        },
        {
          "name": "test_health_check_response_schema",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_response_schema",
          "state": "passed"
        },
        {
          "name": "test_health_check_utf8_encoding",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_utf8_encoding",
          "state": "passed"
        },
        {
          "name": "test_health_check_multiple_calls_consistency",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_multiple_calls_consistency",
          "state": "passed"
        },
        {
          "name": "test_health_check_case_sensitivity",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_case_sensitivity",
          "state": "passed"
        },
        {
          "name": "test_health_check_trailing_slash",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_trailing_slash",
          "state": "passed"
        },
        {
          "name": "test_health_check_monitoring_fields",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpoints::test_health_check_monitoring_fields",
          "state": "passed"
        },
        {
          "name": "test_health_with_auth_enabled",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpointIntegration::test_health_with_auth_enabled",
          "state": "passed"
        },
        {
          "name": "test_health_during_startup",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpointIntegration::test_health_during_startup",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_stability",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpointIntegration::test_health_endpoint_stability",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_paths[/health]",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpointIntegration::test_health_endpoint_paths[/health]",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_paths[/api/v1/health]",
          "fullName": "tests/api_integration/test_health_endpoints.py::TestHealthEndpointIntegration::test_health_endpoint_paths[/api/v1/health]",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_main_app.py",
      "tests": [
        {
          "name": "test_create_app_basic",
          "fullName": "tests/api_integration/test_main_app.py::TestAppCreation::test_create_app_basic",
          "state": "passed"
        },
        {
          "name": "test_create_app_with_docs_enabled",
          "fullName": "tests/api_integration/test_main_app.py::TestAppCreation::test_create_app_with_docs_enabled",
          "state": "passed"
        },
        {
          "name": "test_create_app_with_docs_disabled",
          "fullName": "tests/api_integration/test_main_app.py::TestAppCreation::test_create_app_with_docs_disabled",
          "state": "passed"
        },
        {
          "name": "test_create_app_with_auth_enabled",
          "fullName": "tests/api_integration/test_main_app.py::TestAppCreation::test_create_app_with_auth_enabled",
          "state": "passed"
        },
        {
          "name": "test_create_app_router_inclusion",
          "fullName": "tests/api_integration/test_main_app.py::TestAppCreation::test_create_app_router_inclusion",
          "state": "passed"
        },
        {
          "name": "test_lifespan_startup",
          "fullName": "tests/api_integration/test_main_app.py::TestAppLifespan::test_lifespan_startup",
          "state": "passed"
        },
        {
          "name": "test_lifespan_auth_initialization",
          "fullName": "tests/api_integration/test_main_app.py::TestAppLifespan::test_lifespan_auth_initialization",
          "state": "passed"
        },
        {
          "name": "test_cors_development_origins",
          "fullName": "tests/api_integration/test_main_app.py::TestCORSMiddleware::test_cors_development_origins",
          "state": "passed"
        },
        {
          "name": "test_cors_actual_request",
          "fullName": "tests/api_integration/test_main_app.py::TestCORSMiddleware::test_cors_actual_request",
          "state": "passed"
        },
        {
          "name": "test_cors_multiple_origins",
          "fullName": "tests/api_integration/test_main_app.py::TestCORSMiddleware::test_cors_multiple_origins",
          "state": "passed"
        },
        {
          "name": "test_cors_methods",
          "fullName": "tests/api_integration/test_main_app.py::TestCORSMiddleware::test_cors_methods",
          "state": "passed"
        },
        {
          "name": "test_cors_credentials",
          "fullName": "tests/api_integration/test_main_app.py::TestCORSMiddleware::test_cors_credentials",
          "state": "passed"
        },
        {
          "name": "test_protected_endpoints_with_auth_disabled",
          "fullName": "tests/api_integration/test_main_app.py::TestAuthenticationIntegration::test_protected_endpoints_with_auth_disabled",
          "state": "passed"
        },
        {
          "name": "test_protected_endpoints_with_auth_enabled",
          "fullName": "tests/api_integration/test_main_app.py::TestAuthenticationIntegration::test_protected_endpoints_with_auth_enabled",
          "state": "passed"
        },
        {
          "name": "test_valid_api_key_access",
          "fullName": "tests/api_integration/test_main_app.py::TestAuthenticationIntegration::test_valid_api_key_access",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_no_auth_required",
          "fullName": "tests/api_integration/test_main_app.py::TestAuthenticationIntegration::test_health_endpoint_no_auth_required",
          "state": "passed"
        },
        {
          "name": "test_404_not_found",
          "fullName": "tests/api_integration/test_main_app.py::TestErrorHandling::test_404_not_found",
          "state": "passed"
        },
        {
          "name": "test_405_method_not_allowed",
          "fullName": "tests/api_integration/test_main_app.py::TestErrorHandling::test_405_method_not_allowed",
          "state": "passed"
        },
        {
          "name": "test_422_validation_error",
          "fullName": "tests/api_integration/test_main_app.py::TestErrorHandling::test_422_validation_error",
          "state": "passed"
        },
        {
          "name": "test_500_internal_server_error",
          "fullName": "tests/api_integration/test_main_app.py::TestErrorHandling::test_500_internal_server_error",
          "state": "passed"
        },
        {
          "name": "test_invalid_json_handling",
          "fullName": "tests/api_integration/test_main_app.py::TestErrorHandling::test_invalid_json_handling",
          "state": "passed"
        },
        {
          "name": "test_app_metadata",
          "fullName": "tests/api_integration/test_main_app.py::TestAppConfiguration::test_app_metadata",
          "state": "passed"
        },
        {
          "name": "test_openapi_configuration",
          "fullName": "tests/api_integration/test_main_app.py::TestAppConfiguration::test_openapi_configuration",
          "state": "passed"
        },
        {
          "name": "test_router_mounting",
          "fullName": "tests/api_integration/test_main_app.py::TestAppConfiguration::test_router_mounting",
          "state": "passed"
        },
        {
          "name": "test_concurrent_health_checks",
          "fullName": "tests/api_integration/test_main_app.py::TestConcurrency::test_concurrent_health_checks",
          "state": "passed"
        },
        {
          "name": "test_concurrent_different_endpoints",
          "fullName": "tests/api_integration/test_main_app.py::TestConcurrency::test_concurrent_different_endpoints",
          "state": "passed"
        },
        {
          "name": "test_middleware_order",
          "fullName": "tests/api_integration/test_main_app.py::TestMiddlewareStack::test_middleware_order",
          "state": "passed"
        },
        {
          "name": "test_request_processing_time",
          "fullName": "tests/api_integration/test_main_app.py::TestMiddlewareStack::test_request_processing_time",
          "state": "passed"
        },
        {
          "name": "test_async_middleware_handling",
          "fullName": "tests/api_integration/test_main_app.py::TestMiddlewareStack::test_async_middleware_handling",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_main_direct.py",
      "tests": [
        {
          "name": "test_create_app_import_and_structure",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_create_app_import_and_structure",
          "state": "passed"
        },
        {
          "name": "test_lifespan_function_direct",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_lifespan_function_direct",
          "state": "passed"
        },
        {
          "name": "test_lifespan_execution",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_lifespan_execution",
          "state": "passed"
        },
        {
          "name": "test_app_creation_with_all_settings",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_app_creation_with_all_settings",
          "state": "passed"
        },
        {
          "name": "test_router_inclusion",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_router_inclusion",
          "state": "passed"
        },
        {
          "name": "test_cors_middleware_configuration",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_cors_middleware_configuration",
          "state": "passed"
        },
        {
          "name": "test_protected_router_configuration",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_protected_router_configuration",
          "state": "passed"
        },
        {
          "name": "test_app_module_level_variable",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_app_module_level_variable",
          "state": "passed"
        },
        {
          "name": "test_error_handling_during_app_creation",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModule::test_error_handling_during_app_creation",
          "state": "passed"
        },
        {
          "name": "test_app_with_actual_routers",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModuleIntegration::test_app_with_actual_routers",
          "state": "passed"
        },
        {
          "name": "test_middleware_stack_order",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModuleIntegration::test_middleware_stack_order",
          "state": "passed"
        },
        {
          "name": "test_app_startup_sequence",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModuleIntegration::test_app_startup_sequence",
          "state": "passed"
        },
        {
          "name": "test_app_configuration_completeness",
          "fullName": "tests/api_integration/test_main_direct.py::TestMainModuleIntegration::test_app_configuration_completeness",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_mcp_router.py",
      "tests": [
        {
          "name": "test_get_mcp_status_success",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPStatus::test_get_mcp_status_success",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_status_empty_servers",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPStatus::test_get_mcp_status_empty_servers",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_status_catalog_error",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPStatus::test_get_mcp_status_catalog_error",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_status_no_auth_required",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPStatus::test_get_mcp_status_no_auth_required",
          "state": "passed"
        },
        {
          "name": "test_list_available_servers_success",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerListing::test_list_available_servers_success",
          "state": "passed"
        },
        {
          "name": "test_list_available_servers_with_errors",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerListing::test_list_available_servers_with_errors",
          "state": "passed"
        },
        {
          "name": "test_list_available_servers_empty",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerListing::test_list_available_servers_empty",
          "state": "passed"
        },
        {
          "name": "test_list_available_servers_catalog_error",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerListing::test_list_available_servers_catalog_error",
          "state": "passed"
        },
        {
          "name": "test_test_server_connection_success",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerTesting::test_test_server_connection_success",
          "state": "passed"
        },
        {
          "name": "test_test_server_connection_failure",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerTesting::test_test_server_connection_failure",
          "state": "passed"
        },
        {
          "name": "test_test_server_connection_no_tools_method",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerTesting::test_test_server_connection_no_tools_method",
          "state": "passed"
        },
        {
          "name": "test_test_server_connection_tools_error",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerTesting::test_test_server_connection_tools_error",
          "state": "passed"
        },
        {
          "name": "test_test_server_connection_special_chars",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPServerTesting::test_test_server_connection_special_chars",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_configuration_success",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPConfiguration::test_get_mcp_configuration_success",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_configuration_with_errors",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPConfiguration::test_get_mcp_configuration_with_errors",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_configuration_empty",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPConfiguration::test_get_mcp_configuration_empty",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_configuration_catalog_error",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPConfiguration::test_get_mcp_configuration_catalog_error",
          "state": "passed"
        },
        {
          "name": "test_mcp_endpoints_async",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_endpoints_async",
          "state": "passed"
        },
        {
          "name": "test_mcp_endpoints_without_auth",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_endpoints_without_auth",
          "state": "passed"
        },
        {
          "name": "test_mcp_endpoints_invalid_methods",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_endpoints_invalid_methods",
          "state": "passed"
        },
        {
          "name": "test_mcp_server_test_nonexistent_server",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_server_test_nonexistent_server",
          "state": "passed"
        },
        {
          "name": "test_mcp_endpoints_concurrent_requests",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_endpoints_concurrent_requests",
          "state": "passed"
        },
        {
          "name": "test_mcp_endpoints_response_consistency",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_endpoints_response_consistency",
          "state": "passed"
        },
        {
          "name": "test_mcp_server_name_encoding",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_server_name_encoding",
          "state": "passed"
        },
        {
          "name": "test_mcp_endpoints_large_server_list",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_endpoints_large_server_list",
          "state": "passed"
        },
        {
          "name": "test_mcp_catalog_import_error",
          "fullName": "tests/api_integration/test_mcp_router.py::TestMCPRouterEdgeCases::test_mcp_catalog_import_error",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_performance.py",
      "tests": [
        {
          "name": "test_health_endpoint_response_time",
          "fullName": "tests/api_integration/test_performance.py::TestResponseTimePerformance::test_health_endpoint_response_time",
          "state": "passed"
        },
        {
          "name": "test_component_listing_response_time",
          "fullName": "tests/api_integration/test_performance.py::TestResponseTimePerformance::test_component_listing_response_time",
          "state": "passed"
        },
        {
          "name": "test_mcp_status_response_time",
          "fullName": "tests/api_integration/test_performance.py::TestResponseTimePerformance::test_mcp_status_response_time",
          "state": "passed"
        },
        {
          "name": "test_concurrent_health_checks_performance",
          "fullName": "tests/api_integration/test_performance.py::TestConcurrencyPerformance::test_concurrent_health_checks_performance",
          "state": "passed"
        },
        {
          "name": "test_mixed_endpoint_concurrency_performance",
          "fullName": "tests/api_integration/test_performance.py::TestConcurrencyPerformance::test_mixed_endpoint_concurrency_performance",
          "state": "passed"
        },
        {
          "name": "test_concurrent_request_isolation",
          "fullName": "tests/api_integration/test_performance.py::TestConcurrencyPerformance::test_concurrent_request_isolation",
          "state": "passed"
        },
        {
          "name": "test_memory_usage_under_load",
          "fullName": "tests/api_integration/test_performance.py::TestMemoryPerformance::test_memory_usage_under_load",
          "state": "passed"
        },
        {
          "name": "test_no_memory_leaks_in_repeated_requests",
          "fullName": "tests/api_integration/test_performance.py::TestMemoryPerformance::test_no_memory_leaks_in_repeated_requests",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_throughput",
          "fullName": "tests/api_integration/test_performance.py::TestThroughputPerformance::test_health_endpoint_throughput",
          "state": "passed"
        },
        {
          "name": "test_sustainable_load_performance",
          "fullName": "tests/api_integration/test_performance.py::TestThroughputPerformance::test_sustainable_load_performance",
          "state": "passed"
        },
        {
          "name": "test_response_time_scalability",
          "fullName": "tests/api_integration/test_performance.py::TestScalabilityPerformance::test_response_time_scalability",
          "state": "passed"
        },
        {
          "name": "test_error_rate_under_load",
          "fullName": "tests/api_integration/test_performance.py::TestScalabilityPerformance::test_error_rate_under_load",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_serve_comprehensive.py",
      "tests": [
        {
          "name": "test_async_create_automagik_api_basic",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_async_create_automagik_api_basic",
          "state": "passed"
        },
        {
          "name": "test_async_create_automagik_api_development_mode",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_async_create_automagik_api_development_mode",
          "state": "passed"
        },
        {
          "name": "test_async_create_automagik_api_no_teams_loaded",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_async_create_automagik_api_no_teams_loaded",
          "state": "passed"
        },
        {
          "name": "test_async_create_automagik_api_no_agents_raises_error",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_async_create_automagik_api_no_agents_raises_error",
          "state": "passed"
        },
        {
          "name": "test_async_create_automagik_api_fallback_dummy_agent",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_async_create_automagik_api_fallback_dummy_agent",
          "state": "failed",
          "errors": [
            {
              "message": "self = <MagicMock name='Agent' id='136013455774576'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'Agent' to have been called once. Called 0 times.\n\n/usr/lib/python3.12/unittest/mock.py:923: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.api_integration.test_serve_comprehensive.TestFastAPIAppCreation object at 0x7bb47ab941d0>\n\n    @pytest.mark.asyncio\n    async def test_async_create_automagik_api_fallback_dummy_agent(self):\n        \"\"\"Test app creation with fallback dummy agent when all agents fail to wrap.\"\"\"\n        with (\n            patch(\"api.serve.orchestrated_startup\", new_callable=AsyncMock) as mock_startup,\n            patch(\"api.serve.get_startup_display_with_results\") as mock_display,\n            patch(\"api.serve.create_team\", new_callable=AsyncMock) as mock_create_team,\n            patch(\"ai.agents.registry.AgentRegistry\") as mock_agent_registry,\n            patch(\"ai.workflows.registry.get_workflow\") as mock_get_workflow,\n            patch(\"api.serve.Playground\") as mock_playground,\n            patch(\"agno.agent.Agent\") as mock_agent_class,\n            patch(\"lib.config.models.resolve_model\") as mock_resolve_model,\n            patch(\"lib.logging.set_runtime_mode\") as mock_runtime_mode,\n        ):\n            # Setup startup results\n            mock_startup_results = MagicMock()\n            mock_startup_results.registries.agents = {\"test-agent\": MagicMock()}\n            mock_startup_results.registries.teams = {}  # No teams to fail at team creation\n            mock_startup_results.registries.workflows = {\"test-workflow\": MagicMock()}\n            mock_startup_results.services.auth_service = MagicMock()\n            mock_startup_results.services.auth_service.is_auth_enabled.return_value = False\n            mock_startup_results.services.metrics_service = MagicMock()\n    \n            mock_startup.return_value = mock_startup_results\n    \n            mock_startup_display = MagicMock()\n            mock_startup_display.teams = []\n            mock_startup_display.agents = []\n            mock_startup_display.workflows = []\n            mock_display.return_value = mock_startup_display\n    \n            # Team creation fails\n            mock_create_team.side_effect = Exception(\"Team creation failed\")\n    \n            # Agent registry fails\n            mock_agent_registry.get_agent.side_effect = Exception(\"Agent wrapping failed\")\n    \n            # Workflow creation fails\n            mock_get_workflow.side_effect = Exception(\"Workflow creation failed\")\n    \n            # Mock dummy agent creation\n            mock_dummy_agent = MagicMock()\n            mock_agent_class.return_value = mock_dummy_agent\n            mock_resolve_model.return_value = MagicMock()\n    \n            mock_playground_instance = MagicMock()\n            mock_playground_router = MagicMock()\n            mock_playground_instance.get_async_router.return_value = mock_playground_router\n            mock_playground.return_value = mock_playground_instance\n    \n            # Call the function\n            app = await api.serve._async_create_automagik_api()\n    \n            # Should create app with dummy agent\n            assert isinstance(app, FastAPI)\n>           mock_agent_class.assert_called_once()\nE           AssertionError: Expected 'Agent' to have been called once. Called 0 times.\n\ntests/api_integration/test_serve_comprehensive.py:275: AssertionError"
            }
          ]
        },
        {
          "name": "test_create_simple_sync_api",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_create_simple_sync_api",
          "state": "passed"
        },
        {
          "name": "test_create_simple_sync_api_display_error",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_create_simple_sync_api_display_error",
          "state": "passed"
        },
        {
          "name": "test_create_automagik_api_no_event_loop",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_create_automagik_api_no_event_loop",
          "state": "passed"
        },
        {
          "name": "test_get_app_lazy_loading",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_get_app_lazy_loading",
          "state": "passed"
        },
        {
          "name": "test_app_factory_function",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_app_factory_function",
          "state": "passed"
        },
        {
          "name": "test_create_lifespan_basic",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestLifespanManagement::test_create_lifespan_basic",
          "state": "passed"
        },
        {
          "name": "test_create_lifespan_mcp_error",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestLifespanManagement::test_create_lifespan_mcp_error",
          "state": "passed"
        },
        {
          "name": "test_create_lifespan_production_notifications",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestLifespanManagement::test_create_lifespan_production_notifications",
          "state": "passed"
        },
        {
          "name": "test_create_lifespan_notification_errors",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestLifespanManagement::test_create_lifespan_notification_errors",
          "state": "passed"
        },
        {
          "name": "test_create_lifespan_task_creation_error",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestLifespanManagement::test_create_lifespan_task_creation_error",
          "state": "passed"
        },
        {
          "name": "test_startup_orchestration_integration",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestStartupOrchestration::test_startup_orchestration_integration",
          "state": "passed"
        },
        {
          "name": "test_reloader_context_detection",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestStartupOrchestration::test_reloader_context_detection",
          "state": "passed"
        },
        {
          "name": "test_database_migration_handling",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestStartupOrchestration::test_database_migration_handling",
          "state": "passed"
        },
        {
          "name": "test_database_migration_error_handling",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestStartupOrchestration::test_database_migration_error_handling",
          "state": "passed"
        },
        {
          "name": "test_cors_middleware_configuration",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestMiddlewareConfiguration::test_cors_middleware_configuration",
          "state": "passed"
        },
        {
          "name": "test_docs_configuration_production",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestMiddlewareConfiguration::test_docs_configuration_production",
          "state": "passed"
        },
        {
          "name": "test_startup_display_error_fallback",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestErrorHandlingAndFallbacks::test_startup_display_error_fallback",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.api_integration.test_serve_comprehensive.TestErrorHandlingAndFallbacks object at 0x7bb47abe0770>\n\n    @pytest.mark.asyncio\n    async def test_startup_display_error_fallback(self):\n        \"\"\"Test fallback when startup display fails.\"\"\"\n>       with (\n            patch(\"api.serve.orchestrated_startup\", new_callable=AsyncMock) as mock_startup,\n            patch(\"api.serve.get_startup_display_with_results\") as mock_display,\n            patch(\"api.serve.create_team\", new_callable=AsyncMock) as mock_create_team,\n            patch(\"ai.agents.registry.AgentRegistry\") as mock_agent_registry,\n            patch(\"ai.workflows.registry.get_workflow\") as mock_get_workflow,\n            patch(\"api.serve.Playground\") as mock_playground,\n            patch(\"api.serve.display_simple_status\") as mock_simple_display,\n            patch(\"lib.logging.set_runtime_mode\") as mock_runtime_mode,\n        ):\n\ntests/api_integration/test_serve_comprehensive.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb41aae62a0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'api.serve' from '/home/namastex/workspace/automagik-hive/api/serve.py'> does not have the attribute 'display_simple_status'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_startup_display_complete_failure",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestErrorHandlingAndFallbacks::test_startup_display_complete_failure",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.api_integration.test_serve_comprehensive.TestErrorHandlingAndFallbacks object at 0x7bb47abe0a40>\n\n    @pytest.mark.asyncio\n    async def test_startup_display_complete_failure(self):\n        \"\"\"Test when both main and fallback display fail.\"\"\"\n>       with (\n            patch(\"api.serve.orchestrated_startup\", new_callable=AsyncMock) as mock_startup,\n            patch(\"api.serve.get_startup_display_with_results\") as mock_display,\n            patch(\"api.serve.create_team\", new_callable=AsyncMock) as mock_create_team,\n            patch(\"ai.agents.registry.AgentRegistry\") as mock_agent_registry,\n            patch(\"ai.workflows.registry.get_workflow\") as mock_get_workflow,\n            patch(\"api.serve.Playground\") as mock_playground,\n            patch(\"api.serve.display_simple_status\") as mock_simple_display,\n            patch(\"lib.logging.set_runtime_mode\") as mock_runtime_mode,\n        ):\n\ntests/api_integration/test_serve_comprehensive.py:955: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb4182459a0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'api.serve' from '/home/namastex/workspace/automagik-hive/api/serve.py'> does not have the attribute 'display_simple_status'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_business_endpoints_registration_error",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestErrorHandlingAndFallbacks::test_business_endpoints_registration_error",
          "state": "passed"
        },
        {
          "name": "test_workflow_registry_check_error",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestErrorHandlingAndFallbacks::test_workflow_registry_check_error",
          "state": "passed"
        },
        {
          "name": "test_development_urls_display",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestProductionFeatures::test_development_urls_display",
          "state": "failed",
          "errors": [
            {
              "message": "self = <MagicMock name='Table' id='136015098224640'>\n\n    def assert_called(self):\n        \"\"\"assert that the mock was called at least once\n        \"\"\"\n        if self.call_count == 0:\n            msg = (\"Expected '%s' to have been called.\" %\n                   (self._mock_name or 'mock'))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'Table' to have been called.\n\n/usr/lib/python3.12/unittest/mock.py:913: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.api_integration.test_serve_comprehensive.TestProductionFeatures object at 0x7bb47abe1310>\n\n    @pytest.mark.asyncio\n    async def test_development_urls_display(self):\n        \"\"\"Test development URLs display.\"\"\"\n        with (\n            patch.dict(os.environ, {\"HIVE_ENVIRONMENT\": \"development\"}),\n            patch(\"api.serve.orchestrated_startup\", new_callable=AsyncMock) as mock_startup,\n            patch(\"api.serve.get_startup_display_with_results\") as mock_display,\n            patch(\"api.serve.create_team\", new_callable=AsyncMock) as mock_create_team,\n            patch(\"ai.agents.registry.AgentRegistry\") as mock_agent_registry,\n            patch(\"ai.workflows.registry.get_workflow\") as mock_get_workflow,\n            patch(\"api.serve.Playground\") as mock_playground,\n            patch(\"rich.console.Console\") as mock_console,\n            patch(\"rich.table.Table\") as mock_table,\n            patch(\"lib.config.server_config.get_server_config\") as mock_server_config,\n            patch(\"lib.logging.set_runtime_mode\") as mock_runtime_mode,\n        ):\n            # Setup startup results\n            mock_startup_results = MagicMock()\n            mock_startup_results.registries.agents = {\"test-agent\": MagicMock()}\n            mock_startup_results.registries.teams = {\"test-team\": MagicMock()}\n            mock_startup_results.registries.workflows = {\"test-workflow\": MagicMock()}\n            mock_startup_results.services.auth_service = MagicMock()\n            mock_startup_results.services.auth_service.is_auth_enabled.return_value = False\n            mock_startup_results.services.metrics_service = MagicMock()\n    \n            mock_startup.return_value = mock_startup_results\n    \n            mock_startup_display = MagicMock()\n            mock_startup_display.teams = []\n            mock_startup_display.agents = []\n            mock_startup_display.workflows = []\n            mock_display.return_value = mock_startup_display\n    \n            mock_create_team.return_value = MagicMock()\n            mock_agent_registry.get_agent = AsyncMock(return_value=MagicMock())\n            mock_get_workflow.return_value = MagicMock()\n    \n            mock_playground_instance = MagicMock()\n            mock_playground_router = MagicMock()\n            mock_playground_instance.get_async_router.return_value = mock_playground_router\n            mock_playground.return_value = mock_playground_instance\n    \n            # Setup server config\n            mock_config = MagicMock()\n            mock_config.get_base_url.return_value = \"http://localhost:8886\"\n            mock_server_config.return_value = mock_config\n    \n            # Setup console and table mocks\n            mock_console_instance = MagicMock()\n            mock_console.return_value = mock_console_instance\n            mock_table_instance = MagicMock()\n            mock_table.return_value = mock_table_instance\n    \n            # Call the function\n            app = await api.serve._async_create_automagik_api()\n    \n            # Verify development URLs table was created and displayed\n>           mock_table.assert_called()\nE           AssertionError: Expected 'Table' to have been called.\n\ntests/api_integration/test_serve_comprehensive.py:1160: AssertionError"
            }
          ]
        },
        {
          "name": "test_main_execution_development",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestProductionFeatures::test_main_execution_development",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.api_integration.test_serve_comprehensive.TestProductionFeatures object at 0x7bb47abe15e0>\n\n    def test_main_execution_development(self):\n        \"\"\"Test main execution in development mode.\"\"\"\n        with (\n            patch(\"uvicorn.run\") as mock_uvicorn_run,\n            patch(\"lib.config.server_config.get_server_config\") as mock_get_config,\n            patch.dict(os.environ, {\"HIVE_ENVIRONMENT\": \"development\"}),\n        ):\n            # Setup server config\n            mock_config = MagicMock()\n            mock_config.host = \"localhost\"\n            mock_config.port = 8886\n            mock_get_config.return_value = mock_config\n    \n            # Mock main execution\n            if __name__ == \"__main__\":\n                # This tests the main execution block\n                pass\n    \n            # The main block is executed when the module is run directly\n            # We can test the configuration logic here\n            environment = os.getenv(\"HIVE_ENVIRONMENT\", \"production\")\n            reload = (\n                environment == \"development\"\n                and os.getenv(\"DISABLE_RELOAD\", \"false\").lower() != \"true\"\n            )\n    \n            assert environment == \"development\"\n>           assert reload is True\nE           assert False is True\n\ntests/api_integration/test_serve_comprehensive.py:1190: AssertionError"
            }
          ]
        },
        {
          "name": "test_main_execution_production",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestProductionFeatures::test_main_execution_production",
          "state": "passed"
        },
        {
          "name": "test_main_execution_disable_reload",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestProductionFeatures::test_main_execution_disable_reload",
          "state": "passed"
        },
        {
          "name": "test_create_automagik_api_thread_execution",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestEventLoopHandling::test_create_automagik_api_thread_execution",
          "state": "passed"
        },
        {
          "name": "test_event_loop_detection_no_loop",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestEventLoopHandling::test_event_loop_detection_no_loop",
          "state": "failed",
          "errors": [
            {
              "message": "self = <MagicMock name='run' id='136013429364864'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'run' to have been called once. Called 0 times.\n\n/usr/lib/python3.12/unittest/mock.py:923: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.api_integration.test_serve_comprehensive.TestEventLoopHandling object at 0x7bb47abe1130>\n\n    def test_event_loop_detection_no_loop(self):\n        \"\"\"Test event loop detection when no loop is running.\"\"\"\n    \n        # This test runs in the main thread without an event loop\n        def test_outside_loop():\n            with (\n                patch(\"asyncio.run\") as mock_asyncio_run,\n                patch(\"api.serve._async_create_automagik_api\") as mock_async_create,\n            ):\n                mock_app = MagicMock(spec=FastAPI)\n                mock_async_create.return_value = mock_app\n                mock_asyncio_run.return_value = mock_app\n    \n                # Call should use asyncio.run() since no event loop is running\n                result = api.serve.create_automagik_api()\n    \n                mock_asyncio_run.assert_called_once()\n                assert result == mock_app\n    \n        # Run outside any event loop\n>       test_outside_loop()\n\ntests/api_integration/test_serve_comprehensive.py:1328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def test_outside_loop():\n        with (\n            patch(\"asyncio.run\") as mock_asyncio_run,\n            patch(\"api.serve._async_create_automagik_api\") as mock_async_create,\n        ):\n            mock_app = MagicMock(spec=FastAPI)\n            mock_async_create.return_value = mock_app\n            mock_asyncio_run.return_value = mock_app\n    \n            # Call should use asyncio.run() since no event loop is running\n            result = api.serve.create_automagik_api()\n    \n>           mock_asyncio_run.assert_called_once()\nE           AssertionError: Expected 'run' to have been called once. Called 0 times.\n\ntests/api_integration/test_serve_comprehensive.py:1324: AssertionError"
            }
          ]
        },
        {
          "name": "test_thread_pool_executor_error_handling",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestEventLoopHandling::test_thread_pool_executor_error_handling",
          "state": "passed"
        },
        {
          "name": "test_new_event_loop_creation_and_cleanup",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestEventLoopHandling::test_new_event_loop_creation_and_cleanup",
          "state": "passed"
        },
        {
          "name": "test_playground_router_integration",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestIntegrationValidation::test_playground_router_integration",
          "state": "passed"
        },
        {
          "name": "test_agent_metrics_integration",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestIntegrationValidation::test_agent_metrics_integration",
          "state": "passed"
        },
        {
          "name": "test_team_creation_with_metrics",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestIntegrationValidation::test_team_creation_with_metrics",
          "state": "passed"
        },
        {
          "name": "test_workflow_creation_integration",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestIntegrationValidation::test_workflow_creation_integration",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.api_integration.test_serve_comprehensive.TestIntegrationValidation object at 0x7bb47abe1f10>\n\n    @pytest.mark.asyncio\n    async def test_workflow_creation_integration(self):\n        \"\"\"Test workflow creation and integration.\"\"\"\n        with (\n            patch(\"api.serve.orchestrated_startup\", new_callable=AsyncMock) as mock_startup,\n            patch(\"api.serve.get_startup_display_with_results\") as mock_display,\n            patch(\"api.serve.create_team\", new_callable=AsyncMock) as mock_create_team,\n            patch(\"ai.agents.registry.AgentRegistry\") as mock_agent_registry,\n            patch(\"ai.workflows.registry.get_workflow\") as mock_get_workflow,\n            patch(\"api.serve.Playground\") as mock_playground,\n            patch.dict(os.environ, {\"HIVE_ENVIRONMENT\": \"development\"}),\n            patch(\"lib.logging.set_runtime_mode\") as mock_runtime_mode,\n        ):\n            # Setup startup results\n            mock_startup_results = MagicMock()\n            mock_startup_results.registries.agents = {\"test-agent\": MagicMock()}\n            mock_startup_results.registries.teams = {\"test-team\": MagicMock()}\n            mock_startup_results.registries.workflows = {\n                \"workflow1\": MagicMock(),\n                \"workflow2\": MagicMock(),\n                \"workflow3\": MagicMock(),\n            }\n            mock_startup_results.services.auth_service = MagicMock()\n            mock_startup_results.services.auth_service.is_auth_enabled.return_value = False\n            mock_startup_results.services.metrics_service = MagicMock()\n    \n            mock_startup.return_value = mock_startup_results\n    \n            mock_startup_display = MagicMock()\n            mock_startup_display.teams = []\n            mock_startup_display.agents = []\n            mock_startup_display.workflows = []\n            mock_display.return_value = mock_startup_display\n    \n            mock_create_team.return_value = MagicMock()\n            mock_agent_registry.get_agent = AsyncMock(return_value=MagicMock())\n    \n            # Setup workflow creation\n            mock_workflow = MagicMock()\n            mock_get_workflow.return_value = mock_workflow\n    \n            mock_playground_instance = MagicMock()\n            mock_playground_router = MagicMock()\n            mock_playground_instance.get_async_router.return_value = mock_playground_router\n            mock_playground.return_value = mock_playground_instance\n    \n            # Call the function\n            app = await api.serve._async_create_automagik_api()\n    \n            # Verify get_workflow was called for each workflow with debug mode\n>           assert mock_get_workflow.call_count == 3  # Three workflows\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError: assert 0 == 3\nE            +  where 0 = <MagicMock name='get_workflow' id='136013429330800'>.call_count\n\ntests/api_integration/test_serve_comprehensive.py:1606: AssertionError"
            }
          ]
        },
        {
          "name": "test_simple_sync_api_endpoints",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIIntegration::test_simple_sync_api_endpoints",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_serve_direct.py",
      "tests": [
        {
          "name": "test_module_imports",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeModuleImports::test_module_imports",
          "state": "passed"
        },
        {
          "name": "test_path_management",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeModuleImports::test_path_management",
          "state": "passed"
        },
        {
          "name": "test_logging_setup",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeModuleImports::test_logging_setup",
          "state": "passed"
        },
        {
          "name": "test_environment_loading",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeModuleImports::test_environment_loading",
          "state": "passed"
        },
        {
          "name": "test_log_level_configuration",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfiguration::test_log_level_configuration",
          "state": "passed"
        },
        {
          "name": "test_default_log_levels",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfiguration::test_default_log_levels",
          "state": "passed"
        },
        {
          "name": "test_startup_display_import",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfiguration::test_startup_display_import",
          "state": "passed"
        },
        {
          "name": "test_server_config_import",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfiguration::test_server_config_import",
          "state": "passed"
        },
        {
          "name": "test_auth_dependencies_import",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfiguration::test_auth_dependencies_import",
          "state": "passed"
        },
        {
          "name": "test_exceptions_import",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfiguration::test_exceptions_import",
          "state": "passed"
        },
        {
          "name": "test_playground_import",
          "fullName": "tests/api_integration/test_serve_direct.py::TestAgnoPlaygroundIntegration::test_playground_import",
          "state": "passed"
        },
        {
          "name": "test_fastapi_components_import",
          "fullName": "tests/api_integration/test_serve_direct.py::TestAgnoPlaygroundIntegration::test_fastapi_components_import",
          "state": "passed"
        },
        {
          "name": "test_asynccontextmanager_import",
          "fullName": "tests/api_integration/test_serve_direct.py::TestAgnoPlaygroundIntegration::test_asynccontextmanager_import",
          "state": "passed"
        },
        {
          "name": "test_server_initialization_pattern",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeModuleFunctionality::test_server_initialization_pattern",
          "state": "passed"
        },
        {
          "name": "test_startup_display_integration",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeModuleFunctionality::test_startup_display_integration",
          "state": "passed"
        },
        {
          "name": "test_asyncio_integration",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeModuleFunctionality::test_asyncio_integration",
          "state": "passed"
        },
        {
          "name": "test_pathlib_integration",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeModuleFunctionality::test_pathlib_integration",
          "state": "passed"
        },
        {
          "name": "test_dotenv_import_error_handling",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeErrorHandling::test_dotenv_import_error_handling",
          "state": "passed"
        },
        {
          "name": "test_logging_setup_error_handling",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeErrorHandling::test_logging_setup_error_handling",
          "state": "passed"
        },
        {
          "name": "test_missing_environment_variables",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeErrorHandling::test_missing_environment_variables",
          "state": "passed"
        },
        {
          "name": "test_asynccontextmanager_usage",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeAsyncPatterns::test_asynccontextmanager_usage",
          "state": "passed"
        },
        {
          "name": "test_async_operations",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeAsyncPatterns::test_async_operations",
          "state": "passed"
        },
        {
          "name": "test_lib_utils_integration",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeIntegrationPoints::test_lib_utils_integration",
          "state": "passed"
        },
        {
          "name": "test_agno_framework_integration",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeIntegrationPoints::test_agno_framework_integration",
          "state": "passed"
        },
        {
          "name": "test_starlette_integration",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeIntegrationPoints::test_starlette_integration",
          "state": "passed"
        },
        {
          "name": "test_cors_configuration_pattern",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfigurationPatterns::test_cors_configuration_pattern",
          "state": "passed"
        },
        {
          "name": "test_server_host_port_pattern",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfigurationPatterns::test_server_host_port_pattern",
          "state": "passed"
        },
        {
          "name": "test_development_vs_production_patterns",
          "fullName": "tests/api_integration/test_serve_direct.py::TestServeConfigurationPatterns::test_development_vs_production_patterns",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_serve_focused.py",
      "tests": [
        {
          "name": "test_create_simple_sync_api_real_execution",
          "fullName": "tests/api_integration/test_serve_focused.py::TestServeModuleFunctions::test_create_simple_sync_api_real_execution",
          "state": "passed"
        },
        {
          "name": "test_create_lifespan_function",
          "fullName": "tests/api_integration/test_serve_focused.py::TestServeModuleFunctions::test_create_lifespan_function",
          "state": "passed"
        },
        {
          "name": "test_lifespan_execution_with_minimal_mocking",
          "fullName": "tests/api_integration/test_serve_focused.py::TestServeModuleFunctions::test_lifespan_execution_with_minimal_mocking",
          "state": "passed"
        },
        {
          "name": "test_get_app_lazy_loading_pattern",
          "fullName": "tests/api_integration/test_serve_focused.py::TestServeModuleFunctions::test_get_app_lazy_loading_pattern",
          "state": "passed"
        },
        {
          "name": "test_app_factory_function",
          "fullName": "tests/api_integration/test_serve_focused.py::TestServeModuleFunctions::test_app_factory_function",
          "state": "passed"
        },
        {
          "name": "test_create_automagik_api_pattern_testing",
          "fullName": "tests/api_integration/test_serve_focused.py::TestServeModuleFunctions::test_create_automagik_api_pattern_testing",
          "state": "passed"
        },
        {
          "name": "test_main_execution_configuration_development",
          "fullName": "tests/api_integration/test_serve_focused.py::TestEnvironmentConfiguration::test_main_execution_configuration_development",
          "state": "passed"
        },
        {
          "name": "test_main_execution_configuration_production",
          "fullName": "tests/api_integration/test_serve_focused.py::TestEnvironmentConfiguration::test_main_execution_configuration_production",
          "state": "passed"
        },
        {
          "name": "test_main_execution_configuration_disable_reload",
          "fullName": "tests/api_integration/test_serve_focused.py::TestEnvironmentConfiguration::test_main_execution_configuration_disable_reload",
          "state": "passed"
        },
        {
          "name": "test_log_level_configuration",
          "fullName": "tests/api_integration/test_serve_focused.py::TestEnvironmentConfiguration::test_log_level_configuration",
          "state": "passed"
        },
        {
          "name": "test_database_migration_handling_success",
          "fullName": "tests/api_integration/test_serve_focused.py::TestErrorHandlingPaths::test_database_migration_handling_success",
          "state": "passed"
        },
        {
          "name": "test_database_migration_error_handling",
          "fullName": "tests/api_integration/test_serve_focused.py::TestErrorHandlingPaths::test_database_migration_error_handling",
          "state": "passed"
        },
        {
          "name": "test_dotenv_import_error_handling",
          "fullName": "tests/api_integration/test_serve_focused.py::TestErrorHandlingPaths::test_dotenv_import_error_handling",
          "state": "passed"
        },
        {
          "name": "test_development_features_detection",
          "fullName": "tests/api_integration/test_serve_focused.py::TestProductionFeatures::test_development_features_detection",
          "state": "passed"
        },
        {
          "name": "test_production_features_detection",
          "fullName": "tests/api_integration/test_serve_focused.py::TestProductionFeatures::test_production_features_detection",
          "state": "passed"
        },
        {
          "name": "test_reloader_context_detection",
          "fullName": "tests/api_integration/test_serve_focused.py::TestProductionFeatures::test_reloader_context_detection",
          "state": "passed"
        },
        {
          "name": "test_thread_pool_executor_usage",
          "fullName": "tests/api_integration/test_serve_focused.py::TestAsyncEventLoopHandling::test_thread_pool_executor_usage",
          "state": "passed"
        },
        {
          "name": "test_asyncio_operations",
          "fullName": "tests/api_integration/test_serve_focused.py::TestAsyncEventLoopHandling::test_asyncio_operations",
          "state": "passed"
        },
        {
          "name": "test_critical_imports",
          "fullName": "tests/api_integration/test_serve_focused.py::TestModuleImports::test_critical_imports",
          "state": "passed"
        },
        {
          "name": "test_optional_imports",
          "fullName": "tests/api_integration/test_serve_focused.py::TestModuleImports::test_optional_imports",
          "state": "passed"
        },
        {
          "name": "test_dynamic_imports",
          "fullName": "tests/api_integration/test_serve_focused.py::TestModuleImports::test_dynamic_imports",
          "state": "passed"
        },
        {
          "name": "test_cors_configuration_structure",
          "fullName": "tests/api_integration/test_serve_focused.py::TestConfigurationPatterns::test_cors_configuration_structure",
          "state": "passed"
        },
        {
          "name": "test_server_configuration_patterns",
          "fullName": "tests/api_integration/test_serve_focused.py::TestConfigurationPatterns::test_server_configuration_patterns",
          "state": "passed"
        },
        {
          "name": "test_app_configuration_patterns",
          "fullName": "tests/api_integration/test_serve_focused.py::TestConfigurationPatterns::test_app_configuration_patterns",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_serve_isolated.py",
      "tests": [
        {
          "name": "test_lifespan_context_manager_creation",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestLifespanPatterns::test_lifespan_context_manager_creation",
          "state": "passed"
        },
        {
          "name": "test_lifespan_with_fastapi_app",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestLifespanPatterns::test_lifespan_with_fastapi_app",
          "state": "passed"
        },
        {
          "name": "test_basic_app_creation",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestFastAPIAppCreation::test_basic_app_creation",
          "state": "passed"
        },
        {
          "name": "test_app_with_routes",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestFastAPIAppCreation::test_app_with_routes",
          "state": "passed"
        },
        {
          "name": "test_app_with_cors_middleware",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestFastAPIAppCreation::test_app_with_cors_middleware",
          "state": "passed"
        },
        {
          "name": "test_development_environment_detection",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestEnvironmentConfiguration::test_development_environment_detection",
          "state": "passed"
        },
        {
          "name": "test_production_environment_detection",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestEnvironmentConfiguration::test_production_environment_detection",
          "state": "passed"
        },
        {
          "name": "test_environment_default_fallback",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestEnvironmentConfiguration::test_environment_default_fallback",
          "state": "passed"
        },
        {
          "name": "test_event_loop_detection_no_loop",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestAsyncEventLoopHandling::test_event_loop_detection_no_loop",
          "state": "passed"
        },
        {
          "name": "test_asyncio_run_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestAsyncEventLoopHandling::test_asyncio_run_pattern",
          "state": "passed"
        },
        {
          "name": "test_concurrent_futures_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestAsyncEventLoopHandling::test_concurrent_futures_pattern",
          "state": "passed"
        },
        {
          "name": "test_project_root_path_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestPathManagement::test_project_root_path_pattern",
          "state": "passed"
        },
        {
          "name": "test_sys_path_modification_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestPathManagement::test_sys_path_modification_pattern",
          "state": "passed"
        },
        {
          "name": "test_logging_setup_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestLoggingPatterns::test_logging_setup_pattern",
          "state": "passed"
        },
        {
          "name": "test_log_level_configuration_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestLoggingPatterns::test_log_level_configuration_pattern",
          "state": "passed"
        },
        {
          "name": "test_migration_success_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestMigrationHandlingPatterns::test_migration_success_pattern",
          "state": "passed"
        },
        {
          "name": "test_migration_error_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestMigrationHandlingPatterns::test_migration_error_pattern",
          "state": "passed"
        },
        {
          "name": "test_registry_import_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestComponentRegistryPatterns::test_registry_import_pattern",
          "state": "passed"
        },
        {
          "name": "test_component_loading_pattern",
          "fullName": "tests/api_integration/test_serve_isolated.py::TestComponentRegistryPatterns::test_component_loading_pattern",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_settings.py",
      "tests": [
        {
          "name": "test_default_settings_development",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_default_settings_development",
          "state": "passed"
        },
        {
          "name": "test_default_settings_production",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_default_settings_production",
          "state": "passed"
        },
        {
          "name": "test_development_cors_origins",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_development_cors_origins",
          "state": "passed"
        },
        {
          "name": "test_production_cors_origins_multiple",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_production_cors_origins_multiple",
          "state": "passed"
        },
        {
          "name": "test_production_cors_origins_whitespace",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_production_cors_origins_whitespace",
          "state": "passed"
        },
        {
          "name": "test_production_missing_cors_origins_error",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_production_missing_cors_origins_error",
          "state": "passed"
        },
        {
          "name": "test_production_empty_cors_origins_error",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_production_empty_cors_origins_error",
          "state": "passed"
        },
        {
          "name": "test_environment_validation_valid",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_environment_validation_valid",
          "state": "passed"
        },
        {
          "name": "test_environment_validation_invalid",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_environment_validation_invalid",
          "state": "passed"
        },
        {
          "name": "test_environment_default_fallback",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_environment_default_fallback",
          "state": "passed"
        },
        {
          "name": "test_model_fields_accessible",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_model_fields_accessible",
          "state": "passed"
        },
        {
          "name": "test_pydantic_settings_inheritance",
          "fullName": "tests/api_integration/test_settings.py::TestApiSettings::test_pydantic_settings_inheritance",
          "state": "passed"
        },
        {
          "name": "test_api_settings_instance_accessible",
          "fullName": "tests/api_integration/test_settings.py::TestGlobalApiSettings::test_api_settings_instance_accessible",
          "state": "passed"
        },
        {
          "name": "test_api_settings_type",
          "fullName": "tests/api_integration/test_settings.py::TestGlobalApiSettings::test_api_settings_type",
          "state": "passed"
        },
        {
          "name": "test_api_settings_consistency",
          "fullName": "tests/api_integration/test_settings.py::TestGlobalApiSettings::test_api_settings_consistency",
          "state": "passed"
        },
        {
          "name": "test_cors_origin_parsing_multiple",
          "fullName": "tests/api_integration/test_settings.py::TestCORSOriginValidation::test_cors_origin_parsing_multiple",
          "state": "passed"
        },
        {
          "name": "test_cors_origin_filtering_empty_values",
          "fullName": "tests/api_integration/test_settings.py::TestCORSOriginValidation::test_cors_origin_filtering_empty_values",
          "state": "passed"
        },
        {
          "name": "test_cors_origin_empty_string_error",
          "fullName": "tests/api_integration/test_settings.py::TestCORSOriginValidation::test_cors_origin_empty_string_error",
          "state": "passed"
        },
        {
          "name": "test_validate_environment_valid_values",
          "fullName": "tests/api_integration/test_settings.py::TestFieldValidators::test_validate_environment_valid_values",
          "state": "passed"
        },
        {
          "name": "test_validate_environment_invalid_values",
          "fullName": "tests/api_integration/test_settings.py::TestFieldValidators::test_validate_environment_invalid_values",
          "state": "passed"
        },
        {
          "name": "test_set_cors_origin_list_development",
          "fullName": "tests/api_integration/test_settings.py::TestFieldValidators::test_set_cors_origin_list_development",
          "state": "passed"
        },
        {
          "name": "test_set_cors_origin_list_production",
          "fullName": "tests/api_integration/test_settings.py::TestFieldValidators::test_set_cors_origin_list_production",
          "state": "passed"
        },
        {
          "name": "test_environment_variable_precedence",
          "fullName": "tests/api_integration/test_settings.py::TestEnvironmentIntegration::test_environment_variable_precedence",
          "state": "passed"
        },
        {
          "name": "test_settings_isolation",
          "fullName": "tests/api_integration/test_settings.py::TestEnvironmentIntegration::test_settings_isolation",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/api_integration/test_version_router.py",
      "tests": [
        {
          "name": "test_execute_versioned_component_success",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionExecution::test_execute_versioned_component_success",
          "state": "passed"
        },
        {
          "name": "test_execute_versioned_component_validation_error",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionExecution::test_execute_versioned_component_validation_error",
          "state": "passed"
        },
        {
          "name": "test_execute_versioned_component_not_found",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionExecution::test_execute_versioned_component_not_found",
          "state": "passed"
        },
        {
          "name": "test_execute_versioned_component_missing_fields",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionExecution::test_execute_versioned_component_missing_fields",
          "state": "passed"
        },
        {
          "name": "test_execute_versioned_component_optional_fields",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionExecution::test_execute_versioned_component_optional_fields",
          "state": "passed"
        },
        {
          "name": "test_create_component_version_success",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_create_component_version_success",
          "state": "passed"
        },
        {
          "name": "test_create_component_version_invalid_data",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_create_component_version_invalid_data",
          "state": "passed"
        },
        {
          "name": "test_list_component_versions",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_list_component_versions",
          "state": "passed"
        },
        {
          "name": "test_get_component_version_success",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_get_component_version_success",
          "state": "passed"
        },
        {
          "name": "test_get_component_version_not_found",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_get_component_version_not_found",
          "state": "passed"
        },
        {
          "name": "test_update_component_version_success",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_update_component_version_success",
          "state": "passed"
        },
        {
          "name": "test_update_component_version_not_found",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_update_component_version_not_found",
          "state": "passed"
        },
        {
          "name": "test_activate_component_version_success",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_activate_component_version_success",
          "state": "passed"
        },
        {
          "name": "test_activate_component_version_with_reason",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_activate_component_version_with_reason",
          "state": "passed"
        },
        {
          "name": "test_delete_component_version_success",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_delete_component_version_success",
          "state": "passed"
        },
        {
          "name": "test_delete_component_version_not_found",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionManagement::test_delete_component_version_not_found",
          "state": "passed"
        },
        {
          "name": "test_get_component_history_default_limit",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionHistory::test_get_component_history_default_limit",
          "state": "passed"
        },
        {
          "name": "test_get_component_history_custom_limit",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionHistory::test_get_component_history_custom_limit",
          "state": "passed"
        },
        {
          "name": "test_get_component_history_invalid_limit",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionHistory::test_get_component_history_invalid_limit",
          "state": "passed"
        },
        {
          "name": "test_list_all_components",
          "fullName": "tests/api_integration/test_version_router.py::TestComponentListing::test_list_all_components",
          "state": "passed"
        },
        {
          "name": "test_list_components_by_type",
          "fullName": "tests/api_integration/test_version_router.py::TestComponentListing::test_list_components_by_type",
          "state": "passed"
        },
        {
          "name": "test_list_components_by_invalid_type",
          "fullName": "tests/api_integration/test_version_router.py::TestComponentListing::test_list_components_by_invalid_type",
          "state": "passed"
        },
        {
          "name": "test_version_endpoints_async",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionRouterEdgeCases::test_version_endpoints_async",
          "state": "passed"
        },
        {
          "name": "test_version_endpoints_without_auth",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionRouterEdgeCases::test_version_endpoints_without_auth",
          "state": "passed"
        },
        {
          "name": "test_version_endpoints_invalid_json",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionRouterEdgeCases::test_version_endpoints_invalid_json",
          "state": "passed"
        },
        {
          "name": "test_version_endpoints_large_payload",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionRouterEdgeCases::test_version_endpoints_large_payload",
          "state": "passed"
        },
        {
          "name": "test_version_endpoints_special_characters",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionRouterEdgeCases::test_version_endpoints_special_characters",
          "state": "passed"
        },
        {
          "name": "test_concurrent_version_operations",
          "fullName": "tests/api_integration/test_version_router.py::TestVersionRouterEdgeCases::test_concurrent_version_operations",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/config/test_config_settings.py",
      "tests": [
        {
          "name": "test_settings_initialization_with_defaults",
          "fullName": "tests/config/test_config_settings.py::TestSettings::test_settings_initialization_with_defaults",
          "state": "passed"
        },
        {
          "name": "test_settings_directory_creation",
          "fullName": "tests/config/test_config_settings.py::TestSettings::test_settings_directory_creation",
          "state": "passed"
        },
        {
          "name": "test_settings_environment_variable_parsing",
          "fullName": "tests/config/test_config_settings.py::TestSettings::test_settings_environment_variable_parsing",
          "state": "passed"
        },
        {
          "name": "test_settings_metrics_configuration_validation",
          "fullName": "tests/config/test_config_settings.py::TestSettings::test_settings_metrics_configuration_validation",
          "state": "passed"
        },
        {
          "name": "test_settings_metrics_configuration_invalid_values",
          "fullName": "tests/config/test_config_settings.py::TestSettings::test_settings_metrics_configuration_invalid_values",
          "state": "passed"
        },
        {
          "name": "test_settings_langwatch_configuration",
          "fullName": "tests/config/test_config_settings.py::TestSettings::test_settings_langwatch_configuration",
          "state": "passed"
        },
        {
          "name": "test_settings_langwatch_config_cleanup",
          "fullName": "tests/config/test_config_settings.py::TestSettings::test_settings_langwatch_config_cleanup",
          "state": "passed"
        },
        {
          "name": "test_is_production_method",
          "fullName": "tests/config/test_config_settings.py::TestSettingsMethods::test_is_production_method",
          "state": "passed"
        },
        {
          "name": "test_get_logging_config",
          "fullName": "tests/config/test_config_settings.py::TestSettingsMethods::test_get_logging_config",
          "state": "passed"
        },
        {
          "name": "test_validate_settings",
          "fullName": "tests/config/test_config_settings.py::TestSettingsMethods::test_validate_settings",
          "state": "passed"
        },
        {
          "name": "test_get_setting_function",
          "fullName": "tests/config/test_config_settings.py::TestSettingsUtilityFunctions::test_get_setting_function",
          "state": "passed"
        },
        {
          "name": "test_get_project_root_function",
          "fullName": "tests/config/test_config_settings.py::TestSettingsUtilityFunctions::test_get_project_root_function",
          "state": "passed"
        },
        {
          "name": "test_validate_environment_function",
          "fullName": "tests/config/test_config_settings.py::TestSettingsUtilityFunctions::test_validate_environment_function",
          "state": "passed"
        },
        {
          "name": "test_project_root_constant",
          "fullName": "tests/config/test_config_settings.py::TestSettingsUtilityFunctions::test_project_root_constant",
          "state": "passed"
        },
        {
          "name": "test_settings_with_missing_logger_import",
          "fullName": "tests/config/test_config_settings.py::TestSettingsEdgeCases::test_settings_with_missing_logger_import",
          "state": "passed"
        },
        {
          "name": "test_settings_supported_languages",
          "fullName": "tests/config/test_config_settings.py::TestSettingsEdgeCases::test_settings_supported_languages",
          "state": "passed"
        },
        {
          "name": "test_settings_security_settings",
          "fullName": "tests/config/test_config_settings.py::TestSettingsEdgeCases::test_settings_security_settings",
          "state": "passed"
        },
        {
          "name": "test_settings_team_routing_settings",
          "fullName": "tests/config/test_config_settings.py::TestSettingsEdgeCases::test_settings_team_routing_settings",
          "state": "passed"
        },
        {
          "name": "test_settings_knowledge_base_settings",
          "fullName": "tests/config/test_config_settings.py::TestSettingsEdgeCases::test_settings_knowledge_base_settings",
          "state": "passed"
        },
        {
          "name": "test_settings_memory_settings",
          "fullName": "tests/config/test_config_settings.py::TestSettingsEdgeCases::test_settings_memory_settings",
          "state": "passed"
        },
        {
          "name": "test_settings_global_instance",
          "fullName": "tests/config/test_config_settings.py::TestSettingsIntegration::test_settings_global_instance",
          "state": "passed"
        },
        {
          "name": "test_settings_environment_interaction",
          "fullName": "tests/config/test_config_settings.py::TestSettingsIntegration::test_settings_environment_interaction",
          "state": "passed"
        },
        {
          "name": "test_settings_path_resolution",
          "fullName": "tests/config/test_config_settings.py::TestSettingsIntegration::test_settings_path_resolution",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/config/test_models_comprehensive.py",
      "tests": [
        {
          "name": "test_model_resolution_error_creation",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolutionError::test_model_resolution_error_creation",
          "state": "passed"
        },
        {
          "name": "test_model_resolution_error_inheritance",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolutionError::test_model_resolution_error_inheritance",
          "state": "passed"
        },
        {
          "name": "test_model_resolution_error_raise_and_catch",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolutionError::test_model_resolution_error_raise_and_catch",
          "state": "passed"
        },
        {
          "name": "test_model_resolver_initialization",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolverInitialization::test_model_resolver_initialization",
          "state": "passed"
        },
        {
          "name": "test_global_model_resolver_exists",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolverInitialization::test_global_model_resolver_exists",
          "state": "passed"
        },
        {
          "name": "test_get_default_model_id_success",
          "fullName": "tests/config/test_models_comprehensive.py::TestDefaultModelIdResolution::test_get_default_model_id_success",
          "state": "passed"
        },
        {
          "name": "test_get_default_model_id_missing_env_var",
          "fullName": "tests/config/test_models_comprehensive.py::TestDefaultModelIdResolution::test_get_default_model_id_missing_env_var",
          "state": "passed"
        },
        {
          "name": "test_get_default_model_id_empty_env_var",
          "fullName": "tests/config/test_models_comprehensive.py::TestDefaultModelIdResolution::test_get_default_model_id_empty_env_var",
          "state": "passed"
        },
        {
          "name": "test_detect_provider_success",
          "fullName": "tests/config/test_models_comprehensive.py::TestProviderDetection::test_detect_provider_success",
          "state": "passed"
        },
        {
          "name": "test_detect_provider_cache_behavior",
          "fullName": "tests/config/test_models_comprehensive.py::TestProviderDetection::test_detect_provider_cache_behavior",
          "state": "passed"
        },
        {
          "name": "test_detect_provider_failure_raises_error",
          "fullName": "tests/config/test_models_comprehensive.py::TestProviderDetection::test_detect_provider_failure_raises_error",
          "state": "passed"
        },
        {
          "name": "test_discover_model_class_success",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelClassDiscovery::test_discover_model_class_success",
          "state": "passed"
        },
        {
          "name": "test_discover_model_class_cache_behavior",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelClassDiscovery::test_discover_model_class_cache_behavior",
          "state": "passed"
        },
        {
          "name": "test_discover_model_class_failure_raises_error",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelClassDiscovery::test_discover_model_class_failure_raises_error",
          "state": "passed"
        },
        {
          "name": "test_resolve_model_with_explicit_model_id",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolution::test_resolve_model_with_explicit_model_id",
          "state": "passed"
        },
        {
          "name": "test_resolve_model_with_default_model_id",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolution::test_resolve_model_with_default_model_id",
          "state": "passed"
        },
        {
          "name": "test_resolve_model_provider_detection_failure",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolution::test_resolve_model_provider_detection_failure",
          "state": "passed"
        },
        {
          "name": "test_resolve_model_class_discovery_failure",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolution::test_resolve_model_class_discovery_failure",
          "state": "passed"
        },
        {
          "name": "test_resolve_model_instance_creation_failure",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelResolution::test_resolve_model_instance_creation_failure",
          "state": "passed"
        },
        {
          "name": "test_validate_model_availability_success",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelValidation::test_validate_model_availability_success",
          "state": "passed"
        },
        {
          "name": "test_validate_model_availability_provider_detection_failure",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelValidation::test_validate_model_availability_provider_detection_failure",
          "state": "passed"
        },
        {
          "name": "test_validate_model_availability_class_discovery_failure",
          "fullName": "tests/config/test_models_comprehensive.py::TestModelValidation::test_validate_model_availability_class_discovery_failure",
          "state": "passed"
        },
        {
          "name": "test_clear_cache_clears_resolver_caches",
          "fullName": "tests/config/test_models_comprehensive.py::TestCacheManagement::test_clear_cache_clears_resolver_caches",
          "state": "passed"
        },
        {
          "name": "test_get_default_model_id_function",
          "fullName": "tests/config/test_models_comprehensive.py::TestConvenienceFunctions::test_get_default_model_id_function",
          "state": "passed"
        },
        {
          "name": "test_get_default_provider_success",
          "fullName": "tests/config/test_models_comprehensive.py::TestConvenienceFunctions::test_get_default_provider_success",
          "state": "passed"
        },
        {
          "name": "test_get_default_provider_missing_env_var",
          "fullName": "tests/config/test_models_comprehensive.py::TestConvenienceFunctions::test_get_default_provider_missing_env_var",
          "state": "passed"
        },
        {
          "name": "test_get_default_provider_empty_env_var",
          "fullName": "tests/config/test_models_comprehensive.py::TestConvenienceFunctions::test_get_default_provider_empty_env_var",
          "state": "passed"
        },
        {
          "name": "test_resolve_model_function",
          "fullName": "tests/config/test_models_comprehensive.py::TestConvenienceFunctions::test_resolve_model_function",
          "state": "passed"
        },
        {
          "name": "test_validate_model_function",
          "fullName": "tests/config/test_models_comprehensive.py::TestConvenienceFunctions::test_validate_model_function",
          "state": "passed"
        },
        {
          "name": "test_validate_required_environment_variables_missing_both",
          "fullName": "tests/config/test_models_comprehensive.py::TestEnvironmentValidation::test_validate_required_environment_variables_missing_both",
          "state": "passed"
        },
        {
          "name": "test_validate_required_environment_variables_missing_model_only",
          "fullName": "tests/config/test_models_comprehensive.py::TestEnvironmentValidation::test_validate_required_environment_variables_missing_model_only",
          "state": "passed"
        },
        {
          "name": "test_validate_required_environment_variables_missing_provider_only",
          "fullName": "tests/config/test_models_comprehensive.py::TestEnvironmentValidation::test_validate_required_environment_variables_missing_provider_only",
          "state": "passed"
        },
        {
          "name": "test_validate_required_environment_variables_both_present",
          "fullName": "tests/config/test_models_comprehensive.py::TestEnvironmentValidation::test_validate_required_environment_variables_both_present",
          "state": "passed"
        },
        {
          "name": "test_portuguese_prompts_constant_structure",
          "fullName": "tests/config/test_models_comprehensive.py::TestPortugueseLanguageConfiguration::test_portuguese_prompts_constant_structure",
          "state": "passed"
        },
        {
          "name": "test_portuguese_prompts_content_validation",
          "fullName": "tests/config/test_models_comprehensive.py::TestPortugueseLanguageConfiguration::test_portuguese_prompts_content_validation",
          "state": "passed"
        },
        {
          "name": "test_get_portuguese_prompt_valid_keys",
          "fullName": "tests/config/test_models_comprehensive.py::TestPortugueseLanguageConfiguration::test_get_portuguese_prompt_valid_keys",
          "state": "passed"
        },
        {
          "name": "test_get_portuguese_prompt_invalid_key",
          "fullName": "tests/config/test_models_comprehensive.py::TestPortugueseLanguageConfiguration::test_get_portuguese_prompt_invalid_key",
          "state": "passed"
        },
        {
          "name": "test_get_portuguese_prompt_none_key",
          "fullName": "tests/config/test_models_comprehensive.py::TestPortugueseLanguageConfiguration::test_get_portuguese_prompt_none_key",
          "state": "passed"
        },
        {
          "name": "test_portuguese_prompts_all_strings",
          "fullName": "tests/config/test_models_comprehensive.py::TestPortugueseLanguageConfiguration::test_portuguese_prompts_all_strings",
          "state": "passed"
        },
        {
          "name": "test_end_to_end_model_resolution_openai",
          "fullName": "tests/config/test_models_comprehensive.py::TestIntegrationScenarios::test_end_to_end_model_resolution_openai",
          "state": "passed"
        },
        {
          "name": "test_end_to_end_model_resolution_anthropic",
          "fullName": "tests/config/test_models_comprehensive.py::TestIntegrationScenarios::test_end_to_end_model_resolution_anthropic",
          "state": "passed"
        },
        {
          "name": "test_model_resolver_with_config_overrides",
          "fullName": "tests/config/test_models_comprehensive.py::TestIntegrationScenarios::test_model_resolver_with_config_overrides",
          "state": "passed"
        },
        {
          "name": "test_model_id_with_special_characters",
          "fullName": "tests/config/test_models_comprehensive.py::TestEdgeCasesAndErrorHandling::test_model_id_with_special_characters",
          "state": "passed"
        },
        {
          "name": "test_empty_model_id_handling",
          "fullName": "tests/config/test_models_comprehensive.py::TestEdgeCasesAndErrorHandling::test_empty_model_id_handling",
          "state": "passed"
        },
        {
          "name": "test_none_model_id_handling",
          "fullName": "tests/config/test_models_comprehensive.py::TestEdgeCasesAndErrorHandling::test_none_model_id_handling",
          "state": "passed"
        },
        {
          "name": "test_config_overrides_with_none_values",
          "fullName": "tests/config/test_models_comprehensive.py::TestEdgeCasesAndErrorHandling::test_config_overrides_with_none_values",
          "state": "passed"
        },
        {
          "name": "test_detect_provider_cache_size_limit",
          "fullName": "tests/config/test_models_comprehensive.py::TestLRUCacheDecoratorBehavior::test_detect_provider_cache_size_limit",
          "state": "passed"
        },
        {
          "name": "test_discover_model_class_cache_size_limit",
          "fullName": "tests/config/test_models_comprehensive.py::TestLRUCacheDecoratorBehavior::test_discover_model_class_cache_size_limit",
          "state": "passed"
        },
        {
          "name": "test_cache_clear_resets_cache_info",
          "fullName": "tests/config/test_models_comprehensive.py::TestLRUCacheDecoratorBehavior::test_cache_clear_resets_cache_info",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/config/test_server_config.py",
      "tests": [
        {
          "name": "test_server_config_initialization_defaults",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_initialization_defaults",
          "state": "passed"
        },
        {
          "name": "test_server_config_environment_variable_parsing",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_environment_variable_parsing",
          "state": "passed"
        },
        {
          "name": "test_server_config_missing_env_vars_uses_defaults",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_missing_env_vars_uses_defaults",
          "state": "passed"
        },
        {
          "name": "test_server_config_validation_invalid_port",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_validation_invalid_port",
          "state": "passed"
        },
        {
          "name": "test_server_config_validation_invalid_workers",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_validation_invalid_workers",
          "state": "passed"
        },
        {
          "name": "test_server_config_validation_invalid_environment",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_validation_invalid_environment",
          "state": "passed"
        },
        {
          "name": "test_server_config_validation_invalid_log_level",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_validation_invalid_log_level",
          "state": "passed"
        },
        {
          "name": "test_server_config_singleton_pattern",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_singleton_pattern",
          "state": "passed"
        },
        {
          "name": "test_server_config_reset_instance",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_reset_instance",
          "state": "passed"
        },
        {
          "name": "test_server_config_is_development",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_is_development",
          "state": "passed"
        },
        {
          "name": "test_server_config_is_production",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_is_production",
          "state": "passed"
        },
        {
          "name": "test_server_config_get_base_url",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_get_base_url",
          "state": "passed"
        },
        {
          "name": "test_server_config_repr",
          "fullName": "tests/config/test_server_config.py::TestServerConfig::test_server_config_repr",
          "state": "passed"
        },
        {
          "name": "test_get_server_config_function",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_get_server_config_function",
          "state": "passed"
        },
        {
          "name": "test_get_server_host_function",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_get_server_host_function",
          "state": "passed"
        },
        {
          "name": "test_get_server_port_function",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_get_server_port_function",
          "state": "passed"
        },
        {
          "name": "test_get_server_workers_function",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_get_server_workers_function",
          "state": "passed"
        },
        {
          "name": "test_get_environment_function",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_get_environment_function",
          "state": "passed"
        },
        {
          "name": "test_is_development_function",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_is_development_function",
          "state": "passed"
        },
        {
          "name": "test_is_production_function",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_is_production_function",
          "state": "passed"
        },
        {
          "name": "test_get_base_url_function",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_get_base_url_function",
          "state": "passed"
        },
        {
          "name": "test_global_server_config_instance",
          "fullName": "tests/config/test_server_config.py::TestServerConfigUtilityFunctions::test_global_server_config_instance",
          "state": "passed"
        },
        {
          "name": "test_server_config_boundary_ports",
          "fullName": "tests/config/test_server_config.py::TestServerConfigEdgeCases::test_server_config_boundary_ports",
          "state": "passed"
        },
        {
          "name": "test_server_config_minimum_workers",
          "fullName": "tests/config/test_server_config.py::TestServerConfigEdgeCases::test_server_config_minimum_workers",
          "state": "passed"
        },
        {
          "name": "test_server_config_all_valid_environments",
          "fullName": "tests/config/test_server_config.py::TestServerConfigEdgeCases::test_server_config_all_valid_environments",
          "state": "passed"
        },
        {
          "name": "test_server_config_all_valid_log_levels",
          "fullName": "tests/config/test_server_config.py::TestServerConfigEdgeCases::test_server_config_all_valid_log_levels",
          "state": "passed"
        },
        {
          "name": "test_server_config_case_sensitivity",
          "fullName": "tests/config/test_server_config.py::TestServerConfigEdgeCases::test_server_config_case_sensitivity",
          "state": "passed"
        },
        {
          "name": "test_server_config_dotenv_import_error",
          "fullName": "tests/config/test_server_config.py::TestServerConfigEdgeCases::test_server_config_dotenv_import_error",
          "state": "passed"
        },
        {
          "name": "test_server_config_validation_error_messages",
          "fullName": "tests/config/test_server_config.py::TestServerConfigEdgeCases::test_server_config_validation_error_messages",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/config/test_settings_simple.py",
      "tests": [
        {
          "name": "test_settings_initialization",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsBasic::test_settings_initialization",
          "state": "passed"
        },
        {
          "name": "test_settings_environment_parsing",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsBasic::test_settings_environment_parsing",
          "state": "passed"
        },
        {
          "name": "test_settings_metrics_validation",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsBasic::test_settings_metrics_validation",
          "state": "passed"
        },
        {
          "name": "test_settings_langwatch_config",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsBasic::test_settings_langwatch_config",
          "state": "passed"
        },
        {
          "name": "test_settings_is_production",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsBasic::test_settings_is_production",
          "state": "passed"
        },
        {
          "name": "test_settings_logging_config",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsBasic::test_settings_logging_config",
          "state": "passed"
        },
        {
          "name": "test_settings_validation",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsBasic::test_settings_validation",
          "state": "passed"
        },
        {
          "name": "test_get_setting",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsUtilities::test_get_setting",
          "state": "passed"
        },
        {
          "name": "test_get_project_root",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsUtilities::test_get_project_root",
          "state": "passed"
        },
        {
          "name": "test_validate_environment",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsUtilities::test_validate_environment",
          "state": "passed"
        },
        {
          "name": "test_settings_invalid_metrics_config",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsEdgeCases::test_settings_invalid_metrics_config",
          "state": "passed"
        },
        {
          "name": "test_settings_missing_logger",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsEdgeCases::test_settings_missing_logger",
          "state": "passed"
        },
        {
          "name": "test_settings_directory_creation",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsEdgeCases::test_settings_directory_creation",
          "state": "passed"
        },
        {
          "name": "test_settings_langwatch_explicit_disable",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsEdgeCases::test_settings_langwatch_explicit_disable",
          "state": "passed"
        },
        {
          "name": "test_settings_langwatch_no_api_key",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsEdgeCases::test_settings_langwatch_no_api_key",
          "state": "passed"
        },
        {
          "name": "test_settings_langwatch_config_cleanup",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsEdgeCases::test_settings_langwatch_config_cleanup",
          "state": "passed"
        },
        {
          "name": "test_settings_metrics_clamping_warnings",
          "fullName": "tests/config/test_settings_simple.py::TestSettingsEdgeCases::test_settings_metrics_clamping_warnings",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_knowledge/test_basic_knowledge.py",
      "tests": [
        {
          "name": "test_import_csv_hot_reload",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestKnowledgeModuleImports::test_import_csv_hot_reload",
          "state": "passed"
        },
        {
          "name": "test_import_metadata_csv_reader",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestKnowledgeModuleImports::test_import_metadata_csv_reader",
          "state": "passed"
        },
        {
          "name": "test_import_row_based_csv_knowledge",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestKnowledgeModuleImports::test_import_row_based_csv_knowledge",
          "state": "passed"
        },
        {
          "name": "test_import_config_aware_filter",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestKnowledgeModuleImports::test_import_config_aware_filter",
          "state": "passed"
        },
        {
          "name": "test_import_smart_incremental_loader",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestKnowledgeModuleImports::test_import_smart_incremental_loader",
          "state": "passed"
        },
        {
          "name": "test_import_knowledge_factory",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestKnowledgeModuleImports::test_import_knowledge_factory",
          "state": "passed"
        },
        {
          "name": "test_csv_file_creation",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestCSVOperations::test_csv_file_creation",
          "state": "passed"
        },
        {
          "name": "test_csv_dict_reader",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestCSVOperations::test_csv_dict_reader",
          "state": "passed"
        },
        {
          "name": "test_empty_csv_handling",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestCSVOperations::test_empty_csv_handling",
          "state": "passed"
        },
        {
          "name": "test_csv_with_special_characters",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestCSVOperations::test_csv_with_special_characters",
          "state": "passed"
        },
        {
          "name": "test_config_yaml_structure",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestKnowledgeConfigHandling::test_config_yaml_structure",
          "state": "passed"
        },
        {
          "name": "test_config_access_patterns",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestKnowledgeConfigHandling::test_config_access_patterns",
          "state": "passed"
        },
        {
          "name": "test_path_resolution",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestPathOperations::test_path_resolution",
          "state": "passed"
        },
        {
          "name": "test_file_existence_checking",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestPathOperations::test_file_existence_checking",
          "state": "passed"
        },
        {
          "name": "test_directory_operations",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestPathOperations::test_directory_operations",
          "state": "passed"
        },
        {
          "name": "test_file_not_found_handling",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestErrorHandling::test_file_not_found_handling",
          "state": "passed"
        },
        {
          "name": "test_permission_error_simulation",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestErrorHandling::test_permission_error_simulation",
          "state": "passed"
        },
        {
          "name": "test_csv_error_handling",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestErrorHandling::test_csv_error_handling",
          "state": "passed"
        },
        {
          "name": "test_large_csv_iteration",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestPerformancePatterns::test_large_csv_iteration",
          "state": "passed"
        },
        {
          "name": "test_batch_processing_pattern",
          "fullName": "tests/lib_knowledge/test_basic_knowledge.py::TestPerformancePatterns::test_batch_processing_pattern",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_knowledge/test_comprehensive_knowledge.py",
      "tests": [
        {
          "name": "test_watcher_creation",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestCSVHotReloadManager::test_watcher_creation",
          "state": "passed"
        },
        {
          "name": "test_file_modification_detection",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestCSVHotReloadManager::test_file_modification_detection",
          "state": "passed"
        },
        {
          "name": "test_nonexistent_file_handling",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestCSVHotReloadManager::test_nonexistent_file_handling",
          "state": "passed"
        },
        {
          "name": "test_csv_reading_basic",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestMetadataCSVReader::test_csv_reading_basic",
          "state": "passed"
        },
        {
          "name": "test_empty_csv_handling",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestMetadataCSVReader::test_empty_csv_handling",
          "state": "passed"
        },
        {
          "name": "test_header_only_csv",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestMetadataCSVReader::test_header_only_csv",
          "state": "passed"
        },
        {
          "name": "test_knowledge_loading",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestRowBasedCSVKnowledge::test_knowledge_loading",
          "state": "passed"
        },
        {
          "name": "test_search_functionality",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestRowBasedCSVKnowledge::test_search_functionality",
          "state": "passed"
        },
        {
          "name": "test_filter_creation",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestConfigAwareFilter::test_filter_creation",
          "state": "passed"
        },
        {
          "name": "test_filter_functionality",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestConfigAwareFilter::test_filter_functionality",
          "state": "passed"
        },
        {
          "name": "test_loader_creation",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestSmartIncrementalLoader::test_loader_creation",
          "state": "passed"
        },
        {
          "name": "test_change_detection",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestSmartIncrementalLoader::test_change_detection",
          "state": "passed"
        },
        {
          "name": "test_factory_creation",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestKnowledgeFactoryFunctions::test_factory_creation",
          "state": "passed"
        },
        {
          "name": "test_factory_methods_exist",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestKnowledgeFactoryFunctions::test_factory_methods_exist",
          "state": "passed"
        },
        {
          "name": "test_import_all_modules",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestKnowledgeModuleImports::test_import_all_modules",
          "state": "passed"
        },
        {
          "name": "test_nonexistent_csv_handling",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestKnowledgeErrorHandling::test_nonexistent_csv_handling",
          "state": "passed"
        },
        {
          "name": "test_malformed_csv_handling",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestKnowledgeErrorHandling::test_malformed_csv_handling",
          "state": "passed"
        },
        {
          "name": "test_full_knowledge_pipeline",
          "fullName": "tests/lib_knowledge/test_comprehensive_knowledge.py::TestKnowledgeIntegration::test_full_knowledge_pipeline",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py",
      "tests": [
        {
          "name": "test_initialization_with_explicit_path",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_initialization_with_explicit_path",
          "state": "passed"
        },
        {
          "name": "test_initialization_with_centralized_config",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_initialization_with_centralized_config",
          "state": "failed",
          "errors": [
            {
              "message": "args = (<tests.lib_knowledge.test_csv_hot_reload_comprehensive.TestCSVHotReloadManagerInitialization object at 0x7bb41b9839b0>,)\nkeywargs = {}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n>       with self.decoration_helper(patched,\n                                    args,\n                                    keywargs) as (newargs, newkeywargs):\n\n/usr/lib/python3.12/unittest/mock.py:1387: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/contextlib.py:137: in __enter__\n    return next(self.gen)\n           ^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1369: in decoration_helper\n    arg = exit_stack.enter_context(patching)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/contextlib.py:526: in enter_context\n    result = _enter(cm)\n             ^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb41b9826c0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.knowledge.csv_hot_reload' from '/home/namastex/workspace/automagik-hive/lib/knowledge/csv_hot_reload.py'> does not have the attribute 'load_global_knowledge_config'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_initialization_config_fallback",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_initialization_config_fallback",
          "state": "failed",
          "errors": [
            {
              "message": "args = (<tests.lib_knowledge.test_csv_hot_reload_comprehensive.TestCSVHotReloadManagerInitialization object at 0x7bb41b983c20>,)\nkeywargs = {}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n>       with self.decoration_helper(patched,\n                                    args,\n                                    keywargs) as (newargs, newkeywargs):\n\n/usr/lib/python3.12/unittest/mock.py:1387: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/contextlib.py:137: in __enter__\n    return next(self.gen)\n           ^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1369: in decoration_helper\n    arg = exit_stack.enter_context(patching)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/contextlib.py:526: in enter_context\n    result = _enter(cm)\n             ^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb41b980a40>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.knowledge.csv_hot_reload' from '/home/namastex/workspace/automagik-hive/lib/knowledge/csv_hot_reload.py'> does not have the attribute 'load_global_knowledge_config'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_initialization_no_path_no_config",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_initialization_no_path_no_config",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_knowledge.test_csv_hot_reload_comprehensive.TestCSVHotReloadManagerInitialization object at 0x7bb41b99c170>\n\n    def test_initialization_no_path_no_config(self):\n        \"\"\"Test initialization when no path provided and no config available.\"\"\"\n        # Test the full fallback chain when config loading completely fails\n>       with patch(\"lib.knowledge.csv_hot_reload.load_global_knowledge_config\") as mock_config:\n\ntests/lib_knowledge/test_csv_hot_reload_comprehensive.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb419d5b920>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.knowledge.csv_hot_reload' from '/home/namastex/workspace/automagik-hive/lib/knowledge/csv_hot_reload.py'> does not have the attribute 'load_global_knowledge_config'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_knowledge_base_initialization_success",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_knowledge_base_initialization_success",
          "state": "failed",
          "errors": [
            {
              "message": "args = (<tests.lib_knowledge.test_csv_hot_reload_comprehensive.TestCSVHotReloadManagerInitialization object at 0x7bb41b99c3e0>,)\nkw = {}\n\n    @wraps(f)\n    def _inner(*args, **kw):\n        self._patch_dict()\n        try:\n>           return f(*args, **kw)\n                   ^^^^^^^^^^^^^^\n\n/usr/lib/python3.12/unittest/mock.py:1843: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1387: in patched\n    with self.decoration_helper(patched,\n/usr/lib/python3.12/contextlib.py:137: in __enter__\n    return next(self.gen)\n           ^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1369: in decoration_helper\n    arg = exit_stack.enter_context(patching)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/contextlib.py:526: in enter_context\n    result = _enter(cm)\n             ^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb41b982870>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.knowledge.csv_hot_reload' from '/home/namastex/workspace/automagik-hive/lib/knowledge/csv_hot_reload.py'> does not have the attribute 'load_global_knowledge_config'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_knowledge_base_initialization_embedder_config_fallback",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_knowledge_base_initialization_embedder_config_fallback",
          "state": "failed",
          "errors": [
            {
              "message": "args = (<tests.lib_knowledge.test_csv_hot_reload_comprehensive.TestCSVHotReloadManagerInitialization object at 0x7bb41b99c650>,)\nkw = {}\n\n    @wraps(f)\n    def _inner(*args, **kw):\n        self._patch_dict()\n        try:\n>           return f(*args, **kw)\n                   ^^^^^^^^^^^^^^\n\n/usr/lib/python3.12/unittest/mock.py:1843: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1387: in patched\n    with self.decoration_helper(patched,\n/usr/lib/python3.12/contextlib.py:137: in __enter__\n    return next(self.gen)\n           ^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1369: in decoration_helper\n    arg = exit_stack.enter_context(patching)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/contextlib.py:526: in enter_context\n    result = _enter(cm)\n             ^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb41b982a50>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.knowledge.csv_hot_reload' from '/home/namastex/workspace/automagik-hive/lib/knowledge/csv_hot_reload.py'> does not have the attribute 'load_global_knowledge_config'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_embedder_import_error_fallback",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_embedder_import_error_fallback",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_knowledge.test_csv_hot_reload_comprehensive.TestCSVHotReloadManagerInitialization object at 0x7bb41b99c8f0>\n\n    @patch.dict(os.environ, {\"HIVE_DATABASE_URL\": \"postgresql://test:test@localhost:5432/test\"})\n    def test_embedder_import_error_fallback(self):\n        \"\"\"Test fallback when embedder import fails.\"\"\"\n        # Test the embedder import error handling path\n>       with patch(\"lib.knowledge.csv_hot_reload.load_global_knowledge_config\") as mock_config:\n\ntests/lib_knowledge/test_csv_hot_reload_comprehensive.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb41a943d40>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.knowledge.csv_hot_reload' from '/home/namastex/workspace/automagik-hive/lib/knowledge/csv_hot_reload.py'> does not have the attribute 'load_global_knowledge_config'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_knowledge_base_initialization_no_database_url",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_knowledge_base_initialization_no_database_url",
          "state": "passed"
        },
        {
          "name": "test_knowledge_base_initialization_general_failure",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerInitialization::test_knowledge_base_initialization_general_failure",
          "state": "passed"
        },
        {
          "name": "test_start_watching_when_not_running",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_start_watching_when_not_running",
          "state": "passed"
        },
        {
          "name": "test_start_watching_when_already_running",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_start_watching_when_already_running",
          "state": "passed"
        },
        {
          "name": "test_start_watching_with_observer_error",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_start_watching_with_observer_error",
          "state": "passed"
        },
        {
          "name": "test_stop_watching_when_running",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_stop_watching_when_running",
          "state": "passed"
        },
        {
          "name": "test_stop_watching_when_not_running",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_stop_watching_when_not_running",
          "state": "passed"
        },
        {
          "name": "test_file_system_event_handler_on_modified",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_file_system_event_handler_on_modified",
          "state": "passed"
        },
        {
          "name": "test_file_system_event_handler_on_moved",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_file_system_event_handler_on_moved",
          "state": "passed"
        },
        {
          "name": "test_file_system_event_handler_ignore_directory_events",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_file_system_event_handler_ignore_directory_events",
          "state": "passed"
        },
        {
          "name": "test_file_system_event_handler_ignore_wrong_file",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_file_system_event_handler_ignore_wrong_file",
          "state": "passed"
        },
        {
          "name": "test_event_handler_methods_directly",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerFileWatching::test_event_handler_methods_directly",
          "state": "passed"
        },
        {
          "name": "test_reload_knowledge_base_success",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerReloading::test_reload_knowledge_base_success",
          "state": "passed"
        },
        {
          "name": "test_reload_knowledge_base_no_knowledge_base",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerReloading::test_reload_knowledge_base_no_knowledge_base",
          "state": "passed"
        },
        {
          "name": "test_reload_knowledge_base_load_error",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerReloading::test_reload_knowledge_base_load_error",
          "state": "passed"
        },
        {
          "name": "test_force_reload",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerReloading::test_force_reload",
          "state": "passed"
        },
        {
          "name": "test_get_status_stopped",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerStatus::test_get_status_stopped",
          "state": "passed"
        },
        {
          "name": "test_get_status_running",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerStatus::test_get_status_running",
          "state": "passed"
        },
        {
          "name": "test_get_status_file_not_exists",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerStatus::test_get_status_file_not_exists",
          "state": "passed"
        },
        {
          "name": "test_full_workflow_start_watch_reload_stop",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerIntegration::test_full_workflow_start_watch_reload_stop",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_knowledge.test_csv_hot_reload_comprehensive.TestCSVHotReloadManagerIntegration object at 0x7bb41b99fa10>\n\n    @patch.dict(os.environ, {\"HIVE_DATABASE_URL\": \"postgresql://test:test@localhost:5432/test\"})\n    def test_full_workflow_start_watch_reload_stop(self):\n        \"\"\"Test complete workflow of starting, watching, reloading, and stopping.\"\"\"\n        with patch(\"lib.knowledge.csv_hot_reload.PgVector\"):\n>           with patch(\"lib.knowledge.csv_hot_reload.OpenAIEmbedder\"):\n\ntests/lib_knowledge/test_csv_hot_reload_comprehensive.py:476: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb41af6cc80>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.knowledge.csv_hot_reload' from '/home/namastex/workspace/automagik-hive/lib/knowledge/csv_hot_reload.py'> does not have the attribute 'OpenAIEmbedder'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_manager_lifecycle_without_database",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerIntegration::test_manager_lifecycle_without_database",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_knowledge.test_csv_hot_reload_comprehensive.TestCSVHotReloadManagerIntegration object at 0x7bb41b99fc20>\n\n    def test_manager_lifecycle_without_database(self):\n        \"\"\"Test manager lifecycle when database is not available.\"\"\"\n        manager = CSVHotReloadManager(csv_path=str(self.csv_file))\n    \n        # Knowledge base should not be initialized\n>       assert manager.knowledge_base is None\nE       AssertionError: assert RowBasedCSVKnowledgeBase(reader=None, vector_db=<agno.vectordb.pgvector.pgvector.PgVector object at 0x7bb41ade9010>, n...': '', 'has_problem': False, 'has_solution': False}, embedder=None, embedding=None, usage=None, reranking_score=None)]) is None\nE        +  where RowBasedCSVKnowledgeBase(reader=None, vector_db=<agno.vectordb.pgvector.pgvector.PgVector object at 0x7bb41ade9010>, n...': '', 'has_problem': False, 'has_solution': False}, embedder=None, embedding=None, usage=None, reranking_score=None)]) = <lib.knowledge.csv_hot_reload.CSVHotReloadManager object at 0x7bb41ade8830>.knowledge_base\n\ntests/lib_knowledge/test_csv_hot_reload_comprehensive.py:515: AssertionError"
            }
          ]
        },
        {
          "name": "test_multiple_start_stop_cycles",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadManagerIntegration::test_multiple_start_stop_cycles",
          "state": "passed"
        },
        {
          "name": "test_main_status_command",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadCLIInterface::test_main_status_command",
          "state": "passed"
        },
        {
          "name": "test_main_force_reload_command",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadCLIInterface::test_main_force_reload_command",
          "state": "passed"
        },
        {
          "name": "test_main_start_watching_command",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadCLIInterface::test_main_start_watching_command",
          "state": "passed"
        },
        {
          "name": "test_main_default_csv_path",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadCLIInterface::test_main_default_csv_path",
          "state": "passed"
        },
        {
          "name": "test_initialization_with_nonexistent_csv",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadErrorHandling::test_initialization_with_nonexistent_csv",
          "state": "passed"
        },
        {
          "name": "test_initialization_with_invalid_path_type",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadErrorHandling::test_initialization_with_invalid_path_type",
          "state": "passed"
        },
        {
          "name": "test_logging_during_initialization",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadErrorHandling::test_logging_during_initialization",
          "state": "passed"
        },
        {
          "name": "test_logging_during_file_watching",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadErrorHandling::test_logging_during_file_watching",
          "state": "passed"
        },
        {
          "name": "test_logging_during_reload_operations",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadErrorHandling::test_logging_during_reload_operations",
          "state": "passed"
        },
        {
          "name": "test_observer_cleanup_on_error",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadErrorHandling::test_observer_cleanup_on_error",
          "state": "passed"
        },
        {
          "name": "test_multiple_stop_watching_calls",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadErrorHandling::test_multiple_stop_watching_calls",
          "state": "passed"
        },
        {
          "name": "test_rapid_start_stop_cycles",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadPerformance::test_rapid_start_stop_cycles",
          "state": "passed"
        },
        {
          "name": "test_concurrent_reload_calls",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadPerformance::test_concurrent_reload_calls",
          "state": "passed"
        },
        {
          "name": "test_status_call_performance",
          "fullName": "tests/lib_knowledge/test_csv_hot_reload_comprehensive.py::TestCSVHotReloadPerformance::test_status_call_performance",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py",
      "tests": [
        {
          "name": "test_initialization_with_valid_csv",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVKnowledgeInitialization::test_initialization_with_valid_csv",
          "state": "passed"
        },
        {
          "name": "test_initialization_with_missing_columns",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVKnowledgeInitialization::test_initialization_with_missing_columns",
          "state": "passed"
        },
        {
          "name": "test_initialization_with_empty_values",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVKnowledgeInitialization::test_initialization_with_empty_values",
          "state": "passed"
        },
        {
          "name": "test_initialization_with_nonexistent_file",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVKnowledgeInitialization::test_initialization_with_nonexistent_file",
          "state": "passed"
        },
        {
          "name": "test_content_formatting",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVKnowledgeInitialization::test_content_formatting",
          "state": "passed"
        },
        {
          "name": "test_document_metadata_creation",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVDocumentCreation::test_document_metadata_creation",
          "state": "passed"
        },
        {
          "name": "test_document_id_generation",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVDocumentCreation::test_document_id_generation",
          "state": "passed"
        },
        {
          "name": "test_business_unit_counting_and_logging",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVDocumentCreation::test_business_unit_counting_and_logging",
          "state": "passed"
        },
        {
          "name": "test_content_strip_and_formatting",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVDocumentCreation::test_content_strip_and_formatting",
          "state": "passed"
        },
        {
          "name": "test_csv_read_error_handling",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVErrorHandling::test_csv_read_error_handling",
          "state": "passed"
        },
        {
          "name": "test_file_permission_error",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVErrorHandling::test_file_permission_error",
          "state": "passed"
        },
        {
          "name": "test_empty_csv_file",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVErrorHandling::test_empty_csv_file",
          "state": "passed"
        },
        {
          "name": "test_csv_with_only_headers",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVErrorHandling::test_csv_with_only_headers",
          "state": "passed"
        },
        {
          "name": "test_malformed_csv_handling",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVErrorHandling::test_malformed_csv_handling",
          "state": "passed"
        },
        {
          "name": "test_load_method_with_recreate",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVVectorOperations::test_load_method_with_recreate",
          "state": "passed"
        },
        {
          "name": "test_load_method_without_vector_db",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVVectorOperations::test_load_method_without_vector_db",
          "state": "passed"
        },
        {
          "name": "test_load_method_with_existing_collection",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVVectorOperations::test_load_method_with_existing_collection",
          "state": "passed"
        },
        {
          "name": "test_load_method_with_upsert",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVVectorOperations::test_load_method_with_upsert",
          "state": "passed"
        },
        {
          "name": "test_load_method_batch_processing",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVVectorOperations::test_load_method_batch_processing",
          "state": "passed"
        },
        {
          "name": "test_load_method_filter_suppression",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVVectorOperations::test_load_method_filter_suppression",
          "state": "passed"
        },
        {
          "name": "test_business_unit_summary_logging",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVVectorOperations::test_business_unit_summary_logging",
          "state": "passed"
        },
        {
          "name": "test_reload_from_csv_success",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVHotReload::test_reload_from_csv_success",
          "state": "passed"
        },
        {
          "name": "test_reload_from_csv_error_handling",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVHotReload::test_reload_from_csv_error_handling",
          "state": "passed"
        },
        {
          "name": "test_validate_filters_with_none",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVFilterValidation::test_validate_filters_with_none",
          "state": "passed"
        },
        {
          "name": "test_validate_filters_with_empty_dict",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVFilterValidation::test_validate_filters_with_empty_dict",
          "state": "passed"
        },
        {
          "name": "test_validate_filters_no_metadata_tracked",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVFilterValidation::test_validate_filters_no_metadata_tracked",
          "state": "passed"
        },
        {
          "name": "test_validate_filters_with_valid_metadata",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVFilterValidation::test_validate_filters_with_valid_metadata",
          "state": "passed"
        },
        {
          "name": "test_validate_filters_with_prefixed_keys",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVFilterValidation::test_validate_filters_with_prefixed_keys",
          "state": "passed"
        },
        {
          "name": "test_special_characters_in_content",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVAdvancedCases::test_special_characters_in_content",
          "state": "passed"
        },
        {
          "name": "test_very_long_content",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVAdvancedCases::test_very_long_content",
          "state": "passed"
        },
        {
          "name": "test_unicode_and_encoding_handling",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVAdvancedCases::test_unicode_and_encoding_handling",
          "state": "passed"
        },
        {
          "name": "test_load_csv_as_documents_parameter_handling",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVAdvancedCases::test_load_csv_as_documents_parameter_handling",
          "state": "passed"
        },
        {
          "name": "test_document_content_with_newlines_and_formatting",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVAdvancedCases::test_document_content_with_newlines_and_formatting",
          "state": "passed"
        },
        {
          "name": "test_large_dataset_handling",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVPerformanceAndMemory::test_large_dataset_handling",
          "state": "passed"
        },
        {
          "name": "test_memory_efficient_document_creation",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVPerformanceAndMemory::test_memory_efficient_document_creation",
          "state": "passed"
        },
        {
          "name": "test_csv_reader_resource_cleanup",
          "fullName": "tests/lib_knowledge/test_row_based_csv_knowledge_comprehensive.py::TestRowBasedCSVPerformanceAndMemory::test_csv_reader_resource_cleanup",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_logging/test_basic_logging.py",
      "tests": [
        {
          "name": "test_import_batch_logger",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingModuleImports::test_import_batch_logger",
          "state": "passed"
        },
        {
          "name": "test_import_config",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingModuleImports::test_import_config",
          "state": "passed"
        },
        {
          "name": "test_import_progress",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingModuleImports::test_import_progress",
          "state": "passed"
        },
        {
          "name": "test_import_main_logger",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingModuleImports::test_import_main_logger",
          "state": "passed"
        },
        {
          "name": "test_standard_logging_works",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestBasicLogging::test_standard_logging_works",
          "state": "passed"
        },
        {
          "name": "test_logging_levels",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestBasicLogging::test_logging_levels",
          "state": "passed"
        },
        {
          "name": "test_logger_hierarchy",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestBasicLogging::test_logger_hierarchy",
          "state": "passed"
        },
        {
          "name": "test_basic_config",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingConfiguration::test_basic_config",
          "state": "passed"
        },
        {
          "name": "test_formatter_creation",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingConfiguration::test_formatter_creation",
          "state": "passed"
        },
        {
          "name": "test_handler_creation",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingConfiguration::test_handler_creation",
          "state": "passed"
        },
        {
          "name": "test_file_handler_creation",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestFileLogging::test_file_handler_creation",
          "state": "passed"
        },
        {
          "name": "test_message_formatting",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLogMessage::test_message_formatting",
          "state": "passed"
        },
        {
          "name": "test_exception_logging",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLogMessage::test_exception_logging",
          "state": "passed"
        },
        {
          "name": "test_extra_parameters",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLogMessage::test_extra_parameters",
          "state": "passed"
        },
        {
          "name": "test_filter_creation",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingContext::test_filter_creation",
          "state": "passed"
        },
        {
          "name": "test_logger_context",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingContext::test_logger_context",
          "state": "passed"
        },
        {
          "name": "test_conditional_logging",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestPerformanceLogging::test_conditional_logging",
          "state": "passed"
        },
        {
          "name": "test_lazy_evaluation",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestPerformanceLogging::test_lazy_evaluation",
          "state": "passed"
        },
        {
          "name": "test_named_logger_pattern",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingUtilities::test_named_logger_pattern",
          "state": "passed"
        },
        {
          "name": "test_null_handler",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingUtilities::test_null_handler",
          "state": "passed"
        },
        {
          "name": "test_multiple_handlers",
          "fullName": "tests/lib_logging/test_basic_logging.py::TestLoggingUtilities::test_multiple_handlers",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_logging/test_batch_logger_comprehensive.py",
      "tests": [
        {
          "name": "test_verbose_logging_environment_detection",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerCore::test_verbose_logging_environment_detection",
          "state": "passed"
        },
        {
          "name": "test_debug_logging_environment_detection",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerCore::test_debug_logging_environment_detection",
          "state": "passed"
        },
        {
          "name": "test_quiet_logging_environment_detection",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerCore::test_quiet_logging_environment_detection",
          "state": "passed"
        },
        {
          "name": "test_log_agent_inheritance_verbose",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerVerboseMode::test_log_agent_inheritance_verbose",
          "state": "passed"
        },
        {
          "name": "test_log_model_resolved_verbose",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerVerboseMode::test_log_model_resolved_verbose",
          "state": "passed"
        },
        {
          "name": "test_log_storage_created_verbose",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerVerboseMode::test_log_storage_created_verbose",
          "state": "passed"
        },
        {
          "name": "test_log_agent_created_verbose",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerVerboseMode::test_log_agent_created_verbose",
          "state": "passed"
        },
        {
          "name": "test_log_team_member_loaded_verbose",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerVerboseMode::test_log_team_member_loaded_verbose",
          "state": "passed"
        },
        {
          "name": "test_log_csv_processing_verbose",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerVerboseMode::test_log_csv_processing_verbose",
          "state": "passed"
        },
        {
          "name": "test_log_agent_inheritance_runtime",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerRuntimeMode::test_log_agent_inheritance_runtime",
          "state": "passed"
        },
        {
          "name": "test_log_model_resolved_runtime",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerRuntimeMode::test_log_model_resolved_runtime",
          "state": "passed"
        },
        {
          "name": "test_log_storage_created_runtime",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerRuntimeMode::test_log_storage_created_runtime",
          "state": "passed"
        },
        {
          "name": "test_log_agent_created_runtime",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerRuntimeMode::test_log_agent_created_runtime",
          "state": "passed"
        },
        {
          "name": "test_log_team_member_loaded_runtime",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerRuntimeMode::test_log_team_member_loaded_runtime",
          "state": "passed"
        },
        {
          "name": "test_log_csv_processing_runtime",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerRuntimeMode::test_log_csv_processing_runtime",
          "state": "passed"
        },
        {
          "name": "test_log_once_functionality",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerAdvancedOperations::test_log_once_functionality",
          "state": "passed"
        },
        {
          "name": "test_log_once_with_kwargs",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerAdvancedOperations::test_log_once_with_kwargs",
          "state": "passed"
        },
        {
          "name": "test_log_team_member_loaded_with_team_id",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerAdvancedOperations::test_log_team_member_loaded_with_team_id",
          "state": "passed"
        },
        {
          "name": "test_flush_storage_created_summary",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerFlushOperations::test_flush_storage_created_summary",
          "state": "passed"
        },
        {
          "name": "test_flush_agent_created_summary",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerFlushOperations::test_flush_agent_created_summary",
          "state": "passed"
        },
        {
          "name": "test_flush_team_members_generic_summary",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerFlushOperations::test_flush_team_members_generic_summary",
          "state": "passed"
        },
        {
          "name": "test_flush_team_members_specific_teams_summary",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerFlushOperations::test_flush_team_members_specific_teams_summary",
          "state": "passed"
        },
        {
          "name": "test_flush_csv_processing_summary",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerFlushOperations::test_flush_csv_processing_summary",
          "state": "passed"
        },
        {
          "name": "test_startup_context_manager",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerContextManager::test_startup_context_manager",
          "state": "passed"
        },
        {
          "name": "test_startup_context_exception_handling",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerContextManager::test_startup_context_exception_handling",
          "state": "passed"
        },
        {
          "name": "test_global_log_agent_inheritance",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerGlobalFunctions::test_global_log_agent_inheritance",
          "state": "passed"
        },
        {
          "name": "test_global_log_model_resolved",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerGlobalFunctions::test_global_log_model_resolved",
          "state": "passed"
        },
        {
          "name": "test_global_log_storage_created",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerGlobalFunctions::test_global_log_storage_created",
          "state": "passed"
        },
        {
          "name": "test_global_log_agent_created",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerGlobalFunctions::test_global_log_agent_created",
          "state": "passed"
        },
        {
          "name": "test_global_log_team_member_loaded",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerGlobalFunctions::test_global_log_team_member_loaded",
          "state": "passed"
        },
        {
          "name": "test_global_log_csv_processing",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerGlobalFunctions::test_global_log_csv_processing",
          "state": "passed"
        },
        {
          "name": "test_global_set_runtime_mode",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerGlobalFunctions::test_global_set_runtime_mode",
          "state": "passed"
        },
        {
          "name": "test_global_startup_logging",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerGlobalFunctions::test_global_startup_logging",
          "state": "passed"
        },
        {
          "name": "test_flush_empty_batches",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerEdgeCases::test_flush_empty_batches",
          "state": "passed"
        },
        {
          "name": "test_force_flush_method",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerEdgeCases::test_force_flush_method",
          "state": "passed"
        },
        {
          "name": "test_agent_created_with_zero_parameters",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerEdgeCases::test_agent_created_with_zero_parameters",
          "state": "passed"
        },
        {
          "name": "test_mixed_team_member_scenarios",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerEdgeCases::test_mixed_team_member_scenarios",
          "state": "passed"
        },
        {
          "name": "test_environment_variable_edge_cases",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerEdgeCases::test_environment_variable_edge_cases",
          "state": "passed"
        },
        {
          "name": "test_batch_logging_performance",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerPerformance::test_batch_logging_performance",
          "state": "passed"
        },
        {
          "name": "test_flush_performance",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerPerformance::test_flush_performance",
          "state": "passed"
        },
        {
          "name": "test_full_lifecycle_integration",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerIntegration::test_full_lifecycle_integration",
          "state": "passed"
        },
        {
          "name": "test_context_manager_integration",
          "fullName": "tests/lib_logging/test_batch_logger_comprehensive.py::TestBatchLoggerIntegration::test_context_manager_integration",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_logging/test_comprehensive_logging.py",
      "tests": [
        {
          "name": "test_batch_logger_creation",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestBatchLogger::test_batch_logger_creation",
          "state": "passed"
        },
        {
          "name": "test_batch_logger_basic_logging",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestBatchLogger::test_batch_logger_basic_logging",
          "state": "passed"
        },
        {
          "name": "test_batch_logger_flush",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestBatchLogger::test_batch_logger_flush",
          "state": "passed"
        },
        {
          "name": "test_batch_logger_configuration",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestBatchLogger::test_batch_logger_configuration",
          "state": "passed"
        },
        {
          "name": "test_logging_config_creation",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingConfig::test_logging_config_creation",
          "state": "passed"
        },
        {
          "name": "test_logging_config_parameters",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingConfig::test_logging_config_parameters",
          "state": "passed"
        },
        {
          "name": "test_setup_logging_function",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingConfig::test_setup_logging_function",
          "state": "passed"
        },
        {
          "name": "test_setup_logging_with_config",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingConfig::test_setup_logging_with_config",
          "state": "passed"
        },
        {
          "name": "test_logging_levels",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingConfig::test_logging_levels",
          "state": "passed"
        },
        {
          "name": "test_progress_tracker_creation",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestStartupProgress::test_progress_tracker_creation",
          "state": "passed"
        },
        {
          "name": "test_progress_tracker_basic_ops",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestStartupProgress::test_progress_tracker_basic_ops",
          "state": "passed"
        },
        {
          "name": "test_progress_tracker_status",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestStartupProgress::test_progress_tracker_status",
          "state": "passed"
        },
        {
          "name": "test_progress_tracker_with_description",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestStartupProgress::test_progress_tracker_with_description",
          "state": "passed"
        },
        {
          "name": "test_logging_with_file_output",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingIntegration::test_logging_with_file_output",
          "state": "passed"
        },
        {
          "name": "test_batch_logger_with_progress",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingIntegration::test_batch_logger_with_progress",
          "state": "passed"
        },
        {
          "name": "test_logging_performance",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingIntegration::test_logging_performance",
          "state": "passed"
        },
        {
          "name": "test_import_all_modules",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingModuleImports::test_import_all_modules",
          "state": "passed"
        },
        {
          "name": "test_batch_logger_error_handling",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingErrorHandling::test_batch_logger_error_handling",
          "state": "passed"
        },
        {
          "name": "test_progress_tracker_error_handling",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingErrorHandling::test_progress_tracker_error_handling",
          "state": "passed"
        },
        {
          "name": "test_logging_setup_error_handling",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingErrorHandling::test_logging_setup_error_handling",
          "state": "passed"
        },
        {
          "name": "test_logger_creation_utilities",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingUtilities::test_logger_creation_utilities",
          "state": "passed"
        },
        {
          "name": "test_logging_context_managers",
          "fullName": "tests/lib_logging/test_comprehensive_logging.py::TestLoggingUtilities::test_logging_context_managers",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py",
      "tests": [
        {
          "name": "test_init_without_config",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoMetricsBridgeInitialization::test_init_without_config",
          "state": "passed"
        },
        {
          "name": "test_init_with_config",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoMetricsBridgeInitialization::test_init_with_config",
          "state": "passed"
        },
        {
          "name": "test_init_with_none_config",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoMetricsBridgeInitialization::test_init_with_none_config",
          "state": "passed"
        },
        {
          "name": "test_is_agno_response_with_run_response_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoResponseDetection::test_is_agno_response_with_run_response_metrics",
          "state": "passed"
        },
        {
          "name": "test_is_agno_response_with_session_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoResponseDetection::test_is_agno_response_with_session_metrics",
          "state": "passed"
        },
        {
          "name": "test_is_agno_response_with_direct_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoResponseDetection::test_is_agno_response_with_direct_metrics",
          "state": "passed"
        },
        {
          "name": "test_is_agno_response_without_run_response_attr",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoResponseDetection::test_is_agno_response_without_run_response_attr",
          "state": "passed"
        },
        {
          "name": "test_is_agno_response_with_non_dict_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoResponseDetection::test_is_agno_response_with_non_dict_metrics",
          "state": "passed"
        },
        {
          "name": "test_is_agno_response_with_empty_object",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoResponseDetection::test_is_agno_response_with_empty_object",
          "state": "passed"
        },
        {
          "name": "test_is_agno_response_with_none",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoResponseDetection::test_is_agno_response_with_none",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_session_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_session_metrics",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_detailed_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_detailed_metrics",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_run_response_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_run_response_metrics",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_non_numeric_list",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_non_numeric_list",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_non_none_single_value",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_non_none_single_value",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_direct_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_direct_metrics",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_model_information",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_model_information",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_run_response_model",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_run_response_model",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_response_content",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_response_content",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_run_response_content",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestAgnoNativeMetricsExtraction::test_extract_agno_native_metrics_with_run_response_content",
          "state": "passed"
        },
        {
          "name": "test_extract_basic_metrics_with_content",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestBasicMetricsExtraction::test_extract_basic_metrics_with_content",
          "state": "passed"
        },
        {
          "name": "test_extract_basic_metrics_with_usage",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestBasicMetricsExtraction::test_extract_basic_metrics_with_usage",
          "state": "passed"
        },
        {
          "name": "test_extract_basic_metrics_minimal_response",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestBasicMetricsExtraction::test_extract_basic_metrics_minimal_response",
          "state": "passed"
        },
        {
          "name": "test_filter_by_config_no_config",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestConfigurationFiltering::test_filter_by_config_no_config",
          "state": "passed"
        },
        {
          "name": "test_filter_by_config_basic_metrics_always_included",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestConfigurationFiltering::test_filter_by_config_basic_metrics_always_included",
          "state": "passed"
        },
        {
          "name": "test_filter_by_config_token_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestConfigurationFiltering::test_filter_by_config_token_metrics",
          "state": "passed"
        },
        {
          "name": "test_filter_by_config_time_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestConfigurationFiltering::test_filter_by_config_time_metrics",
          "state": "passed"
        },
        {
          "name": "test_filter_by_config_tool_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestConfigurationFiltering::test_filter_by_config_tool_metrics",
          "state": "passed"
        },
        {
          "name": "test_filter_by_config_event_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestConfigurationFiltering::test_filter_by_config_event_metrics",
          "state": "passed"
        },
        {
          "name": "test_filter_by_config_content_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestConfigurationFiltering::test_filter_by_config_content_metrics",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_with_agno_response",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestExtractMetricsMainMethod::test_extract_metrics_with_agno_response",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_with_non_agno_response",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestExtractMetricsMainMethod::test_extract_metrics_with_non_agno_response",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_with_yaml_overrides",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestExtractMetricsMainMethod::test_extract_metrics_with_yaml_overrides",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_with_config_filtering",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestExtractMetricsMainMethod::test_extract_metrics_with_config_filtering",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_error_handling",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestExtractMetricsMainMethod::test_extract_metrics_error_handling",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_logging_agno_response",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestExtractMetricsMainMethod::test_extract_metrics_logging_agno_response",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_logging_basic_response",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestExtractMetricsMainMethod::test_extract_metrics_logging_basic_response",
          "state": "passed"
        },
        {
          "name": "test_get_metrics_info_structure",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestGetMetricsInfo::test_get_metrics_info_structure",
          "state": "passed"
        },
        {
          "name": "test_get_metrics_info_capabilities",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestGetMetricsInfo::test_get_metrics_info_capabilities",
          "state": "passed"
        },
        {
          "name": "test_get_metrics_info_token_metrics_list",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestGetMetricsInfo::test_get_metrics_info_token_metrics_list",
          "state": "passed"
        },
        {
          "name": "test_get_metrics_info_advantages",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestGetMetricsInfo::test_get_metrics_info_advantages",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_with_none_response",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestEdgeCasesAndErrorHandling::test_extract_metrics_with_none_response",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_missing_attributes",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestEdgeCasesAndErrorHandling::test_extract_agno_native_metrics_missing_attributes",
          "state": "passed"
        },
        {
          "name": "test_extract_agno_native_metrics_with_empty_run_response_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestEdgeCasesAndErrorHandling::test_extract_agno_native_metrics_with_empty_run_response_metrics",
          "state": "passed"
        },
        {
          "name": "test_filter_by_config_with_missing_metrics",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestEdgeCasesAndErrorHandling::test_filter_by_config_with_missing_metrics",
          "state": "passed"
        },
        {
          "name": "test_full_agno_extraction_workflow",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestIntegrationScenarios::test_full_agno_extraction_workflow",
          "state": "passed"
        },
        {
          "name": "test_basic_response_fallback_workflow",
          "fullName": "tests/lib_metrics/test_agno_metrics_bridge_comprehensive.py::TestIntegrationScenarios::test_basic_response_fallback_workflow",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_metrics/test_basic_metrics.py",
      "tests": [
        {
          "name": "test_import_async_metrics_service",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsModuleImports::test_import_async_metrics_service",
          "state": "passed"
        },
        {
          "name": "test_import_agno_metrics_bridge",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsModuleImports::test_import_agno_metrics_bridge",
          "state": "passed"
        },
        {
          "name": "test_import_langwatch_integration",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsModuleImports::test_import_langwatch_integration",
          "state": "passed"
        },
        {
          "name": "test_import_config",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsModuleImports::test_import_config",
          "state": "passed"
        },
        {
          "name": "test_basic_metrics_structure",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsDataTypes::test_basic_metrics_structure",
          "state": "passed"
        },
        {
          "name": "test_metrics_validation_patterns",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsDataTypes::test_metrics_validation_patterns",
          "state": "passed"
        },
        {
          "name": "test_metrics_serialization",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsDataTypes::test_metrics_serialization",
          "state": "passed"
        },
        {
          "name": "test_basic_async_function",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestAsyncPatterns::test_basic_async_function",
          "state": "passed"
        },
        {
          "name": "test_async_context_manager",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestAsyncPatterns::test_async_context_manager",
          "state": "passed"
        },
        {
          "name": "test_async_generator",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestAsyncPatterns::test_async_generator",
          "state": "passed"
        },
        {
          "name": "test_asyncio_utilities",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestAsyncPatterns::test_asyncio_utilities",
          "state": "passed"
        },
        {
          "name": "test_config_structure",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsConfiguration::test_config_structure",
          "state": "passed"
        },
        {
          "name": "test_environment_config",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsConfiguration::test_environment_config",
          "state": "passed"
        },
        {
          "name": "test_config_validation",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsConfiguration::test_config_validation",
          "state": "passed"
        },
        {
          "name": "test_in_memory_storage",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsStorage::test_in_memory_storage",
          "state": "passed"
        },
        {
          "name": "test_batch_storage",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsStorage::test_batch_storage",
          "state": "passed"
        },
        {
          "name": "test_metrics_filtering",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsStorage::test_metrics_filtering",
          "state": "passed"
        },
        {
          "name": "test_metrics_error_simulation",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestErrorHandling::test_metrics_error_simulation",
          "state": "passed"
        },
        {
          "name": "test_timeout_handling",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestErrorHandling::test_timeout_handling",
          "state": "passed"
        },
        {
          "name": "test_retry_patterns",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestErrorHandling::test_retry_patterns",
          "state": "passed"
        },
        {
          "name": "test_metrics_aggregation",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsUtilities::test_metrics_aggregation",
          "state": "passed"
        },
        {
          "name": "test_metrics_formatting",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsUtilities::test_metrics_formatting",
          "state": "passed"
        },
        {
          "name": "test_metrics_validation_utilities",
          "fullName": "tests/lib_metrics/test_basic_metrics.py::TestMetricsUtilities::test_metrics_validation_utilities",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_metrics/test_comprehensive_metrics.py",
      "tests": [
        {
          "name": "test_async_metrics_service_creation",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAsyncMetricsService::test_async_metrics_service_creation",
          "state": "passed"
        },
        {
          "name": "test_async_metrics_service_with_config",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAsyncMetricsService::test_async_metrics_service_with_config",
          "state": "passed"
        },
        {
          "name": "test_async_metrics_basic_operations",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAsyncMetricsService::test_async_metrics_basic_operations",
          "state": "passed"
        },
        {
          "name": "test_async_metrics_store_metrics",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAsyncMetricsService::test_async_metrics_store_metrics",
          "state": "passed"
        },
        {
          "name": "test_async_metrics_batch_processing",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAsyncMetricsService::test_async_metrics_batch_processing",
          "state": "passed"
        },
        {
          "name": "test_async_metrics_sync_wrapper",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAsyncMetricsService::test_async_metrics_sync_wrapper",
          "state": "passed"
        },
        {
          "name": "test_agno_bridge_creation",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAgnoMetricsBridge::test_agno_bridge_creation",
          "state": "passed"
        },
        {
          "name": "test_agno_bridge_with_agno_app",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAgnoMetricsBridge::test_agno_bridge_with_agno_app",
          "state": "passed"
        },
        {
          "name": "test_agno_bridge_metrics_collection",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAgnoMetricsBridge::test_agno_bridge_metrics_collection",
          "state": "passed"
        },
        {
          "name": "test_agno_bridge_event_handling",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAgnoMetricsBridge::test_agno_bridge_event_handling",
          "state": "passed"
        },
        {
          "name": "test_agno_bridge_configuration",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestAgnoMetricsBridge::test_agno_bridge_configuration",
          "state": "passed"
        },
        {
          "name": "test_langwatch_creation",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestLangWatchManager::test_langwatch_creation",
          "state": "passed"
        },
        {
          "name": "test_langwatch_with_api_key",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestLangWatchManager::test_langwatch_with_api_key",
          "state": "passed"
        },
        {
          "name": "test_langwatch_send_metrics",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestLangWatchManager::test_langwatch_send_metrics",
          "state": "passed"
        },
        {
          "name": "test_langwatch_async_operations",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestLangWatchManager::test_langwatch_async_operations",
          "state": "passed"
        },
        {
          "name": "test_langwatch_trace_management",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestLangWatchManager::test_langwatch_trace_management",
          "state": "passed"
        },
        {
          "name": "test_langwatch_configuration",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestLangWatchManager::test_langwatch_configuration",
          "state": "passed"
        },
        {
          "name": "test_metrics_config_creation",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsConfig::test_metrics_config_creation",
          "state": "passed"
        },
        {
          "name": "test_metrics_config_parameters",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsConfig::test_metrics_config_parameters",
          "state": "passed"
        },
        {
          "name": "test_metrics_config_validation",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsConfig::test_metrics_config_validation",
          "state": "passed"
        },
        {
          "name": "test_metrics_config_defaults",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsConfig::test_metrics_config_defaults",
          "state": "passed"
        },
        {
          "name": "test_full_metrics_pipeline",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsIntegration::test_full_metrics_pipeline",
          "state": "passed"
        },
        {
          "name": "test_metrics_error_handling",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsIntegration::test_metrics_error_handling",
          "state": "passed"
        },
        {
          "name": "test_import_all_modules",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsModuleImports::test_import_all_modules",
          "state": "passed"
        },
        {
          "name": "test_metrics_processing_performance",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsPerformance::test_metrics_processing_performance",
          "state": "passed"
        },
        {
          "name": "test_metrics_memory_usage",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsPerformance::test_metrics_memory_usage",
          "state": "passed"
        },
        {
          "name": "test_metrics_validation_utilities",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsUtilities::test_metrics_validation_utilities",
          "state": "passed"
        },
        {
          "name": "test_metrics_formatting_utilities",
          "fullName": "tests/lib_metrics/test_comprehensive_metrics.py::TestMetricsUtilities::test_metrics_formatting_utilities",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py",
      "tests": [
        {
          "name": "test_agno_metrics_bridge_comprehensive",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::test_agno_metrics_bridge_comprehensive",
          "state": "passed"
        },
        {
          "name": "test_async_metrics_service_integration",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::test_async_metrics_service_integration",
          "state": "passed"
        },
        {
          "name": "test_configuration_flexibility",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::test_configuration_flexibility",
          "state": "passed"
        },
        {
          "name": "test_langwatch_integration",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::test_langwatch_integration",
          "state": "passed"
        },
        {
          "name": "test_metrics_system_status",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::test_metrics_system_status",
          "state": "passed"
        },
        {
          "name": "test_performance_comparison",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::test_performance_comparison",
          "state": "passed"
        },
        {
          "name": "test_mock_advanced_session_metrics_creation",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestMockDataStructures::test_mock_advanced_session_metrics_creation",
          "state": "passed"
        },
        {
          "name": "test_mock_advanced_session_metrics_custom_values",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestMockDataStructures::test_mock_advanced_session_metrics_custom_values",
          "state": "passed"
        },
        {
          "name": "test_mock_advanced_agno_response_creation",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestMockDataStructures::test_mock_advanced_agno_response_creation",
          "state": "passed"
        },
        {
          "name": "test_mock_advanced_agno_response_custom_values",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestMockDataStructures::test_mock_advanced_agno_response_custom_values",
          "state": "passed"
        },
        {
          "name": "test_mock_advanced_agno_response_none_metrics",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestMockDataStructures::test_mock_advanced_agno_response_none_metrics",
          "state": "passed"
        },
        {
          "name": "test_metrics_system_status_comprehensive",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsSystem::test_metrics_system_status_comprehensive",
          "state": "passed"
        },
        {
          "name": "test_agno_metrics_bridge_comprehensive_coverage",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsSystem::test_agno_metrics_bridge_comprehensive_coverage",
          "state": "passed"
        },
        {
          "name": "test_async_metrics_service_integration_edge_cases",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsSystem::test_async_metrics_service_integration_edge_cases",
          "state": "passed"
        },
        {
          "name": "test_langwatch_integration_exception_coverage",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsSystem::test_langwatch_integration_exception_coverage",
          "state": "passed"
        },
        {
          "name": "test_langwatch_integration_coordinator_failures",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsSystem::test_langwatch_integration_coordinator_failures",
          "state": "passed"
        },
        {
          "name": "test_performance_comparison_slow_scenario",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsSystem::test_performance_comparison_slow_scenario",
          "state": "passed"
        },
        {
          "name": "test_performance_comparison_fast_scenario",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsSystem::test_performance_comparison_fast_scenario",
          "state": "passed"
        },
        {
          "name": "test_configuration_flexibility_all_scenarios",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsSystem::test_configuration_flexibility_all_scenarios",
          "state": "passed"
        },
        {
          "name": "test_mock_data_performance",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsPerformance::test_mock_data_performance",
          "state": "passed"
        },
        {
          "name": "test_integration_test_execution_performance",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsPerformance::test_integration_test_execution_performance",
          "state": "passed"
        },
        {
          "name": "test_metrics_extraction_bulk_performance",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsPerformance::test_metrics_extraction_bulk_performance",
          "state": "passed"
        },
        {
          "name": "test_mock_data_with_invalid_values",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsErrorHandling::test_mock_data_with_invalid_values",
          "state": "passed"
        },
        {
          "name": "test_mock_data_with_negative_values",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsErrorHandling::test_mock_data_with_negative_values",
          "state": "passed"
        },
        {
          "name": "test_integration_with_corrupted_mock_data",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsErrorHandling::test_integration_with_corrupted_mock_data",
          "state": "passed"
        },
        {
          "name": "test_integration_with_missing_attributes",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsErrorHandling::test_integration_with_missing_attributes",
          "state": "passed"
        },
        {
          "name": "test_zero_values_metrics",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsEdgeCases::test_zero_values_metrics",
          "state": "passed"
        },
        {
          "name": "test_extremely_large_values",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsEdgeCases::test_extremely_large_values",
          "state": "passed"
        },
        {
          "name": "test_floating_point_precision",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsEdgeCases::test_floating_point_precision",
          "state": "passed"
        },
        {
          "name": "test_string_values_in_numeric_fields",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsEdgeCases::test_string_values_in_numeric_fields",
          "state": "passed"
        },
        {
          "name": "test_main_execution_success",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsMainExecution::test_main_execution_success",
          "state": "passed"
        },
        {
          "name": "test_main_execution_with_import_error",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsMainExecution::test_main_execution_with_import_error",
          "state": "passed"
        },
        {
          "name": "test_main_execution_with_assertion_error",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsMainExecution::test_main_execution_with_assertion_error",
          "state": "passed"
        },
        {
          "name": "test_main_execution_with_system_exit",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsMainExecution::test_main_execution_with_system_exit",
          "state": "passed"
        },
        {
          "name": "test_all_functions_callable",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsComplete::test_all_functions_callable",
          "state": "passed"
        },
        {
          "name": "test_mock_classes_comprehensive",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsComplete::test_mock_classes_comprehensive",
          "state": "passed"
        },
        {
          "name": "test_integration_metrics_system_robustness",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsComplete::test_integration_metrics_system_robustness",
          "state": "passed"
        },
        {
          "name": "test_coverage_target_achievement",
          "fullName": "tests/lib_metrics/test_integration_test_metrics_comprehensive.py::TestIntegrationTestMetricsComplete::test_coverage_target_achievement",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_additional_yaml_cache.py",
      "tests": [
        {
          "name": "test_cache_invalidation_on_file_change",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_cache_invalidation_on_file_change",
          "state": "passed"
        },
        {
          "name": "test_force_reload_parameter",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_force_reload_parameter",
          "state": "passed"
        },
        {
          "name": "test_glob_cache_functionality",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_glob_cache_functionality",
          "state": "passed"
        },
        {
          "name": "test_cache_size_management",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_cache_size_management",
          "state": "passed"
        },
        {
          "name": "test_inheritance_cache_functionality",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_inheritance_cache_functionality",
          "state": "passed"
        },
        {
          "name": "test_manual_cache_invalidation",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_manual_cache_invalidation",
          "state": "passed"
        },
        {
          "name": "test_convenience_functions",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_convenience_functions",
          "state": "passed"
        },
        {
          "name": "test_error_handling_edge_cases",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_error_handling_edge_cases",
          "state": "passed"
        },
        {
          "name": "test_cache_statistics_detailed",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheAdvanced::test_cache_statistics_detailed",
          "state": "passed"
        },
        {
          "name": "test_thread_safety_basic",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCacheThreadSafety::test_thread_safety_basic",
          "state": "passed"
        },
        {
          "name": "test_large_file_handling",
          "fullName": "tests/lib_utils/test_additional_yaml_cache.py::TestYAMLCachePerformance::test_large_file_handling",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_agno_storage_utils.py",
      "tests": [
        {
          "name": "test_get_storage_type_mapping_returns_dict",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestStorageTypeMapping::test_get_storage_type_mapping_returns_dict",
          "state": "passed"
        },
        {
          "name": "test_get_storage_type_mapping_contains_expected_types",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestStorageTypeMapping::test_get_storage_type_mapping_contains_expected_types",
          "state": "passed"
        },
        {
          "name": "test_get_storage_type_mapping_values_format",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestStorageTypeMapping::test_get_storage_type_mapping_values_format",
          "state": "passed"
        },
        {
          "name": "test_get_storage_type_mapping_immutable_reference",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestStorageTypeMapping::test_get_storage_type_mapping_immutable_reference",
          "state": "passed"
        },
        {
          "name": "test_get_storage_class_successful_import",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetStorageClass::test_get_storage_class_successful_import",
          "state": "passed"
        },
        {
          "name": "test_get_storage_class_unsupported_type",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetStorageClass::test_get_storage_class_unsupported_type",
          "state": "passed"
        },
        {
          "name": "test_get_storage_class_import_error",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetStorageClass::test_get_storage_class_import_error",
          "state": "passed"
        },
        {
          "name": "test_get_storage_class_attribute_error",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetStorageClass::test_get_storage_class_attribute_error",
          "state": "passed"
        },
        {
          "name": "test_get_storage_class_all_supported_types",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetStorageClass::test_get_storage_class_all_supported_types",
          "state": "passed"
        },
        {
          "name": "test_get_storage_class_debug_logging",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetStorageClass::test_get_storage_class_debug_logging",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_basic_success",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_basic_success",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_default_postgres",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_default_postgres",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_mode_parameter",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_mode_parameter",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_schema_parameter",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_schema_parameter",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_table_name_generation",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_table_name_generation",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_config_override",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_config_override",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_db_url_parameter",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_db_url_parameter",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_signature_introspection_error",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_signature_introspection_error",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_instantiation_error",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_instantiation_error",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_logging",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_logging",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_error_logging",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_error_logging",
          "state": "passed"
        },
        {
          "name": "test_create_dynamic_storage_complex_parameters",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestCreateDynamicStorage::test_create_dynamic_storage_complex_parameters",
          "state": "passed"
        },
        {
          "name": "test_get_supported_storage_types_returns_list",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetSupportedStorageTypes::test_get_supported_storage_types_returns_list",
          "state": "passed"
        },
        {
          "name": "test_get_supported_storage_types_contains_expected_types",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetSupportedStorageTypes::test_get_supported_storage_types_contains_expected_types",
          "state": "passed"
        },
        {
          "name": "test_get_supported_storage_types_matches_mapping",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetSupportedStorageTypes::test_get_supported_storage_types_matches_mapping",
          "state": "passed"
        },
        {
          "name": "test_get_supported_storage_types_immutable",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestGetSupportedStorageTypes::test_get_supported_storage_types_immutable",
          "state": "passed"
        },
        {
          "name": "test_validate_storage_config_valid_postgres",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestValidateStorageConfig::test_validate_storage_config_valid_postgres",
          "state": "passed"
        },
        {
          "name": "test_validate_storage_config_valid_sqlite",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestValidateStorageConfig::test_validate_storage_config_valid_sqlite",
          "state": "passed"
        },
        {
          "name": "test_validate_storage_config_unsupported_type",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestValidateStorageConfig::test_validate_storage_config_unsupported_type",
          "state": "passed"
        },
        {
          "name": "test_validate_storage_config_default_postgres",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestValidateStorageConfig::test_validate_storage_config_default_postgres",
          "state": "passed"
        },
        {
          "name": "test_validate_storage_config_empty_config",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestValidateStorageConfig::test_validate_storage_config_empty_config",
          "state": "passed"
        },
        {
          "name": "test_validate_storage_config_all_supported_types",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestValidateStorageConfig::test_validate_storage_config_all_supported_types",
          "state": "passed"
        },
        {
          "name": "test_validate_storage_config_complex_config",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestValidateStorageConfig::test_validate_storage_config_complex_config",
          "state": "passed"
        },
        {
          "name": "test_validate_storage_config_result_structure",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestValidateStorageConfig::test_validate_storage_config_result_structure",
          "state": "passed"
        },
        {
          "name": "test_integration_agent_storage_creation",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestIntegrationScenarios::test_integration_agent_storage_creation",
          "state": "passed"
        },
        {
          "name": "test_integration_team_storage_creation",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestIntegrationScenarios::test_integration_team_storage_creation",
          "state": "passed"
        },
        {
          "name": "test_integration_workflow_storage_creation",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestIntegrationScenarios::test_integration_workflow_storage_creation",
          "state": "passed"
        },
        {
          "name": "test_end_to_end_validation_and_creation_success",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestIntegrationScenarios::test_end_to_end_validation_and_creation_success",
          "state": "passed"
        },
        {
          "name": "test_end_to_end_validation_and_creation_failure",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestIntegrationScenarios::test_end_to_end_validation_and_creation_failure",
          "state": "passed"
        },
        {
          "name": "test_storage_type_consistency",
          "fullName": "tests/lib_utils/test_agno_storage_utils.py::TestIntegrationScenarios::test_storage_type_consistency",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_comprehensive_utils.py",
      "tests": [
        {
          "name": "test_real_yaml_loading",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestYAMLCacheIntegration::test_real_yaml_loading",
          "state": "passed"
        },
        {
          "name": "test_nonexistent_yaml_file",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestYAMLCacheIntegration::test_nonexistent_yaml_file",
          "state": "passed"
        },
        {
          "name": "test_convenience_functions",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestYAMLCacheIntegration::test_convenience_functions",
          "state": "passed"
        },
        {
          "name": "test_discover_components_basic",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestYAMLCacheIntegration::test_discover_components_basic",
          "state": "passed"
        },
        {
          "name": "test_cache_stats",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestYAMLCacheIntegration::test_cache_stats",
          "state": "passed"
        },
        {
          "name": "test_cache_clear",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestYAMLCacheIntegration::test_cache_clear",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_creation",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestEmojiLoader::test_emoji_loader_creation",
          "state": "passed"
        },
        {
          "name": "test_auto_emoji_function",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestEmojiLoader::test_auto_emoji_function",
          "state": "passed"
        },
        {
          "name": "test_get_path_emoji",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestEmojiLoader::test_get_path_emoji",
          "state": "passed"
        },
        {
          "name": "test_get_keyword_emoji",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestEmojiLoader::test_get_keyword_emoji",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_has_emoji",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestEmojiLoader::test_emoji_loader_has_emoji",
          "state": "passed"
        },
        {
          "name": "test_version_factory_creation",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestVersionFactory::test_version_factory_creation",
          "state": "passed"
        },
        {
          "name": "test_version_comparison_basic",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestVersionFactory::test_version_comparison_basic",
          "state": "passed"
        },
        {
          "name": "test_import_agno_proxy",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_agno_proxy",
          "state": "passed"
        },
        {
          "name": "test_import_agno_storage_utils",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_agno_storage_utils",
          "state": "passed"
        },
        {
          "name": "test_import_config_inheritance",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_config_inheritance",
          "state": "passed"
        },
        {
          "name": "test_import_config_migration",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_config_migration",
          "state": "passed"
        },
        {
          "name": "test_import_config_validator",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_config_validator",
          "state": "passed"
        },
        {
          "name": "test_import_db_migration",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_db_migration",
          "state": "passed"
        },
        {
          "name": "test_import_message_validation",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_message_validation",
          "state": "passed"
        },
        {
          "name": "test_import_team_utils",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_team_utils",
          "state": "passed"
        },
        {
          "name": "test_import_user_context_helper",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_user_context_helper",
          "state": "passed"
        },
        {
          "name": "test_import_startup_display",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_startup_display",
          "state": "passed"
        },
        {
          "name": "test_import_startup_orchestration",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsModuleImports::test_import_startup_orchestration",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_invalid_yaml",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsErrorHandling::test_yaml_cache_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_invalid_yaml",
          "fullName": "tests/lib_utils/test_comprehensive_utils.py::TestUtilsErrorHandling::test_emoji_loader_invalid_yaml",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_config_inheritance_comprehensive.py",
      "tests": [
        {
          "name": "test_init_manager",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_init_manager",
          "state": "passed"
        },
        {
          "name": "test_parameter_sets_complete",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_parameter_sets_complete",
          "state": "passed"
        },
        {
          "name": "test_extract_team_defaults_complete",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_extract_team_defaults_complete",
          "state": "passed"
        },
        {
          "name": "test_extract_team_defaults_partial",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_extract_team_defaults_partial",
          "state": "passed"
        },
        {
          "name": "test_extract_team_defaults_empty_categories",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_extract_team_defaults_empty_categories",
          "state": "passed"
        },
        {
          "name": "test_apply_inheritance_to_agent_complete",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_apply_inheritance_to_agent_complete",
          "state": "passed"
        },
        {
          "name": "test_apply_inheritance_to_agent_no_overrides",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_apply_inheritance_to_agent_no_overrides",
          "state": "passed"
        },
        {
          "name": "test_apply_inheritance_to_agent_deep_copy",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_apply_inheritance_to_agent_deep_copy",
          "state": "passed"
        },
        {
          "name": "test_apply_inheritance_full_workflow",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_apply_inheritance_full_workflow",
          "state": "passed"
        },
        {
          "name": "test_apply_inheritance_with_errors",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_apply_inheritance_with_errors",
          "state": "passed"
        },
        {
          "name": "test_validate_configuration_team_only_violations",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_validate_configuration_team_only_violations",
          "state": "passed"
        },
        {
          "name": "test_validate_configuration_missing_agent_id",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_validate_configuration_missing_agent_id",
          "state": "passed"
        },
        {
          "name": "test_check_configuration_drift_excessive_variation",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_check_configuration_drift_excessive_variation",
          "state": "passed"
        },
        {
          "name": "test_check_configuration_drift_acceptable_variation",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_check_configuration_drift_acceptable_variation",
          "state": "passed"
        },
        {
          "name": "test_check_configuration_drift_missing_memory",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_check_configuration_drift_missing_memory",
          "state": "passed"
        },
        {
          "name": "test_validate_configuration_comprehensive",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_validate_configuration_comprehensive",
          "state": "passed"
        },
        {
          "name": "test_generate_inheritance_report_with_inheritance",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_generate_inheritance_report_with_inheritance",
          "state": "passed"
        },
        {
          "name": "test_generate_inheritance_report_no_inheritance",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_generate_inheritance_report_no_inheritance",
          "state": "passed"
        },
        {
          "name": "test_generate_inheritance_report_detailed_breakdown",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_generate_inheritance_report_detailed_breakdown",
          "state": "passed"
        },
        {
          "name": "test_logging_behavior",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestConfigInheritanceManager::test_logging_behavior",
          "state": "passed"
        },
        {
          "name": "test_load_template_success",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestTemplateFunctions::test_load_template_success",
          "state": "passed"
        },
        {
          "name": "test_load_template_file_not_found",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestTemplateFunctions::test_load_template_file_not_found",
          "state": "passed"
        },
        {
          "name": "test_load_template_invalid_yaml",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestTemplateFunctions::test_load_template_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_create_from_template_no_overrides",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestTemplateFunctions::test_create_from_template_no_overrides",
          "state": "passed"
        },
        {
          "name": "test_create_from_template_with_overrides",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestTemplateFunctions::test_create_from_template_with_overrides",
          "state": "passed"
        },
        {
          "name": "test_create_from_template_deep_copy",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestTemplateFunctions::test_create_from_template_deep_copy",
          "state": "passed"
        },
        {
          "name": "test_deep_merge_simple",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestDeepMergeFunction::test_deep_merge_simple",
          "state": "passed"
        },
        {
          "name": "test_deep_merge_nested_dicts",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestDeepMergeFunction::test_deep_merge_nested_dicts",
          "state": "passed"
        },
        {
          "name": "test_deep_merge_replace_non_dict",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestDeepMergeFunction::test_deep_merge_replace_non_dict",
          "state": "passed"
        },
        {
          "name": "test_deep_merge_deeply_nested",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestDeepMergeFunction::test_deep_merge_deeply_nested",
          "state": "passed"
        },
        {
          "name": "test_deep_merge_empty_dicts",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestDeepMergeFunction::test_deep_merge_empty_dicts",
          "state": "passed"
        },
        {
          "name": "test_deep_merge_none_values",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestDeepMergeFunction::test_deep_merge_none_values",
          "state": "passed"
        },
        {
          "name": "test_load_team_with_inheritance_success",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestLoadTeamWithInheritance::test_load_team_with_inheritance_success",
          "state": "passed"
        },
        {
          "name": "test_load_team_with_inheritance_missing_team_file",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestLoadTeamWithInheritance::test_load_team_with_inheritance_missing_team_file",
          "state": "passed"
        },
        {
          "name": "test_load_team_with_inheritance_missing_agent_files",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestLoadTeamWithInheritance::test_load_team_with_inheritance_missing_agent_files",
          "state": "passed"
        },
        {
          "name": "test_load_team_with_inheritance_no_members",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestLoadTeamWithInheritance::test_load_team_with_inheritance_no_members",
          "state": "passed"
        },
        {
          "name": "test_load_team_with_inheritance_validation_errors",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestLoadTeamWithInheritance::test_load_team_with_inheritance_validation_errors",
          "state": "passed"
        },
        {
          "name": "test_load_team_with_inheritance_logging",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestLoadTeamWithInheritance::test_load_team_with_inheritance_logging",
          "state": "passed"
        },
        {
          "name": "test_large_configuration_performance",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestEdgeCasesAndPerformance::test_large_configuration_performance",
          "state": "passed"
        },
        {
          "name": "test_circular_reference_prevention",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestEdgeCasesAndPerformance::test_circular_reference_prevention",
          "state": "passed"
        },
        {
          "name": "test_memory_efficiency",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestEdgeCasesAndPerformance::test_memory_efficiency",
          "state": "passed"
        },
        {
          "name": "test_unicode_and_special_characters",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestEdgeCasesAndPerformance::test_unicode_and_special_characters",
          "state": "passed"
        },
        {
          "name": "test_empty_and_null_values",
          "fullName": "tests/lib_utils/test_config_inheritance_comprehensive.py::TestEdgeCasesAndPerformance::test_empty_and_null_values",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_config_migration_comprehensive.py",
      "tests": [
        {
          "name": "test_migrator_initialization_defaults",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrator_initialization_defaults",
          "state": "passed"
        },
        {
          "name": "test_migrator_initialization_custom_path",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrator_initialization_custom_path",
          "state": "passed"
        },
        {
          "name": "test_migrator_backup_directory_naming",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrator_backup_directory_naming",
          "state": "passed"
        },
        {
          "name": "test_create_backup_success",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_create_backup_success",
          "state": "passed"
        },
        {
          "name": "test_create_backup_missing_directories",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_create_backup_missing_directories",
          "state": "passed"
        },
        {
          "name": "test_create_migration_plan_with_redundant_params",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_create_migration_plan_with_redundant_params",
          "state": "passed"
        },
        {
          "name": "test_create_migration_plan_no_inheritable_params",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_create_migration_plan_no_inheritable_params",
          "state": "passed"
        },
        {
          "name": "test_create_migration_plan_missing_category",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_create_migration_plan_missing_category",
          "state": "passed"
        },
        {
          "name": "test_apply_migration_to_agent_removes_redundant",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_apply_migration_to_agent_removes_redundant",
          "state": "passed"
        },
        {
          "name": "test_apply_migration_empty_category_removal",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_apply_migration_empty_category_removal",
          "state": "passed"
        },
        {
          "name": "test_generate_config_with_comments",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_generate_config_with_comments",
          "state": "passed"
        },
        {
          "name": "test_generate_config_with_no_comments",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_generate_config_with_no_comments",
          "state": "passed"
        },
        {
          "name": "test_migrate_team_success",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrate_team_success",
          "state": "passed"
        },
        {
          "name": "test_migrate_team_no_members",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrate_team_no_members",
          "state": "passed"
        },
        {
          "name": "test_migrate_team_missing_member_configs",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrate_team_missing_member_configs",
          "state": "passed"
        },
        {
          "name": "test_migrate_team_file_not_found",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrate_team_file_not_found",
          "state": "passed"
        },
        {
          "name": "test_migrate_all_teams_success",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrate_all_teams_success",
          "state": "passed"
        },
        {
          "name": "test_migrate_all_teams_with_errors",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrate_all_teams_with_errors",
          "state": "passed"
        },
        {
          "name": "test_migrate_all_teams_no_teams",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrate_all_teams_no_teams",
          "state": "passed"
        },
        {
          "name": "test_migrate_all_teams_creates_backup_in_execute_mode",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migrate_all_teams_creates_backup_in_execute_mode",
          "state": "passed"
        },
        {
          "name": "test_restore_from_backup_success",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_restore_from_backup_success",
          "state": "passed"
        },
        {
          "name": "test_restore_from_backup_missing_backup_dir",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_restore_from_backup_missing_backup_dir",
          "state": "passed"
        },
        {
          "name": "test_restore_from_backup_partial_backup",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_restore_from_backup_partial_backup",
          "state": "passed"
        },
        {
          "name": "test_generate_migration_report_with_migrations",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_generate_migration_report_with_migrations",
          "state": "passed"
        },
        {
          "name": "test_generate_migration_report_no_migrations",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_generate_migration_report_no_migrations",
          "state": "passed"
        },
        {
          "name": "test_generate_migration_report_calculation_accuracy",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_generate_migration_report_calculation_accuracy",
          "state": "passed"
        },
        {
          "name": "test_migration_log_tracking",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestAGNOConfigMigrator::test_migration_log_tracking",
          "state": "passed"
        },
        {
          "name": "test_migrate_configurations_default_params",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMigrateConfigurationsFunction::test_migrate_configurations_default_params",
          "state": "passed"
        },
        {
          "name": "test_migrate_configurations_specific_team",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMigrateConfigurationsFunction::test_migrate_configurations_specific_team",
          "state": "passed"
        },
        {
          "name": "test_migrate_configurations_execute_mode",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMigrateConfigurationsFunction::test_migrate_configurations_execute_mode",
          "state": "passed"
        },
        {
          "name": "test_migrate_configurations_custom_path",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMigrateConfigurationsFunction::test_migrate_configurations_custom_path",
          "state": "passed"
        },
        {
          "name": "test_migrate_configurations_with_errors",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMigrateConfigurationsFunction::test_migrate_configurations_with_errors",
          "state": "passed"
        },
        {
          "name": "test_migrator_with_invalid_yaml_files",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestEdgeCasesAndErrorHandling::test_migrator_with_invalid_yaml_files",
          "state": "passed"
        },
        {
          "name": "test_migrator_with_corrupted_agent_config",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestEdgeCasesAndErrorHandling::test_migrator_with_corrupted_agent_config",
          "state": "passed"
        },
        {
          "name": "test_migrator_with_missing_config_inheritance_module",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestEdgeCasesAndErrorHandling::test_migrator_with_missing_config_inheritance_module",
          "state": "passed"
        },
        {
          "name": "test_apply_migration_with_file_write_error",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestEdgeCasesAndErrorHandling::test_apply_migration_with_file_write_error",
          "state": "passed"
        },
        {
          "name": "test_backup_creation_with_permission_errors",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestEdgeCasesAndErrorHandling::test_backup_creation_with_permission_errors",
          "state": "passed"
        },
        {
          "name": "test_restore_with_existing_target_directories",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestEdgeCasesAndErrorHandling::test_restore_with_existing_target_directories",
          "state": "passed"
        },
        {
          "name": "test_migration_plan_with_deeply_nested_config",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestEdgeCasesAndErrorHandling::test_migration_plan_with_deeply_nested_config",
          "state": "passed"
        },
        {
          "name": "test_yaml_comment_injection_edge_cases",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestEdgeCasesAndErrorHandling::test_yaml_comment_injection_edge_cases",
          "state": "passed"
        },
        {
          "name": "test_main_script_argument_parsing",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMainScriptExecution::test_main_script_argument_parsing",
          "state": "passed"
        },
        {
          "name": "test_main_script_logic_simulation",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMainScriptExecution::test_main_script_logic_simulation",
          "state": "passed"
        },
        {
          "name": "test_main_script_error_handling",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMainScriptExecution::test_main_script_error_handling",
          "state": "passed"
        },
        {
          "name": "test_main_script_restore_functionality",
          "fullName": "tests/lib_utils/test_config_migration_comprehensive.py::TestMainScriptExecution::test_main_script_restore_functionality",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_config_validator.py",
      "tests": [
        {
          "name": "test_validation_result_creation",
          "fullName": "tests/lib_utils/test_config_validator.py::TestValidationResult::test_validation_result_creation",
          "state": "passed"
        },
        {
          "name": "test_validation_result_with_drift",
          "fullName": "tests/lib_utils/test_config_validator.py::TestValidationResult::test_validation_result_with_drift",
          "state": "passed"
        },
        {
          "name": "test_validator_initialization",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validator_initialization",
          "state": "passed"
        },
        {
          "name": "test_validator_default_initialization",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validator_default_initialization",
          "state": "passed"
        },
        {
          "name": "test_validate_all_configurations_success",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_all_configurations_success",
          "state": "passed"
        },
        {
          "name": "test_validate_team_configuration_success",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_team_configuration_success",
          "state": "passed"
        },
        {
          "name": "test_validate_team_configuration_missing_file",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_team_configuration_missing_file",
          "state": "passed"
        },
        {
          "name": "test_validate_team_configuration_invalid_yaml",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_team_configuration_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_validate_agent_configuration_success",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_agent_configuration_success",
          "state": "passed"
        },
        {
          "name": "test_validate_agent_configuration_missing_file",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_agent_configuration_missing_file",
          "state": "passed"
        },
        {
          "name": "test_validate_agent_configuration_invalid_yaml",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_agent_configuration_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_detect_configuration_drift_no_drift",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_detect_configuration_drift_no_drift",
          "state": "passed"
        },
        {
          "name": "test_detect_configuration_drift_with_drift",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_detect_configuration_drift_with_drift",
          "state": "passed"
        },
        {
          "name": "test_validate_team_structure_missing_required_fields",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_team_structure_missing_required_fields",
          "state": "passed"
        },
        {
          "name": "test_validate_team_structure_no_members",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_team_structure_no_members",
          "state": "passed"
        },
        {
          "name": "test_validate_team_structure_missing_member_config",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_team_structure_missing_member_config",
          "state": "passed"
        },
        {
          "name": "test_validate_team_structure_dev_version",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_team_structure_dev_version",
          "state": "passed"
        },
        {
          "name": "test_validate_team_structure_no_version",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_team_structure_no_version",
          "state": "passed"
        },
        {
          "name": "test_validate_agent_structure_missing_required_fields",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_agent_structure_missing_required_fields",
          "state": "passed"
        },
        {
          "name": "test_validate_agent_structure_id_mismatch",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_agent_structure_id_mismatch",
          "state": "passed"
        },
        {
          "name": "test_validate_agent_structure_table_name_issues",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_agent_structure_table_name_issues",
          "state": "passed"
        },
        {
          "name": "test_validate_agent_structure_table_name_suggestion",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_agent_structure_table_name_suggestion",
          "state": "passed"
        },
        {
          "name": "test_validate_inheritance_compliance_success",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_inheritance_compliance_success",
          "state": "passed"
        },
        {
          "name": "test_validate_inheritance_compliance_with_errors",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_inheritance_compliance_with_errors",
          "state": "passed"
        },
        {
          "name": "test_validate_inheritance_compliance_high_redundancy",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_inheritance_compliance_high_redundancy",
          "state": "passed"
        },
        {
          "name": "test_validate_inheritance_compliance_exception",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_inheritance_compliance_exception",
          "state": "passed"
        },
        {
          "name": "test_validate_project_consistency_orphaned_agents",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_validate_project_consistency_orphaned_agents",
          "state": "passed"
        },
        {
          "name": "test_collect_all_configurations",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_collect_all_configurations",
          "state": "passed"
        },
        {
          "name": "test_collect_all_configurations_with_invalid_files",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_collect_all_configurations_with_invalid_files",
          "state": "passed"
        },
        {
          "name": "test_analyze_parameter_drift_no_drift",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_analyze_parameter_drift_no_drift",
          "state": "passed"
        },
        {
          "name": "test_analyze_parameter_drift_with_drift",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_analyze_parameter_drift_with_drift",
          "state": "passed"
        },
        {
          "name": "test_analyze_parameter_drift_medium_severity",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_analyze_parameter_drift_medium_severity",
          "state": "passed"
        },
        {
          "name": "test_analyze_parameter_drift_high_severity",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_analyze_parameter_drift_high_severity",
          "state": "passed"
        },
        {
          "name": "test_analyze_parameter_drift_missing_values",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_analyze_parameter_drift_missing_values",
          "state": "passed"
        },
        {
          "name": "test_find_standalone_agents",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_find_standalone_agents",
          "state": "passed"
        },
        {
          "name": "test_find_standalone_agents_with_invalid_team_config",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_find_standalone_agents_with_invalid_team_config",
          "state": "passed"
        },
        {
          "name": "test_has_nested_field_exists",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_has_nested_field_exists",
          "state": "passed"
        },
        {
          "name": "test_has_nested_field_missing",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_has_nested_field_missing",
          "state": "passed"
        },
        {
          "name": "test_get_nested_value_exists",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_get_nested_value_exists",
          "state": "passed"
        },
        {
          "name": "test_get_nested_value_missing",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_get_nested_value_missing",
          "state": "passed"
        },
        {
          "name": "test_get_nested_value_type_error",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_get_nested_value_type_error",
          "state": "passed"
        },
        {
          "name": "test_merge_results",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_merge_results",
          "state": "passed"
        },
        {
          "name": "test_merge_results_keeps_validity",
          "fullName": "tests/lib_utils/test_config_validator.py::TestAGNOConfigValidator::test_merge_results_keeps_validity",
          "state": "passed"
        },
        {
          "name": "test_validate_configurations_success",
          "fullName": "tests/lib_utils/test_config_validator.py::TestValidateConfigurationsCLI::test_validate_configurations_success",
          "state": "passed"
        },
        {
          "name": "test_validate_configurations_with_errors",
          "fullName": "tests/lib_utils/test_config_validator.py::TestValidateConfigurationsCLI::test_validate_configurations_with_errors",
          "state": "passed"
        },
        {
          "name": "test_validate_configurations_valid_with_warnings",
          "fullName": "tests/lib_utils/test_config_validator.py::TestValidateConfigurationsCLI::test_validate_configurations_valid_with_warnings",
          "state": "passed"
        },
        {
          "name": "test_cli_argument_parser_exists",
          "fullName": "tests/lib_utils/test_config_validator.py::TestCLIMainBasic::test_cli_argument_parser_exists",
          "state": "passed"
        },
        {
          "name": "test_empty_directories",
          "fullName": "tests/lib_utils/test_config_validator.py::TestEdgeCasesAndErrorHandling::test_empty_directories",
          "state": "passed"
        },
        {
          "name": "test_missing_directories",
          "fullName": "tests/lib_utils/test_config_validator.py::TestEdgeCasesAndErrorHandling::test_missing_directories",
          "state": "passed"
        },
        {
          "name": "test_yaml_loading_with_special_characters",
          "fullName": "tests/lib_utils/test_config_validator.py::TestEdgeCasesAndErrorHandling::test_yaml_loading_with_special_characters",
          "state": "passed"
        },
        {
          "name": "test_deeply_nested_configurations",
          "fullName": "tests/lib_utils/test_config_validator.py::TestEdgeCasesAndErrorHandling::test_deeply_nested_configurations",
          "state": "passed"
        },
        {
          "name": "test_file_permission_errors",
          "fullName": "tests/lib_utils/test_config_validator.py::TestEdgeCasesAndErrorHandling::test_file_permission_errors",
          "state": "passed"
        },
        {
          "name": "test_large_configuration_files",
          "fullName": "tests/lib_utils/test_config_validator.py::TestEdgeCasesAndErrorHandling::test_large_configuration_files",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_db_migration_comprehensive.py",
      "tests": [
        {
          "name": "test_check_and_run_migrations_no_database_url",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckAndRunMigrations::test_check_and_run_migrations_no_database_url",
          "state": "passed"
        },
        {
          "name": "test_check_and_run_migrations_database_connection_failure",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckAndRunMigrations::test_check_and_run_migrations_database_connection_failure",
          "state": "passed"
        },
        {
          "name": "test_check_and_run_migrations_schema_missing",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckAndRunMigrations::test_check_and_run_migrations_schema_missing",
          "state": "passed"
        },
        {
          "name": "test_check_and_run_migrations_table_missing",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckAndRunMigrations::test_check_and_run_migrations_table_missing",
          "state": "passed"
        },
        {
          "name": "test_check_and_run_migrations_migration_needed",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckAndRunMigrations::test_check_and_run_migrations_migration_needed",
          "state": "passed"
        },
        {
          "name": "test_check_and_run_migrations_up_to_date",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckAndRunMigrations::test_check_and_run_migrations_up_to_date",
          "state": "passed"
        },
        {
          "name": "test_check_and_run_migrations_general_exception",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckAndRunMigrations::test_check_and_run_migrations_general_exception",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_migration_needed",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckMigrationStatus::test_check_migration_status_migration_needed",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_up_to_date",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckMigrationStatus::test_check_migration_status_up_to_date",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_no_current_revision",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckMigrationStatus::test_check_migration_status_no_current_revision",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_exception",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestCheckMigrationStatus::test_check_migration_status_exception",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_success",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestRunMigrations::test_run_migrations_success",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_alembic_failure",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestRunMigrations::test_run_migrations_alembic_failure",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_timeout_error",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestRunMigrations::test_run_migrations_timeout_error",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_general_exception",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestRunMigrations::test_run_migrations_general_exception",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_sync_success",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestRunMigrationsSync::test_run_migrations_sync_success",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_sync_runtime_error_thread_execution",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestRunMigrationsSync::test_run_migrations_sync_runtime_error_thread_execution",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_sync_event_loop_failure",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestRunMigrationsSync::test_run_migrations_sync_event_loop_failure",
          "state": "passed"
        },
        {
          "name": "test_full_migration_workflow_new_database",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestDatabaseMigrationIntegration::test_full_migration_workflow_new_database",
          "state": "passed"
        },
        {
          "name": "test_full_migration_workflow_existing_database",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestDatabaseMigrationIntegration::test_full_migration_workflow_existing_database",
          "state": "passed"
        },
        {
          "name": "test_database_url_with_different_schemes",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestErrorHandlingAndEdgeCases::test_database_url_with_different_schemes",
          "state": "passed"
        },
        {
          "name": "test_alembic_configuration_path_variations",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestErrorHandlingAndEdgeCases::test_alembic_configuration_path_variations",
          "state": "passed"
        },
        {
          "name": "test_migration_with_empty_database_url",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestErrorHandlingAndEdgeCases::test_migration_with_empty_database_url",
          "state": "passed"
        },
        {
          "name": "test_concurrent_migration_execution",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestErrorHandlingAndEdgeCases::test_concurrent_migration_execution",
          "state": "passed"
        },
        {
          "name": "test_migration_status_with_version_table_schema",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestErrorHandlingAndEdgeCases::test_migration_status_with_version_table_schema",
          "state": "passed"
        },
        {
          "name": "test_migration_thread_pool_exception_handling",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestErrorHandlingAndEdgeCases::test_migration_thread_pool_exception_handling",
          "state": "passed"
        },
        {
          "name": "test_migration_logging_levels",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestLoggingAndMonitoring::test_migration_logging_levels",
          "state": "passed"
        },
        {
          "name": "test_migration_status_detailed_logging",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::TestLoggingAndMonitoring::test_migration_status_detailed_logging",
          "state": "passed"
        },
        {
          "name": "test_store_successful_patterns",
          "fullName": "tests/lib_utils/test_db_migration_comprehensive.py::test_store_successful_patterns",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_emoji_loader_comprehensive.py",
      "tests": [
        {
          "name": "test_emoji_loader_initialization",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_initialization",
          "state": "passed"
        },
        {
          "name": "test_get_emoji_loader_singleton",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_get_emoji_loader_singleton",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_config_loading_success",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_config_loading_success",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_config_file_not_found",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_config_file_not_found",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_invalid_yaml",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_auto_emoji_function_with_config",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_auto_emoji_function_with_config",
          "state": "passed"
        },
        {
          "name": "test_auto_emoji_function_without_config",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_auto_emoji_function_without_config",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_pattern_matching",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_pattern_matching",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_config_path_resolution",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_config_path_resolution",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_lazy_initialization",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_lazy_initialization",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_file_permissions_error",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_file_permissions_error",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_yaml_parsing_error",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_yaml_parsing_error",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_empty_config_file",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_empty_config_file",
          "state": "passed"
        },
        {
          "name": "test_auto_emoji_edge_cases",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_auto_emoji_edge_cases",
          "state": "passed"
        },
        {
          "name": "test_emoji_config_structure_validation",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_config_structure_validation",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_multiple_pattern_matches",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_multiple_pattern_matches",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_performance_with_large_config",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_performance_with_large_config",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_unicode_handling",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_unicode_handling",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_config_caching",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderComprehensive::test_emoji_loader_config_caching",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_with_logging",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderIntegration::test_emoji_loader_with_logging",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_with_real_file_paths",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderIntegration::test_emoji_loader_with_real_file_paths",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_thread_safety",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderIntegration::test_emoji_loader_thread_safety",
          "state": "passed"
        },
        {
          "name": "test_emoji_loader_memory_usage",
          "fullName": "tests/lib_utils/test_emoji_loader_comprehensive.py::TestEmojiLoaderIntegration::test_emoji_loader_memory_usage",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_proxy_agents.py",
      "tests": [
        {
          "name": "test_module_import",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestProxyAgentsImports::test_module_import",
          "state": "passed"
        },
        {
          "name": "test_agno_imports",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestProxyAgentsImports::test_agno_imports",
          "state": "passed"
        },
        {
          "name": "test_utility_imports",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestProxyAgentsImports::test_utility_imports",
          "state": "passed"
        },
        {
          "name": "test_agent_config_structure",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestProxyAgentConfiguration::test_agent_config_structure",
          "state": "passed"
        },
        {
          "name": "test_agent_config_validation",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestProxyAgentConfiguration::test_agent_config_validation",
          "state": "passed"
        },
        {
          "name": "test_tools_configuration",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestProxyAgentConfiguration::test_tools_configuration",
          "state": "passed"
        },
        {
          "name": "test_proxy_initialization",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyInitialization::test_proxy_initialization",
          "state": "passed"
        },
        {
          "name": "test_parameter_discovery_fallback",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyInitialization::test_parameter_discovery_fallback",
          "state": "passed"
        },
        {
          "name": "test_custom_parameter_handlers_initialization",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyInitialization::test_custom_parameter_handlers_initialization",
          "state": "passed"
        },
        {
          "name": "test_get_supported_parameters",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyInitialization::test_get_supported_parameters",
          "state": "passed"
        },
        {
          "name": "test_create_agent_basic",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyCreateAgent::test_create_agent_basic",
          "state": "passed"
        },
        {
          "name": "test_create_agent_with_session_and_debug",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyCreateAgent::test_create_agent_with_session_and_debug",
          "state": "passed"
        },
        {
          "name": "test_create_agent_none_config_error",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyCreateAgent::test_create_agent_none_config_error",
          "state": "passed"
        },
        {
          "name": "test_create_agent_with_metrics_service",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyCreateAgent::test_create_agent_with_metrics_service",
          "state": "passed"
        },
        {
          "name": "test_create_agent_creation_error",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestAgnoAgentProxyCreateAgent::test_create_agent_creation_error",
          "state": "passed"
        },
        {
          "name": "test_process_config_direct_mapping",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestConfigurationProcessing::test_process_config_direct_mapping",
          "state": "passed"
        },
        {
          "name": "test_process_config_with_custom_handlers",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestConfigurationProcessing::test_process_config_with_custom_handlers",
          "state": "failed",
          "errors": [
            {
              "message": "self = <MagicMock name='_handle_model_config' id='136013458073184'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected '_handle_model_config' to have been called once. Called 0 times.\n\n/usr/lib/python3.12/unittest/mock.py:923: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.lib_utils.test_proxy_agents.TestConfigurationProcessing object at 0x7bb41b6ef440>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb419da4980>\n\n    def test_process_config_with_custom_handlers(self, proxy):\n        \"\"\"Test config processing with custom handlers.\"\"\"\n        config = {\n            \"model\": {\"id\": \"claude-sonnet-4-20250514\", \"temperature\": 0.7},\n            \"agent\": {\"name\": \"Test Agent\", \"version\": 1},\n            \"storage\": {\"type\": \"sqlite\"},\n        }\n    \n        with patch(\"lib.utils.proxy_agents.AgnoAgentProxy._handle_model_config\", return_value=\"mock_model\") as mock_model_handler, \\\n             patch(\"lib.utils.proxy_agents.AgnoAgentProxy._handle_agent_metadata\", return_value={\"name\": \"Test Agent\"}) as mock_agent_handler, \\\n             patch(\"lib.utils.proxy_agents.AgnoAgentProxy._handle_storage_config\", return_value=\"mock_storage\") as mock_storage_handler:\n    \n            processed = proxy._process_config(config, \"test-agent\", None)\n    \n>           mock_model_handler.assert_called_once()\nE           AssertionError: Expected '_handle_model_config' to have been called once. Called 0 times.\n\ntests/lib_utils/test_proxy_agents.py:353: AssertionError"
            }
          ]
        },
        {
          "name": "test_validate_config",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestConfigurationProcessing::test_validate_config",
          "state": "passed"
        },
        {
          "name": "test_handle_model_config",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_model_config",
          "state": "passed"
        },
        {
          "name": "test_handle_storage_config",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_storage_config",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_enabled",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_memory_config_enabled",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_disabled",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_memory_config_disabled",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_none",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_memory_config_none",
          "state": "passed"
        },
        {
          "name": "test_handle_agent_metadata",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_agent_metadata",
          "state": "passed"
        },
        {
          "name": "test_handle_agent_metadata_defaults",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_agent_metadata_defaults",
          "state": "passed"
        },
        {
          "name": "test_handle_custom_metadata",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_custom_metadata",
          "state": "passed"
        },
        {
          "name": "test_handle_display_section_valid",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_display_section_valid",
          "state": "passed"
        },
        {
          "name": "test_handle_display_section_invalid",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_display_section_invalid",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_success",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_knowledge_filter_success",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_config_error",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_knowledge_filter_config_error",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_no_db_url",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_knowledge_filter_no_db_url",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_warns_agent_csv_path",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestCustomParameterHandlers::test_handle_knowledge_filter_warns_agent_csv_path",
          "state": "passed"
        },
        {
          "name": "test_wrap_agent_with_metrics_sync",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_wrap_agent_with_metrics_sync",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents.TestMetricsWrapping object at 0x7bb41b512ed0>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41b66ef00>\nmock_agent = <MagicMock id='136013484052064'>\nmock_metrics_service = <MagicMock id='136013455879648'>\n\n    def test_wrap_agent_with_metrics_sync(self, proxy, mock_agent, mock_metrics_service):\n        \"\"\"Test wrapping agent with metrics for synchronous execution.\"\"\"\n        config = {\"agent\": {\"name\": \"Test Agent\"}}\n    \n        wrapped_agent = proxy._wrap_agent_with_metrics(\n            mock_agent, \"test-agent\", config, mock_metrics_service\n        )\n    \n        # Test that the agent is returned (same instance, but run method is wrapped)\n        assert wrapped_agent == mock_agent\n    \n        # Test wrapped run method\n        result = wrapped_agent.run(\"test_input\")\n        assert result == \"test_response\"\n    \n        # Verify original run was called\n>       mock_agent.run.assert_called_once_with(\"test_input\")\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'function' object has no attribute 'assert_called_once_with'\n\ntests/lib_utils/test_proxy_agents.py:630: AttributeError"
            }
          ]
        },
        {
          "name": "test_wrap_agent_with_metrics_async",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_wrap_agent_with_metrics_async",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents.TestMetricsWrapping object at 0x7bb41b5130e0>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb419b6fd10>\nmock_agent = <MagicMock id='136013455749008'>\nmock_metrics_service = <MagicMock id='136013470427920'>\n\n    async def test_wrap_agent_with_metrics_async(self, proxy, mock_agent, mock_metrics_service):\n        \"\"\"Test wrapping agent with metrics for asynchronous execution.\"\"\"\n        config = {\"agent\": {\"name\": \"Test Agent\"}}\n    \n        wrapped_agent = proxy._wrap_agent_with_metrics(\n            mock_agent, \"test-agent\", config, mock_metrics_service\n        )\n    \n        # Test wrapped arun method\n        result = await wrapped_agent.arun(\"test_input\")\n        assert result == \"test_async_response\"\n    \n        # Verify original arun was called\n>       mock_agent.arun.assert_called_once_with(\"test_input\")\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'function' object has no attribute 'assert_called_once_with'\n\ntests/lib_utils/test_proxy_agents.py:648: AttributeError"
            }
          ]
        },
        {
          "name": "test_wrap_agent_without_arun",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_wrap_agent_without_arun",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents.TestMetricsWrapping object at 0x7bb41b512f90>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41acb2990>\nmock_metrics_service = <MagicMock id='136013473855248'>\n\n    def test_wrap_agent_without_arun(self, proxy, mock_metrics_service):\n        \"\"\"Test wrapping agent that doesn't have arun method.\"\"\"\n        agent = MagicMock()\n        agent.run = MagicMock(return_value=\"test_response\")\n        # Don't add arun method\n    \n        config = {\"agent\": {\"name\": \"Test Agent\"}}\n    \n        wrapped_agent = proxy._wrap_agent_with_metrics(\n            agent, \"test-agent\", config, mock_metrics_service\n        )\n    \n        # Should only wrap run method\n        assert wrapped_agent == agent\n        assert hasattr(wrapped_agent, \"run\")\n>       assert not hasattr(wrapped_agent, \"arun\")\nE       AssertionError: assert not True\nE        +  where True = hasattr(<MagicMock id='136013455748048'>, 'arun')\n\ntests/lib_utils/test_proxy_agents.py:668: AssertionError"
            }
          ]
        },
        {
          "name": "test_wrapped_run_with_metrics_error",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_wrapped_run_with_metrics_error",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_with_agent_error",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_wrapped_run_with_agent_error",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_with_none_response",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_wrapped_run_with_none_response",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_extract_metrics_overrides",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides_root_only",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_extract_metrics_overrides_root_only",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides_none",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetricsWrapping::test_extract_metrics_overrides_none",
          "state": "passed"
        },
        {
          "name": "test_create_metadata_complete",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetadataCreation::test_create_metadata_complete",
          "state": "passed"
        },
        {
          "name": "test_create_metadata_minimal",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestMetadataCreation::test_create_metadata_minimal",
          "state": "passed"
        },
        {
          "name": "test_create_proxy_agent",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestProxyAgentCreation::test_create_proxy_agent",
          "state": "passed"
        },
        {
          "name": "test_create_agent_with_knowledge_filter_special_handling",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_create_agent_with_knowledge_filter_special_handling",
          "state": "failed",
          "errors": [
            {
              "message": "self = <MagicMock name='_handle_knowledge_filter' id='136013461504560'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected '_handle_knowledge_filter' to have been called once. Called 0 times.\n\n/usr/lib/python3.12/unittest/mock.py:923: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.lib_utils.test_proxy_agents.TestEdgeCasesAndErrorHandling object at 0x7bb41b528500>\nmock_agent_class = <MagicMock name='Agent' id='136013461507152'>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41a0ec710>\n\n    @patch(\"lib.utils.proxy_agents.Agent\")\n    async def test_create_agent_with_knowledge_filter_special_handling(self, mock_agent_class, proxy):\n        \"\"\"Test create_agent with knowledge_filter special handling.\"\"\"\n        mock_agent = MagicMock()\n        mock_agent.metadata = {}\n        mock_agent_class.return_value = mock_agent\n    \n        config = {\n            \"knowledge_filter\": {\"max_results\": 10},\n            \"instructions\": \"Test instructions\",\n        }\n    \n        # Mock the knowledge filter handler to return a knowledge base\n        with patch.object(proxy, \"_handle_knowledge_filter\", return_value=\"mock_kb\") as mock_handler:\n            agent = await proxy.create_agent(\n                component_id=\"test-agent\",\n                config=config,\n            )\n    \n>           mock_handler.assert_called_once()\nE           AssertionError: Expected '_handle_knowledge_filter' to have been called once. Called 0 times.\n\ntests/lib_utils/test_proxy_agents.py:863: AssertionError"
            }
          ]
        },
        {
          "name": "test_process_config_dict_return_from_handler",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_process_config_dict_return_from_handler",
          "state": "passed"
        },
        {
          "name": "test_fallback_parameters_coverage",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_fallback_parameters_coverage",
          "state": "passed"
        },
        {
          "name": "test_create_agent_filters_none_values",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_create_agent_filters_none_values",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents.TestEdgeCasesAndErrorHandling object at 0x7bb41b528da0>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41a1424e0>\n\n    async def test_create_agent_filters_none_values(self, proxy):\n        \"\"\"Test that create_agent filters out None values from parameters.\"\"\"\n        config = {\n            \"name\": \"Test Agent\",\n            \"instructions\": \"Test instructions\",\n        }\n    \n        # Mock _process_config to return some None values\n        def mock_process_config(config, component_id, db_url):\n            return {\n                \"name\": \"Test Agent\",\n                \"instructions\": \"Test instructions\",\n                \"optional_param\": None,  # Should be filtered out\n                \"another_param\": \"value\",\n            }\n    \n        with patch.object(proxy, \"_process_config\", side_effect=mock_process_config), \\\n             patch(\"lib.utils.proxy_agents.Agent\") as mock_agent_class:\n    \n            mock_agent = MagicMock()\n            mock_agent.metadata = {}\n            mock_agent_class.return_value = mock_agent\n    \n            agent = await proxy.create_agent(\n                component_id=\"test-agent\",\n                config=config,\n            )\n    \n            # Verify None values were filtered out\n            call_args, call_kwargs = mock_agent_class.call_args\n            assert \"optional_param\" not in call_kwargs\n            assert call_kwargs.get(\"name\") == \"Test Agent\"\n>           assert call_kwargs.get(\"another_param\") == \"value\"\nE           AssertionError: assert None == 'value'\nE            +  where None = <built-in method get of dict object at 0x7bb403fabe80>('another_param')\nE            +    where <built-in method get of dict object at 0x7bb403fabe80> = {'agent_id': 'test-agent', 'debug_mode': False, 'instructions': 'Test instructions', 'name': 'Test Agent'}.get\n\ntests/lib_utils/test_proxy_agents.py:937: AssertionError"
            }
          ]
        },
        {
          "name": "test_handle_knowledge_filter_no_csv_path",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_handle_knowledge_filter_no_csv_path",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_kb_creation_failure",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_handle_knowledge_filter_kb_creation_failure",
          "state": "passed"
        },
        {
          "name": "test_wrap_agent_without_collect_from_response_method",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_wrap_agent_without_collect_from_response_method",
          "state": "passed"
        },
        {
          "name": "test_metrics_wrapping_false_return",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_metrics_wrapping_false_return",
          "state": "passed"
        },
        {
          "name": "test_async_wrapped_run_complete_flow",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestEdgeCasesAndErrorHandling::test_async_wrapped_run_complete_flow",
          "state": "passed"
        },
        {
          "name": "test_comprehensive_agent_creation",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestComprehensiveIntegration::test_comprehensive_agent_creation",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents.TestComprehensiveIntegration object at 0x7bb41b529490>\nmock_memory = <MagicMock name='create_agent_memory' id='136013470037296'>\nmock_storage = <MagicMock name='create_dynamic_storage' id='136013470037920'>\nmock_model = <MagicMock name='resolve_model' id='136013471566400'>\nmock_agent_class = <MagicMock name='Agent' id='136013471564096'>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41a90cf80>\n\n    @patch(\"lib.utils.proxy_agents.Agent\")\n    @patch(\"lib.config.models.resolve_model\")\n    @patch(\"lib.utils.agno_storage_utils.create_dynamic_storage\")\n    @patch(\"lib.memory.memory_factory.create_agent_memory\")\n    async def test_comprehensive_agent_creation(\n        self, mock_memory, mock_storage, mock_model, mock_agent_class, proxy\n    ):\n        \"\"\"Test comprehensive agent creation with all features.\"\"\"\n        # Setup mocks\n        mock_model.return_value = \"mock_model\"\n        mock_storage.return_value = \"mock_storage\"\n        mock_memory.return_value = \"mock_memory\"\n    \n        mock_agent = MagicMock()\n        mock_agent.metadata = {}\n        mock_agent_class.return_value = mock_agent\n    \n        # Comprehensive config\n        config = {\n            \"agent\": {\n                \"name\": \"Comprehensive Test Agent\",\n                \"version\": 3,\n                \"description\": \"Full feature test\",\n                \"role\": \"testing\",\n            },\n            \"model\": {\n                \"id\": \"test-model-advanced\",\n                \"temperature\": 0.9,\n                \"max_tokens\": 4000,\n                \"custom_model_param\": \"value\",\n            },\n            \"storage\": {\n                \"type\": \"postgres\",  # Use correct storage type name\n                \"connection_string\": \"test://connection\",\n            },\n            \"memory\": {\n                \"enable_user_memories\": True,\n            },\n            \"instructions\": \"Comprehensive test instructions\",\n            \"tools\": [{\"name\": \"advanced_tool\", \"config\": {}}],\n            \"display\": {\n                \"markdown\": True,\n                \"stream\": False,\n            },\n            \"knowledge_filter\": {\n                \"max_results\": 15,\n            },\n            \"suggested_actions\": [\"action1\", \"action2\"],\n            \"escalation_triggers\": {\"threshold\": 10},\n        }\n    \n        # Create agent\n>       agent = await proxy.create_agent(\n            component_id=\"comprehensive-test-agent\",\n            config=config,\n            session_id=\"test-session-123\",\n            debug_mode=True,\n            user_id=\"test-user-456\",\n            db_url=\"test://comprehensive-db\",\n        )\n\ntests/lib_utils/test_proxy_agents.py:1090: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlib/utils/proxy_agents.py:237: in create_agent\n    agent_params = self._process_config(config, component_id, db_url)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nlib/utils/proxy_agents.py:305: in _process_config\n    handler_result = self._custom_params[key](\nlib/utils/proxy_agents.py:357: in _handle_storage_config\n    return create_dynamic_storage(\nlib/utils/agno_storage_utils.py:136: in create_dynamic_storage\n    storage_instance = storage_class(**storage_params)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/agno/storage/postgres.py:57: in __init__\n    _engine = create_engine(db_url)\n              ^^^^^^^^^^^^^^^^^^^^^\n<string>:2: in create_engine\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py:553: in create_engine\n    entrypoint = u._get_entrypoint()\n                 ^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/url.py:772: in _get_entrypoint\n    cls = registry.load(name)\n          ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.util.langhelpers.PluginLoader object at 0x7bb47b1b1640>, name = 'test'\n\n    def load(self, name: str) -> Any:\n        if name in self.impls:\n            return self.impls[name]()\n    \n        if self.auto_fn:\n            loader = self.auto_fn(name)\n            if loader:\n                self.impls[name] = loader\n                return loader()\n    \n        for impl in compat.importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n    \n>       raise exc.NoSuchModuleError(\n            \"Can't load plugin: %s:%s\" % (self.group, name)\n        )\nE       sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:test\n\n.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:453: NoSuchModuleError"
            }
          ]
        },
        {
          "name": "test_agent_creation_with_metrics_full_flow",
          "fullName": "tests/lib_utils/test_proxy_agents.py::TestComprehensiveIntegration::test_agent_creation_with_metrics_full_flow",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_proxy_agents_backup.py",
      "tests": [
        {
          "name": "test_module_import",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestProxyAgentsImports::test_module_import",
          "state": "passed"
        },
        {
          "name": "test_agno_imports",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestProxyAgentsImports::test_agno_imports",
          "state": "passed"
        },
        {
          "name": "test_utility_imports",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestProxyAgentsImports::test_utility_imports",
          "state": "passed"
        },
        {
          "name": "test_agent_config_structure",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestProxyAgentConfiguration::test_agent_config_structure",
          "state": "passed"
        },
        {
          "name": "test_agent_config_validation",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestProxyAgentConfiguration::test_agent_config_validation",
          "state": "passed"
        },
        {
          "name": "test_tools_configuration",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestProxyAgentConfiguration::test_tools_configuration",
          "state": "passed"
        },
        {
          "name": "test_proxy_initialization",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyInitialization::test_proxy_initialization",
          "state": "passed"
        },
        {
          "name": "test_parameter_discovery_fallback",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyInitialization::test_parameter_discovery_fallback",
          "state": "passed"
        },
        {
          "name": "test_custom_parameter_handlers_initialization",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyInitialization::test_custom_parameter_handlers_initialization",
          "state": "passed"
        },
        {
          "name": "test_get_supported_parameters",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyInitialization::test_get_supported_parameters",
          "state": "passed"
        },
        {
          "name": "test_create_agent_basic",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyCreateAgent::test_create_agent_basic",
          "state": "passed"
        },
        {
          "name": "test_create_agent_with_session_and_debug",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyCreateAgent::test_create_agent_with_session_and_debug",
          "state": "passed"
        },
        {
          "name": "test_create_agent_none_config_error",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyCreateAgent::test_create_agent_none_config_error",
          "state": "passed"
        },
        {
          "name": "test_create_agent_with_metrics_service",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyCreateAgent::test_create_agent_with_metrics_service",
          "state": "passed"
        },
        {
          "name": "test_create_agent_creation_error",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestAgnoAgentProxyCreateAgent::test_create_agent_creation_error",
          "state": "passed"
        },
        {
          "name": "test_process_config_direct_mapping",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestConfigurationProcessing::test_process_config_direct_mapping",
          "state": "passed"
        },
        {
          "name": "test_process_config_with_custom_handlers",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestConfigurationProcessing::test_process_config_with_custom_handlers",
          "state": "failed",
          "errors": [
            {
              "message": "self = <lib.config.models.ModelResolver object at 0x7bb47aaabf80>\nmodel_id = 'test-model', config_overrides = {'max_tokens': 2000, 'temperature': 0.7}\nresolved_model_id = 'test-model'\n\n    def resolve_model(self, model_id: str | None = None, **config_overrides) -> Any:\n        \"\"\"\n        Create model instance with Agno-native resolution and configuration merging.\n    \n        Args:\n            model_id: Model identifier (None uses default)\n            **config_overrides: Additional configuration parameters\n    \n        Returns:\n            Agno model instance\n    \n        Raises:\n            ModelResolutionError: If model resolution or creation fails\n        \"\"\"\n        # Resolve model ID with precedence: param -> default\n        resolved_model_id = model_id or self.get_default_model_id()\n    \n        try:\n            # Detect provider and discover model class\n>           provider = self._detect_provider(resolved_model_id)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nlib/config/models.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lib.config.models.ModelResolver object at 0x7bb47aaabf80>\nmodel_id = 'test-model'\n\n    @lru_cache(maxsize=128)\n    def _detect_provider(self, model_id: str) -> str:\n        \"\"\"\n        Detect provider from model ID using dynamic registry.\n    \n        Args:\n            model_id: Model identifier (e.g., \"gpt-4.1-mini\")\n    \n        Returns:\n            str: Provider name (e.g., \"openai\")\n    \n        Raises:\n            ModelResolutionError: If provider cannot be detected\n        \"\"\"\n        provider = get_provider_registry().detect_provider(model_id)\n        if provider is None:\n            available_providers = sorted(\n                get_provider_registry().get_available_providers()\n            )\n            logger.error(\n                \"Provider detection failed\",\n                model_id=model_id,\n                available_providers=available_providers,\n            )\n>           raise ModelResolutionError(\n                f\"Cannot detect provider for model ID '{model_id}'. Available providers: {available_providers}\"\n            )\nE           lib.config.models.ModelResolutionError: Cannot detect provider for model ID 'test-model'. Available providers: ['aimlapi', 'anthropic', 'aws', 'azure', 'cerebras', 'cohere', 'deepinfra', 'deepseek', 'fireworks', 'google', 'groq', 'huggingface', 'ibm', 'internlm', 'langdb', 'litellm', 'lmstudio', 'meta', 'mistral', 'nebius', 'nvidia', 'ollama', 'openai', 'openrouter', 'perplexity', 'sambanova', 'together', 'vercel', 'vllm', 'xai']\n\nlib/config/models.py:102: ModelResolutionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.lib_utils.test_proxy_agents_backup.TestConfigurationProcessing object at 0x7bb41b553170>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41aa35940>\n\n    def test_process_config_with_custom_handlers(self, proxy):\n        \"\"\"Test config processing with custom handlers.\"\"\"\n        config = {\n            \"model\": {\"id\": \"test-model\", \"temperature\": 0.7},\n            \"agent\": {\"name\": \"Test Agent\", \"version\": 1},\n            \"storage\": {\"type\": \"memory\"},\n        }\n    \n        with patch.object(proxy, \"_handle_model_config\", return_value=\"mock_model\") as mock_model_handler, \\\n             patch.object(proxy, \"_handle_agent_metadata\", return_value={\"name\": \"Test Agent\"}) as mock_agent_handler, \\\n             patch.object(proxy, \"_handle_storage_config\", return_value=\"mock_storage\") as mock_storage_handler:\n    \n>           processed = proxy._process_config(config, \"test-agent\", None)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/lib_utils/test_proxy_agents_backup.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlib/utils/proxy_agents.py:305: in _process_config\n    handler_result = self._custom_params[key](\nlib/utils/proxy_agents.py:338: in _handle_model_config\n    return resolve_model(\nlib/config/models.py:250: in resolve_model\n    return model_resolver.resolve_model(model_id, **config_overrides)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lib.config.models.ModelResolver object at 0x7bb47aaabf80>\nmodel_id = 'test-model', config_overrides = {'max_tokens': 2000, 'temperature': 0.7}\nresolved_model_id = 'test-model'\n\n    def resolve_model(self, model_id: str | None = None, **config_overrides) -> Any:\n        \"\"\"\n        Create model instance with Agno-native resolution and configuration merging.\n    \n        Args:\n            model_id: Model identifier (None uses default)\n            **config_overrides: Additional configuration parameters\n    \n        Returns:\n            Agno model instance\n    \n        Raises:\n            ModelResolutionError: If model resolution or creation fails\n        \"\"\"\n        # Resolve model ID with precedence: param -> default\n        resolved_model_id = model_id or self.get_default_model_id()\n    \n        try:\n            # Detect provider and discover model class\n            provider = self._detect_provider(resolved_model_id)\n            model_class = self._discover_model_class(provider, resolved_model_id)\n    \n            # Prepare model configuration\n            model_config = {\"id\": resolved_model_id, **config_overrides}\n    \n            # Create model instance\n            model_instance = model_class(**model_config)\n    \n            logger.debug(\n                \"Model resolved successfully\",\n                model_id=resolved_model_id,\n                provider=provider,\n            )\n    \n            return model_instance\n    \n        except Exception as e:\n            logger.error(\n                \"Model resolution failed\",\n                model_id=resolved_model_id,\n                error=str(e),\n                error_type=type(e).__name__,\n            )\n>           raise ModelResolutionError(\n                f\"Failed to resolve model '{resolved_model_id}': {e}\"\n            )\nE           lib.config.models.ModelResolutionError: Failed to resolve model 'test-model': Cannot detect provider for model ID 'test-model'. Available providers: ['aimlapi', 'anthropic', 'aws', 'azure', 'cerebras', 'cohere', 'deepinfra', 'deepseek', 'fireworks', 'google', 'groq', 'huggingface', 'ibm', 'internlm', 'langdb', 'litellm', 'lmstudio', 'meta', 'mistral', 'nebius', 'nvidia', 'ollama', 'openai', 'openrouter', 'perplexity', 'sambanova', 'together', 'vercel', 'vllm', 'xai']\n\nlib/config/models.py:190: ModelResolutionError"
            }
          ]
        },
        {
          "name": "test_validate_config",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestConfigurationProcessing::test_validate_config",
          "state": "passed"
        },
        {
          "name": "test_handle_model_config",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_model_config",
          "state": "passed"
        },
        {
          "name": "test_handle_storage_config",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_storage_config",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_enabled",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_memory_config_enabled",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_disabled",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_memory_config_disabled",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_none",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_memory_config_none",
          "state": "passed"
        },
        {
          "name": "test_handle_agent_metadata",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_agent_metadata",
          "state": "passed"
        },
        {
          "name": "test_handle_agent_metadata_defaults",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_agent_metadata_defaults",
          "state": "passed"
        },
        {
          "name": "test_handle_custom_metadata",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_custom_metadata",
          "state": "passed"
        },
        {
          "name": "test_handle_display_section_valid",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_display_section_valid",
          "state": "passed"
        },
        {
          "name": "test_handle_display_section_invalid",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_display_section_invalid",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_success",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_knowledge_filter_success",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_config_error",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_knowledge_filter_config_error",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_no_db_url",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_knowledge_filter_no_db_url",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_warns_agent_csv_path",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestCustomParameterHandlers::test_handle_knowledge_filter_warns_agent_csv_path",
          "state": "passed"
        },
        {
          "name": "test_wrap_agent_with_metrics_sync",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_wrap_agent_with_metrics_sync",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents_backup.TestMetricsWrapping object at 0x7bb41b56d190>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41af811c0>\nmock_agent = <MagicMock id='136013476800240'>\nmock_metrics_service = <MagicMock id='136013455924528'>\n\n    def test_wrap_agent_with_metrics_sync(self, proxy, mock_agent, mock_metrics_service):\n        \"\"\"Test wrapping agent with metrics for synchronous execution.\"\"\"\n        config = {\"agent\": {\"name\": \"Test Agent\"}}\n    \n        wrapped_agent = proxy._wrap_agent_with_metrics(\n            mock_agent, \"test-agent\", config, mock_metrics_service\n        )\n    \n        # Test that the agent is returned (same instance, but run method is wrapped)\n        assert wrapped_agent == mock_agent\n    \n        # Test wrapped run method\n        result = wrapped_agent.run(\"test_input\")\n        assert result == \"test_response\"\n    \n        # Verify original run was called\n>       mock_agent.run.assert_called_once_with(\"test_input\")\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'function' object has no attribute 'assert_called_once_with'\n\ntests/lib_utils/test_proxy_agents_backup.py:630: AttributeError"
            }
          ]
        },
        {
          "name": "test_wrap_agent_with_metrics_async",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_wrap_agent_with_metrics_async",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents_backup.TestMetricsWrapping object at 0x7bb41b56c890>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb4182b3140>\nmock_agent = <MagicMock id='136013429801424'>\nmock_metrics_service = <MagicMock id='136013473994784'>\n\n    async def test_wrap_agent_with_metrics_async(self, proxy, mock_agent, mock_metrics_service):\n        \"\"\"Test wrapping agent with metrics for asynchronous execution.\"\"\"\n        config = {\"agent\": {\"name\": \"Test Agent\"}}\n    \n        wrapped_agent = proxy._wrap_agent_with_metrics(\n            mock_agent, \"test-agent\", config, mock_metrics_service\n        )\n    \n        # Test wrapped arun method\n        result = await wrapped_agent.arun(\"test_input\")\n        assert result == \"test_async_response\"\n    \n        # Verify original arun was called\n>       mock_agent.arun.assert_called_once_with(\"test_input\")\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'function' object has no attribute 'assert_called_once_with'\n\ntests/lib_utils/test_proxy_agents_backup.py:648: AttributeError"
            }
          ]
        },
        {
          "name": "test_wrap_agent_without_arun",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_wrap_agent_without_arun",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents_backup.TestMetricsWrapping object at 0x7bb41b56d760>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb419d377a0>\nmock_metrics_service = <MagicMock id='136013457614192'>\n\n    def test_wrap_agent_without_arun(self, proxy, mock_metrics_service):\n        \"\"\"Test wrapping agent that doesn't have arun method.\"\"\"\n        agent = MagicMock()\n        agent.run = MagicMock(return_value=\"test_response\")\n        # Don't add arun method\n    \n        config = {\"agent\": {\"name\": \"Test Agent\"}}\n    \n        wrapped_agent = proxy._wrap_agent_with_metrics(\n            agent, \"test-agent\", config, mock_metrics_service\n        )\n    \n        # Should only wrap run method\n        assert wrapped_agent == agent\n        assert hasattr(wrapped_agent, \"run\")\n>       assert not hasattr(wrapped_agent, \"arun\")\nE       AssertionError: assert not True\nE        +  where True = hasattr(<MagicMock id='136013429805792'>, 'arun')\n\ntests/lib_utils/test_proxy_agents_backup.py:668: AssertionError"
            }
          ]
        },
        {
          "name": "test_wrapped_run_with_metrics_error",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_wrapped_run_with_metrics_error",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_with_agent_error",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_wrapped_run_with_agent_error",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_with_none_response",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_wrapped_run_with_none_response",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_extract_metrics_overrides",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides_root_only",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_extract_metrics_overrides_root_only",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides_none",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetricsWrapping::test_extract_metrics_overrides_none",
          "state": "passed"
        },
        {
          "name": "test_create_metadata_complete",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetadataCreation::test_create_metadata_complete",
          "state": "passed"
        },
        {
          "name": "test_create_metadata_minimal",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestMetadataCreation::test_create_metadata_minimal",
          "state": "passed"
        },
        {
          "name": "test_create_proxy_agent",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestProxyAgentCreation::test_create_proxy_agent",
          "state": "passed"
        },
        {
          "name": "test_create_agent_with_knowledge_filter_special_handling",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_create_agent_with_knowledge_filter_special_handling",
          "state": "failed",
          "errors": [
            {
              "message": "self = <MagicMock name='_handle_knowledge_filter' id='136013476801776'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected '_handle_knowledge_filter' to have been called once. Called 0 times.\n\n/usr/lib/python3.12/unittest/mock.py:923: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.lib_utils.test_proxy_agents_backup.TestEdgeCasesAndErrorHandling object at 0x7bb41b56f260>\nmock_agent_class = <MagicMock name='Agent' id='136013470623664'>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41a99c350>\n\n    @patch(\"lib.utils.proxy_agents.Agent\")\n    async def test_create_agent_with_knowledge_filter_special_handling(self, mock_agent_class, proxy):\n        \"\"\"Test create_agent with knowledge_filter special handling.\"\"\"\n        mock_agent = MagicMock()\n        mock_agent.metadata = {}\n        mock_agent_class.return_value = mock_agent\n    \n        config = {\n            \"knowledge_filter\": {\"max_results\": 10},\n            \"instructions\": \"Test instructions\",\n        }\n    \n        # Mock the knowledge filter handler to return a knowledge base\n        with patch.object(proxy, \"_handle_knowledge_filter\", return_value=\"mock_kb\") as mock_handler:\n            agent = await proxy.create_agent(\n                component_id=\"test-agent\",\n                config=config,\n            )\n    \n>           mock_handler.assert_called_once()\nE           AssertionError: Expected '_handle_knowledge_filter' to have been called once. Called 0 times.\n\ntests/lib_utils/test_proxy_agents_backup.py:863: AssertionError"
            }
          ]
        },
        {
          "name": "test_process_config_dict_return_from_handler",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_process_config_dict_return_from_handler",
          "state": "passed"
        },
        {
          "name": "test_fallback_parameters_coverage",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_fallback_parameters_coverage",
          "state": "passed"
        },
        {
          "name": "test_create_agent_filters_none_values",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_create_agent_filters_none_values",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents_backup.TestEdgeCasesAndErrorHandling object at 0x7bb41b56fb00>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb419d11550>\n\n    async def test_create_agent_filters_none_values(self, proxy):\n        \"\"\"Test that create_agent filters out None values from parameters.\"\"\"\n        config = {\n            \"name\": \"Test Agent\",\n            \"instructions\": \"Test instructions\",\n        }\n    \n        # Mock _process_config to return some None values\n        def mock_process_config(config, component_id, db_url):\n            return {\n                \"name\": \"Test Agent\",\n                \"instructions\": \"Test instructions\",\n                \"optional_param\": None,  # Should be filtered out\n                \"another_param\": \"value\",\n            }\n    \n        with patch.object(proxy, \"_process_config\", side_effect=mock_process_config), \\\n             patch(\"lib.utils.proxy_agents.Agent\") as mock_agent_class:\n    \n            mock_agent = MagicMock()\n            mock_agent.metadata = {}\n            mock_agent_class.return_value = mock_agent\n    \n            agent = await proxy.create_agent(\n                component_id=\"test-agent\",\n                config=config,\n            )\n    \n            # Verify None values were filtered out\n            call_args, call_kwargs = mock_agent_class.call_args\n            assert \"optional_param\" not in call_kwargs\n            assert call_kwargs.get(\"name\") == \"Test Agent\"\n>           assert call_kwargs.get(\"another_param\") == \"value\"\nE           AssertionError: assert None == 'value'\nE            +  where None = <built-in method get of dict object at 0x7bb403c9d880>('another_param')\nE            +    where <built-in method get of dict object at 0x7bb403c9d880> = {'agent_id': 'test-agent', 'debug_mode': False, 'instructions': 'Test instructions', 'name': 'Test Agent'}.get\n\ntests/lib_utils/test_proxy_agents_backup.py:937: AssertionError"
            }
          ]
        },
        {
          "name": "test_handle_knowledge_filter_no_csv_path",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_handle_knowledge_filter_no_csv_path",
          "state": "passed"
        },
        {
          "name": "test_handle_knowledge_filter_kb_creation_failure",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_handle_knowledge_filter_kb_creation_failure",
          "state": "passed"
        },
        {
          "name": "test_wrap_agent_without_collect_from_response_method",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_wrap_agent_without_collect_from_response_method",
          "state": "passed"
        },
        {
          "name": "test_metrics_wrapping_false_return",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_metrics_wrapping_false_return",
          "state": "passed"
        },
        {
          "name": "test_async_wrapped_run_complete_flow",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestEdgeCasesAndErrorHandling::test_async_wrapped_run_complete_flow",
          "state": "passed"
        },
        {
          "name": "test_comprehensive_agent_creation",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestComprehensiveIntegration::test_comprehensive_agent_creation",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_agents_backup.TestComprehensiveIntegration object at 0x7bb41b5844a0>\nmock_memory = <MagicMock name='create_agent_memory' id='136013429197568'>\nmock_storage = <MagicMock name='create_dynamic_storage' id='136013429195408'>\nmock_model = <MagicMock name='resolve_model' id='136013429206736'>\nmock_agent_class = <MagicMock name='Agent' id='136013429210528'>\nproxy = <lib.utils.proxy_agents.AgnoAgentProxy object at 0x7bb41821fe60>\n\n    @patch(\"lib.utils.proxy_agents.Agent\")\n    @patch(\"lib.config.models.resolve_model\")\n    @patch(\"lib.utils.agno_storage_utils.create_dynamic_storage\")\n    @patch(\"lib.memory.memory_factory.create_agent_memory\")\n    async def test_comprehensive_agent_creation(\n        self, mock_memory, mock_storage, mock_model, mock_agent_class, proxy\n    ):\n        \"\"\"Test comprehensive agent creation with all features.\"\"\"\n        # Setup mocks\n        mock_model.return_value = \"mock_model\"\n        mock_storage.return_value = \"mock_storage\"\n        mock_memory.return_value = \"mock_memory\"\n    \n        mock_agent = MagicMock()\n        mock_agent.metadata = {}\n        mock_agent_class.return_value = mock_agent\n    \n        # Comprehensive config\n        config = {\n            \"agent\": {\n                \"name\": \"Comprehensive Test Agent\",\n                \"version\": 3,\n                \"description\": \"Full feature test\",\n                \"role\": \"testing\",\n            },\n            \"model\": {\n                \"id\": \"test-model-advanced\",\n                \"temperature\": 0.9,\n                \"max_tokens\": 4000,\n                \"custom_model_param\": \"value\",\n            },\n            \"storage\": {\n                \"type\": \"postgres\",  # Use correct storage type name\n                \"connection_string\": \"test://connection\",\n            },\n            \"memory\": {\n                \"enable_user_memories\": True,\n            },\n            \"instructions\": \"Comprehensive test instructions\",\n            \"tools\": [{\"name\": \"advanced_tool\", \"config\": {}}],\n            \"display\": {\n                \"markdown\": True,\n                \"stream\": False,\n            },\n            \"knowledge_filter\": {\n                \"max_results\": 15,\n            },\n            \"suggested_actions\": [\"action1\", \"action2\"],\n            \"escalation_triggers\": {\"threshold\": 10},\n        }\n    \n        # Create agent\n>       agent = await proxy.create_agent(\n            component_id=\"comprehensive-test-agent\",\n            config=config,\n            session_id=\"test-session-123\",\n            debug_mode=True,\n            user_id=\"test-user-456\",\n            db_url=\"test://comprehensive-db\",\n        )\n\ntests/lib_utils/test_proxy_agents_backup.py:1090: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlib/utils/proxy_agents.py:237: in create_agent\n    agent_params = self._process_config(config, component_id, db_url)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nlib/utils/proxy_agents.py:305: in _process_config\n    handler_result = self._custom_params[key](\nlib/utils/proxy_agents.py:357: in _handle_storage_config\n    return create_dynamic_storage(\nlib/utils/agno_storage_utils.py:136: in create_dynamic_storage\n    storage_instance = storage_class(**storage_params)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/agno/storage/postgres.py:57: in __init__\n    _engine = create_engine(db_url)\n              ^^^^^^^^^^^^^^^^^^^^^\n<string>:2: in create_engine\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py:553: in create_engine\n    entrypoint = u._get_entrypoint()\n                 ^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/url.py:772: in _get_entrypoint\n    cls = registry.load(name)\n          ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.util.langhelpers.PluginLoader object at 0x7bb47b1b1640>, name = 'test'\n\n    def load(self, name: str) -> Any:\n        if name in self.impls:\n            return self.impls[name]()\n    \n        if self.auto_fn:\n            loader = self.auto_fn(name)\n            if loader:\n                self.impls[name] = loader\n                return loader()\n    \n        for impl in compat.importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n    \n>       raise exc.NoSuchModuleError(\n            \"Can't load plugin: %s:%s\" % (self.group, name)\n        )\nE       sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:test\n\n.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:453: NoSuchModuleError"
            }
          ]
        },
        {
          "name": "test_agent_creation_with_metrics_full_flow",
          "fullName": "tests/lib_utils/test_proxy_agents_backup.py::TestComprehensiveIntegration::test_agent_creation_with_metrics_full_flow",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_proxy_teams.py",
      "tests": [
        {
          "name": "test_module_import",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestProxyTeamsImports::test_module_import",
          "state": "passed"
        },
        {
          "name": "test_agno_imports",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestProxyTeamsImports::test_agno_imports",
          "state": "passed"
        },
        {
          "name": "test_utility_imports",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestProxyTeamsImports::test_utility_imports",
          "state": "passed"
        },
        {
          "name": "test_proxy_initialization",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyInitialization::test_proxy_initialization",
          "state": "passed"
        },
        {
          "name": "test_parameter_discovery_success",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyInitialization::test_parameter_discovery_success",
          "state": "passed"
        },
        {
          "name": "test_parameter_discovery_failure_uses_fallback",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyInitialization::test_parameter_discovery_failure_uses_fallback",
          "state": "passed"
        },
        {
          "name": "test_fallback_parameters_comprehensive",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyInitialization::test_fallback_parameters_comprehensive",
          "state": "passed"
        },
        {
          "name": "test_custom_parameter_handlers_mapping",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyInitialization::test_custom_parameter_handlers_mapping",
          "state": "passed"
        },
        {
          "name": "test_create_team_basic",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyTeamCreation::test_create_team_basic",
          "state": "passed"
        },
        {
          "name": "test_create_team_with_metrics_service",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyTeamCreation::test_create_team_with_metrics_service",
          "state": "passed"
        },
        {
          "name": "test_create_team_failure_handling",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyTeamCreation::test_create_team_failure_handling",
          "state": "passed"
        },
        {
          "name": "test_create_metadata",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyTeamCreation::test_create_metadata",
          "state": "passed"
        },
        {
          "name": "test_create_metadata_default_version",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyTeamCreation::test_create_metadata_default_version",
          "state": "passed"
        },
        {
          "name": "test_process_config_supported_params",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyConfigurationProcessing::test_process_config_supported_params",
          "state": "passed"
        },
        {
          "name": "test_process_config_custom_params",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyConfigurationProcessing::test_process_config_custom_params",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_teams.TestAgnoTeamProxyConfigurationProcessing object at 0x7bb41b5b8f50>\nproxy = <lib.utils.proxy_teams.AgnoTeamProxy object at 0x7bb41ac21f10>\n\n    @pytest.mark.asyncio\n    async def test_process_config_custom_params(self, proxy):\n        \"\"\"Test processing of custom parameters.\"\"\"\n        config = {\n            \"model\": {\"id\": \"claude-3-sonnet\"},\n            \"storage\": {\"type\": \"postgres\"},\n            \"team\": {\"name\": \"Custom Team\"}\n        }\n    \n        with patch.object(proxy, '_handle_model_config') as mock_model, \\\n             patch.object(proxy, '_handle_storage_config') as mock_storage, \\\n             patch.object(proxy, '_handle_team_metadata') as mock_team:\n    \n            mock_model.return_value = MagicMock()\n            mock_storage.return_value = MagicMock()\n            mock_team.return_value = {\"name\": \"Custom Team\"}\n    \n>           result = await proxy._process_config(config, \"test-team\", \"postgresql://test_db\")\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/lib_utils/test_proxy_teams.py:315: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlib/utils/proxy_teams.py:279: in _process_config\n    handler_result = self._custom_params[key](\nlib/utils/proxy_teams.py:331: in _handle_storage_config\n    return create_dynamic_storage(\nlib/utils/agno_storage_utils.py:136: in create_dynamic_storage\n    storage_instance = storage_class(**storage_params)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/agno/storage/postgres.py:57: in __init__\n    _engine = create_engine(db_url)\n              ^^^^^^^^^^^^^^^^^^^^^\n<string>:2: in create_engine\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py:602: in create_engine\n    dbapi = dbapi_meth(**dbapi_args)\n            ^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2'>\n\n    @classmethod\n    def import_dbapi(cls):\n>       import psycopg2\nE       ModuleNotFoundError: No module named 'psycopg2'\n\n.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py:696: ModuleNotFoundError"
            }
          ]
        },
        {
          "name": "test_process_config_async_members_handler",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyConfigurationProcessing::test_process_config_async_members_handler",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_teams.TestAgnoTeamProxyConfigurationProcessing object at 0x7bb41b5b92b0>\nproxy = <lib.utils.proxy_teams.AgnoTeamProxy object at 0x7bb419d34560>\n\n    @pytest.mark.asyncio\n    async def test_process_config_async_members_handler(self, proxy):\n        \"\"\"Test processing of async members handler.\"\"\"\n        config = {\n            \"members\": [\"agent1\", \"agent2\"]\n        }\n    \n        mock_members = [MagicMock(), MagicMock()]\n    \n        with patch.object(proxy, '_handle_members', new_callable=AsyncMock) as mock_handler:\n            mock_handler.return_value = mock_members\n    \n            result = await proxy._process_config(config, \"test-team\", \"postgresql://test_db\")\n    \n>           assert result[\"members\"] == mock_members\nE           AssertionError: assert [] == [<MagicMock i...13457607760'>]\nE             \nE             Right contains 2 more items, first extra item: \u001b[0m<MagicMock \u001b[96mid\u001b[39;49;00m=\u001b[33m'\u001b[39;49;00m\u001b[33m136013457610448\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m>\u001b[90m\u001b[39;49;00m\nE             Use -v to get more diff\n\ntests/lib_utils/test_proxy_teams.py:335: AssertionError"
            }
          ]
        },
        {
          "name": "test_process_config_unknown_params_logging",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyConfigurationProcessing::test_process_config_unknown_params_logging",
          "state": "passed"
        },
        {
          "name": "test_process_config_dict_handler_result",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyConfigurationProcessing::test_process_config_dict_handler_result",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_teams.TestAgnoTeamProxyConfigurationProcessing object at 0x7bb41b5b9910>\nproxy = <lib.utils.proxy_teams.AgnoTeamProxy object at 0x7bb4182c2690>\n\n    @pytest.mark.asyncio\n    async def test_process_config_dict_handler_result(self, proxy):\n        \"\"\"Test handling of dict results from custom handlers.\"\"\"\n        config = {\n            \"team\": {\"name\": \"Test\", \"mode\": \"route\"}\n        }\n    \n        # Mock handler that returns a dict\n        with patch.object(proxy, '_handle_team_metadata') as mock_handler:\n            mock_handler.return_value = {\n                \"name\": \"Test Team\",\n                \"mode\": \"route\",\n                \"extra_field\": \"value\"\n            }\n    \n            result = await proxy._process_config(config, \"test-team\", \"postgresql://test_db\")\n    \n            # Dict result should be merged into processed config\n>           assert result[\"name\"] == \"Test Team\"\nE           AssertionError: assert 'Test' == 'Test Team'\nE             \nE             \u001b[0m\u001b[91m- Test Team\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE             \u001b[92m+ Test\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\ntests/lib_utils/test_proxy_teams.py:370: AssertionError"
            }
          ]
        },
        {
          "name": "test_handle_model_config",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_model_config",
          "state": "passed"
        },
        {
          "name": "test_handle_model_config_defaults",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_model_config_defaults",
          "state": "passed"
        },
        {
          "name": "test_handle_storage_config",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_storage_config",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_enabled",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_memory_config_enabled",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_disabled",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_memory_config_disabled",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_none",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_memory_config_none",
          "state": "passed"
        },
        {
          "name": "test_handle_memory_config_exception_bubbles",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_memory_config_exception_bubbles",
          "state": "passed"
        },
        {
          "name": "test_handle_team_metadata",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_team_metadata",
          "state": "passed"
        },
        {
          "name": "test_handle_team_metadata_defaults",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_team_metadata_defaults",
          "state": "passed"
        },
        {
          "name": "test_handle_members_success",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_members_success",
          "state": "passed"
        },
        {
          "name": "test_handle_members_partial_failure",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_members_partial_failure",
          "state": "passed"
        },
        {
          "name": "test_handle_members_empty_list",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_members_empty_list",
          "state": "passed"
        },
        {
          "name": "test_handle_custom_metadata_returns_none",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyParameterHandlers::test_handle_custom_metadata_returns_none",
          "state": "passed"
        },
        {
          "name": "test_wrap_team_with_metrics_basic",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_wrap_team_with_metrics_basic",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_successful_execution",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_wrapped_run_successful_execution",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_metrics_collection_failure",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_wrapped_run_metrics_collection_failure",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_team_execution_failure",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_wrapped_run_team_execution_failure",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_none_response",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_wrapped_run_none_response",
          "state": "passed"
        },
        {
          "name": "test_wrapped_run_metrics_service_returns_false",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_wrapped_run_metrics_service_returns_false",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides_from_config_root",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_extract_metrics_overrides_from_config_root",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides_from_team_section",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_extract_metrics_overrides_from_team_section",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides_empty_config",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_extract_metrics_overrides_empty_config",
          "state": "passed"
        },
        {
          "name": "test_extract_metrics_overrides_no_team_section",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyMetricsWrapping::test_extract_metrics_overrides_no_team_section",
          "state": "passed"
        },
        {
          "name": "test_get_supported_parameters",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyUtilityMethods::test_get_supported_parameters",
          "state": "passed"
        },
        {
          "name": "test_validate_config_all_supported",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyUtilityMethods::test_validate_config_all_supported",
          "state": "passed"
        },
        {
          "name": "test_validate_config_mixed_parameters",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyUtilityMethods::test_validate_config_mixed_parameters",
          "state": "passed"
        },
        {
          "name": "test_validate_config_empty",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyUtilityMethods::test_validate_config_empty",
          "state": "passed"
        },
        {
          "name": "test_validate_config_only_custom_params",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyUtilityMethods::test_validate_config_only_custom_params",
          "state": "passed"
        },
        {
          "name": "test_validate_config_only_unknown_params",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyUtilityMethods::test_validate_config_only_unknown_params",
          "state": "passed"
        },
        {
          "name": "test_create_team_with_kwargs",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyEdgeCases::test_create_team_with_kwargs",
          "state": "passed"
        },
        {
          "name": "test_create_team_filtered_parameters",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyEdgeCases::test_create_team_filtered_parameters",
          "state": "passed"
        },
        {
          "name": "test_handle_model_config_missing_resolve_model",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyEdgeCases::test_handle_model_config_missing_resolve_model",
          "state": "passed"
        },
        {
          "name": "test_handle_storage_config_creation_failure",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyEdgeCases::test_handle_storage_config_creation_failure",
          "state": "passed"
        },
        {
          "name": "test_handle_members_import_failure",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyEdgeCases::test_handle_members_import_failure",
          "state": "passed"
        },
        {
          "name": "test_create_metadata_with_complex_custom_params",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyEdgeCases::test_create_metadata_with_complex_custom_params",
          "state": "passed"
        },
        {
          "name": "test_process_config_handler_exception_propagation",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyEdgeCases::test_process_config_handler_exception_propagation",
          "state": "failed",
          "errors": [
            {
              "message": "self = <lib.config.models.ModelResolver object at 0x7bb47aaabf80>, model_id = 'invalid'\nconfig_overrides = {'max_tokens': 2000, 'temperature': 1.0}\nresolved_model_id = 'invalid'\n\n    def resolve_model(self, model_id: str | None = None, **config_overrides) -> Any:\n        \"\"\"\n        Create model instance with Agno-native resolution and configuration merging.\n    \n        Args:\n            model_id: Model identifier (None uses default)\n            **config_overrides: Additional configuration parameters\n    \n        Returns:\n            Agno model instance\n    \n        Raises:\n            ModelResolutionError: If model resolution or creation fails\n        \"\"\"\n        # Resolve model ID with precedence: param -> default\n        resolved_model_id = model_id or self.get_default_model_id()\n    \n        try:\n            # Detect provider and discover model class\n>           provider = self._detect_provider(resolved_model_id)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nlib/config/models.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lib.config.models.ModelResolver object at 0x7bb47aaabf80>, model_id = 'invalid'\n\n    @lru_cache(maxsize=128)\n    def _detect_provider(self, model_id: str) -> str:\n        \"\"\"\n        Detect provider from model ID using dynamic registry.\n    \n        Args:\n            model_id: Model identifier (e.g., \"gpt-4.1-mini\")\n    \n        Returns:\n            str: Provider name (e.g., \"openai\")\n    \n        Raises:\n            ModelResolutionError: If provider cannot be detected\n        \"\"\"\n        provider = get_provider_registry().detect_provider(model_id)\n        if provider is None:\n            available_providers = sorted(\n                get_provider_registry().get_available_providers()\n            )\n            logger.error(\n                \"Provider detection failed\",\n                model_id=model_id,\n                available_providers=available_providers,\n            )\n>           raise ModelResolutionError(\n                f\"Cannot detect provider for model ID '{model_id}'. Available providers: {available_providers}\"\n            )\nE           lib.config.models.ModelResolutionError: Cannot detect provider for model ID 'invalid'. Available providers: ['aimlapi', 'anthropic', 'aws', 'azure', 'cerebras', 'cohere', 'deepinfra', 'deepseek', 'fireworks', 'google', 'groq', 'huggingface', 'ibm', 'internlm', 'langdb', 'litellm', 'lmstudio', 'meta', 'mistral', 'nebius', 'nvidia', 'ollama', 'openai', 'openrouter', 'perplexity', 'sambanova', 'together', 'vercel', 'vllm', 'xai']\n\nlib/config/models.py:102: ModelResolutionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.lib_utils.test_proxy_teams.TestAgnoTeamProxyEdgeCases object at 0x7bb41b5d2720>\nproxy = <lib.utils.proxy_teams.AgnoTeamProxy object at 0x7bb41a9ce780>\n\n    @pytest.mark.asyncio\n    async def test_process_config_handler_exception_propagation(self, proxy):\n        \"\"\"Test that handler exceptions are properly propagated.\"\"\"\n        config = {\"model\": {\"id\": \"invalid\"}}\n    \n        with patch.object(proxy, '_handle_model_config') as mock_handler:\n            mock_handler.side_effect = ValueError(\"Invalid model config\")\n    \n            with pytest.raises(ValueError, match=\"Invalid model config\"):\n>               await proxy._process_config(config, \"test-team\", \"postgresql://test_db\")\n\ntests/lib_utils/test_proxy_teams.py:1003: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlib/utils/proxy_teams.py:279: in _process_config\n    handler_result = self._custom_params[key](\nlib/utils/proxy_teams.py:309: in _handle_model_config\n    return resolve_model(\nlib/config/models.py:250: in resolve_model\n    return model_resolver.resolve_model(model_id, **config_overrides)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lib.config.models.ModelResolver object at 0x7bb47aaabf80>, model_id = 'invalid'\nconfig_overrides = {'max_tokens': 2000, 'temperature': 1.0}\nresolved_model_id = 'invalid'\n\n    def resolve_model(self, model_id: str | None = None, **config_overrides) -> Any:\n        \"\"\"\n        Create model instance with Agno-native resolution and configuration merging.\n    \n        Args:\n            model_id: Model identifier (None uses default)\n            **config_overrides: Additional configuration parameters\n    \n        Returns:\n            Agno model instance\n    \n        Raises:\n            ModelResolutionError: If model resolution or creation fails\n        \"\"\"\n        # Resolve model ID with precedence: param -> default\n        resolved_model_id = model_id or self.get_default_model_id()\n    \n        try:\n            # Detect provider and discover model class\n            provider = self._detect_provider(resolved_model_id)\n            model_class = self._discover_model_class(provider, resolved_model_id)\n    \n            # Prepare model configuration\n            model_config = {\"id\": resolved_model_id, **config_overrides}\n    \n            # Create model instance\n            model_instance = model_class(**model_config)\n    \n            logger.debug(\n                \"Model resolved successfully\",\n                model_id=resolved_model_id,\n                provider=provider,\n            )\n    \n            return model_instance\n    \n        except Exception as e:\n            logger.error(\n                \"Model resolution failed\",\n                model_id=resolved_model_id,\n                error=str(e),\n                error_type=type(e).__name__,\n            )\n>           raise ModelResolutionError(\n                f\"Failed to resolve model '{resolved_model_id}': {e}\"\n            )\nE           lib.config.models.ModelResolutionError: Failed to resolve model 'invalid': Cannot detect provider for model ID 'invalid'. Available providers: ['aimlapi', 'anthropic', 'aws', 'azure', 'cerebras', 'cohere', 'deepinfra', 'deepseek', 'fireworks', 'google', 'groq', 'huggingface', 'ibm', 'internlm', 'langdb', 'litellm', 'lmstudio', 'meta', 'mistral', 'nebius', 'nvidia', 'ollama', 'openai', 'openrouter', 'perplexity', 'sambanova', 'together', 'vercel', 'vllm', 'xai']\n\nlib/config/models.py:190: ModelResolutionError"
            }
          ]
        },
        {
          "name": "test_fallback_parameters_completeness",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyEdgeCases::test_fallback_parameters_completeness",
          "state": "passed"
        },
        {
          "name": "test_full_team_creation_workflow",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyIntegration::test_full_team_creation_workflow",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_teams.TestAgnoTeamProxyIntegration object at 0x7bb41b5d2e40>\nproxy = <lib.utils.proxy_teams.AgnoTeamProxy object at 0x7bb419b98ec0>\ncomprehensive_config = {'context_config': {'include_metadata': True, 'max_history': 100}, 'description': 'Multi-agent team for complex proble...'max_iterations': 10, 'timeout_minutes': 30}, 'instructions': 'Coordinate team efforts to solve complex problems', ...}\n\n    @pytest.mark.asyncio\n    async def test_full_team_creation_workflow(self, proxy, comprehensive_config):\n        \"\"\"Test complete team creation workflow with all features.\"\"\"\n        mock_agents = [MagicMock(), MagicMock(), MagicMock()]\n        mock_model = MagicMock()\n        mock_storage = MagicMock()\n        mock_memory = MagicMock()\n        mock_metrics_service = MagicMock()\n        mock_metrics_service.collect_from_response = MagicMock(return_value=True)\n    \n        with patch('ai.agents.registry.get_agent', new_callable=AsyncMock) as mock_get_agent, \\\n             patch('lib.config.models.resolve_model') as mock_resolve_model, \\\n             patch('lib.utils.agno_storage_utils.create_dynamic_storage') as mock_create_storage, \\\n             patch('lib.memory.memory_factory.create_team_memory') as mock_create_memory, \\\n             patch('lib.utils.proxy_teams.Team') as mock_team_class, \\\n             patch('lib.utils.proxy_teams.logger') as mock_logger:\n    \n            # Setup mocks\n            mock_get_agent.side_effect = mock_agents\n            mock_resolve_model.return_value = mock_model\n            mock_create_storage.return_value = mock_storage\n            mock_create_memory.return_value = mock_memory\n    \n            mock_team = MagicMock()\n            mock_team_class.return_value = mock_team\n    \n            # Create team\n>           result = await proxy.create_team(\n                component_id=\"integration-test-team\",\n                config=comprehensive_config,\n                session_id=\"session-789\",\n                debug_mode=True,\n                user_id=\"user-123\",\n                db_url=\"postgresql://localhost/test\",\n                metrics_service=mock_metrics_service\n            )\n\ntests/lib_utils/test_proxy_teams.py:1106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlib/utils/proxy_teams.py:218: in create_team\n    team_params = await self._process_config(config, component_id, db_url, **kwargs)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nlib/utils/proxy_teams.py:279: in _process_config\n    handler_result = self._custom_params[key](\nlib/utils/proxy_teams.py:331: in _handle_storage_config\n    return create_dynamic_storage(\nlib/utils/agno_storage_utils.py:136: in create_dynamic_storage\n    storage_instance = storage_class(**storage_params)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/agno/storage/postgres.py:57: in __init__\n    _engine = create_engine(db_url)\n              ^^^^^^^^^^^^^^^^^^^^^\n<string>:2: in create_engine\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py:602: in create_engine\n    dbapi = dbapi_meth(**dbapi_args)\n            ^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2'>\n\n    @classmethod\n    def import_dbapi(cls):\n>       import psycopg2\nE       ModuleNotFoundError: No module named 'psycopg2'\n\n.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py:696: ModuleNotFoundError"
            }
          ]
        },
        {
          "name": "test_comprehensive_config_validation",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyIntegration::test_comprehensive_config_validation",
          "state": "passed"
        },
        {
          "name": "test_error_resilience_in_complex_workflow",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyIntegration::test_error_resilience_in_complex_workflow",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_proxy_teams.TestAgnoTeamProxyIntegration object at 0x7bb41b5d33b0>\nproxy = <lib.utils.proxy_teams.AgnoTeamProxy object at 0x7bb418256570>\ncomprehensive_config = {'context_config': {'include_metadata': True, 'max_history': 100}, 'description': 'Multi-agent team for complex proble...'max_iterations': 10, 'timeout_minutes': 30}, 'instructions': 'Coordinate team efforts to solve complex problems', ...}\n\n    @pytest.mark.asyncio\n    async def test_error_resilience_in_complex_workflow(self, proxy, comprehensive_config):\n        \"\"\"Test error handling in complex team creation scenarios.\"\"\"\n        with patch('ai.agents.registry.get_agent', new_callable=AsyncMock) as mock_get_agent, \\\n             patch('lib.config.models.resolve_model') as mock_resolve_model, \\\n             patch('lib.utils.agno_storage_utils.create_dynamic_storage') as mock_create_storage, \\\n             patch('lib.memory.memory_factory.create_team_memory') as mock_create_memory, \\\n             patch('lib.utils.proxy_teams.Team') as mock_team_class:\n    \n            # Simulate partial failures\n            mock_get_agent.side_effect = [\n                MagicMock(),  # First agent succeeds\n                Exception(\"Agent 2 failed\"),  # Second fails\n                MagicMock()   # Third succeeds\n            ]\n            mock_resolve_model.return_value = MagicMock()\n            mock_create_storage.return_value = MagicMock()\n            mock_create_memory.return_value = MagicMock()\n            mock_team_class.return_value = MagicMock()\n    \n            # Should complete despite member loading failure\n>           result = await proxy.create_team(\n                component_id=\"resilient-team\",\n                config=comprehensive_config\n            )\n\ntests/lib_utils/test_proxy_teams.py:1165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlib/utils/proxy_teams.py:218: in create_team\n    team_params = await self._process_config(config, component_id, db_url, **kwargs)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nlib/utils/proxy_teams.py:279: in _process_config\n    handler_result = self._custom_params[key](\nlib/utils/proxy_teams.py:331: in _handle_storage_config\n    return create_dynamic_storage(\nlib/utils/agno_storage_utils.py:136: in create_dynamic_storage\n    storage_instance = storage_class(**storage_params)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <agno.storage.postgres.PostgresStorage object at 0x7bb41aae0e00>\ntable_name = 'teams_resilient-team', schema = 'agno', db_url = None, db_engine = None\nschema_version = 1, auto_upgrade_schema = False, mode = 'team'\n\n    def __init__(\n        self,\n        table_name: str,\n        schema: Optional[str] = \"ai\",\n        db_url: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n        schema_version: int = 1,\n        auto_upgrade_schema: bool = False,\n        mode: Optional[Literal[\"agent\", \"team\", \"workflow\"]] = \"agent\",\n    ):\n        \"\"\"\n        This class provides agent storage using a PostgreSQL table.\n    \n        The following order is used to determine the database connection:\n            1. Use the db_engine if provided\n            2. Use the db_url\n            3. Raise an error if neither is provided\n    \n        Args:\n            table_name (str): Name of the table to store Agent sessions.\n            schema (Optional[str]): The schema to use for the table. Defaults to \"ai\".\n            db_url (Optional[str]): The database URL to connect to.\n            db_engine (Optional[Engine]): The SQLAlchemy database engine to use.\n            schema_version (int): Version of the schema. Defaults to 1.\n            auto_upgrade_schema (bool): Whether to automatically upgrade the schema.\n            mode (Optional[Literal[\"agent\", \"team\", \"workflow\"]]): The mode of the storage.\n        Raises:\n            ValueError: If neither db_url nor db_engine is provided.\n        \"\"\"\n        super().__init__(mode)\n        _engine: Optional[Engine] = db_engine\n        if _engine is None and db_url is not None:\n            _engine = create_engine(db_url)\n    \n        if _engine is None:\n>           raise ValueError(\"Must provide either db_url or db_engine\")\nE           ValueError: Must provide either db_url or db_engine\n\n.venv/lib/python3.12/site-packages/agno/storage/postgres.py:60: ValueError"
            }
          ]
        },
        {
          "name": "test_metrics_integration_full_cycle",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyIntegration::test_metrics_integration_full_cycle",
          "state": "passed"
        },
        {
          "name": "test_parameter_discovery_caching",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyPerformance::test_parameter_discovery_caching",
          "state": "passed"
        },
        {
          "name": "test_config_processing_efficiency",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyPerformance::test_config_processing_efficiency",
          "state": "passed"
        },
        {
          "name": "test_metadata_creation_scalability",
          "fullName": "tests/lib_utils/test_proxy_teams.py::TestAgnoTeamProxyPerformance::test_metadata_creation_scalability",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_version_factory.py",
      "tests": [
        {
          "name": "test_load_global_knowledge_config_success",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalKnowledgeConfig::test_load_global_knowledge_config_success",
          "state": "passed"
        },
        {
          "name": "test_load_global_knowledge_config_fallback",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalKnowledgeConfig::test_load_global_knowledge_config_fallback",
          "state": "passed"
        },
        {
          "name": "test_load_global_knowledge_config_empty_yaml",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalKnowledgeConfig::test_load_global_knowledge_config_empty_yaml",
          "state": "passed"
        },
        {
          "name": "test_load_global_knowledge_config_invalid_structure",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalKnowledgeConfig::test_load_global_knowledge_config_invalid_structure",
          "state": "passed"
        },
        {
          "name": "test_load_global_knowledge_config_missing_knowledge_key",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalKnowledgeConfig::test_load_global_knowledge_config_missing_knowledge_key",
          "state": "passed"
        },
        {
          "name": "test_load_global_knowledge_config_exception_logging",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalKnowledgeConfig::test_load_global_knowledge_config_exception_logging",
          "state": "passed"
        },
        {
          "name": "test_version_factory_initialization_success",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactory::test_version_factory_initialization_success",
          "state": "passed"
        },
        {
          "name": "test_version_factory_missing_database_url",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactory::test_version_factory_missing_database_url",
          "state": "passed"
        },
        {
          "name": "test_version_factory_empty_database_url",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactory::test_version_factory_empty_database_url",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_component_with_specific_version",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryComponentCreation::test_create_versioned_component_with_specific_version",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_component_version_not_found",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryComponentCreation::test_create_versioned_component_version_not_found",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_component_active_version",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryComponentCreation::test_create_versioned_component_active_version",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_component_yaml_fallback",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryComponentCreation::test_create_versioned_component_yaml_fallback",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_component_type_mismatch",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryComponentCreation::test_create_versioned_component_type_mismatch",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_component_unsupported_type",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryComponentCreation::test_create_versioned_component_unsupported_type",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_component_with_kwargs",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryComponentCreation::test_create_versioned_component_with_kwargs",
          "state": "passed"
        },
        {
          "name": "test_create_agent_with_inheritance",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryAgentCreation::test_create_agent_with_inheritance",
          "state": "passed"
        },
        {
          "name": "test_create_agent_without_tools",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryAgentCreation::test_create_agent_without_tools",
          "state": "passed"
        },
        {
          "name": "test_create_agent_with_minimal_params",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryAgentCreation::test_create_agent_with_minimal_params",
          "state": "passed"
        },
        {
          "name": "test_apply_team_inheritance_success",
          "fullName": "tests/lib_utils/test_version_factory.py::TestTeamInheritance::test_apply_team_inheritance_success",
          "state": "passed"
        },
        {
          "name": "test_apply_team_inheritance_no_team",
          "fullName": "tests/lib_utils/test_version_factory.py::TestTeamInheritance::test_apply_team_inheritance_no_team",
          "state": "passed"
        },
        {
          "name": "test_apply_team_inheritance_strict_validation_failure",
          "fullName": "tests/lib_utils/test_version_factory.py::TestTeamInheritance::test_apply_team_inheritance_strict_validation_failure",
          "state": "passed"
        },
        {
          "name": "test_apply_team_inheritance_non_strict_fallback",
          "fullName": "tests/lib_utils/test_version_factory.py::TestTeamInheritance::test_apply_team_inheritance_non_strict_fallback",
          "state": "passed"
        },
        {
          "name": "test_apply_team_inheritance_validation_errors",
          "fullName": "tests/lib_utils/test_version_factory.py::TestTeamInheritance::test_apply_team_inheritance_validation_errors",
          "state": "passed"
        },
        {
          "name": "test_load_agent_tools_success",
          "fullName": "tests/lib_utils/test_version_factory.py::TestAgentToolsLoading::test_load_agent_tools_success",
          "state": "passed"
        },
        {
          "name": "test_load_agent_tools_missing_tool_strict",
          "fullName": "tests/lib_utils/test_version_factory.py::TestAgentToolsLoading::test_load_agent_tools_missing_tool_strict",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestAgentToolsLoading object at 0x7bb41b411340>\nfactory = <lib.utils.version_factory.VersionFactory object at 0x7bb41af9f440>\n\n    def test_load_agent_tools_missing_tool_strict(self, factory):\n        \"\"\"Test missing tool with strict validation.\"\"\"\n        config = {\"tools\": [\"existing_tool\", \"missing_tool\"]}\n    \n        mock_tool = MagicMock()\n        mock_module = MagicMock()\n        mock_module.existing_tool = mock_tool\n        # missing_tool not in module\n    \n        with patch(\"importlib.import_module\", return_value=mock_module), \\\n             patch.dict(\"os.environ\", {\"HIVE_STRICT_VALIDATION\": \"true\"}):\n    \n>           with pytest.raises(ValueError, match=\"Agent test-agent tool validation failed\"):\nE           Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/lib_utils/test_version_factory.py:725: Failed"
            }
          ]
        },
        {
          "name": "test_load_agent_tools_missing_tool_non_strict",
          "fullName": "tests/lib_utils/test_version_factory.py::TestAgentToolsLoading::test_load_agent_tools_missing_tool_non_strict",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestAgentToolsLoading object at 0x7bb41b411580>\nfactory = <lib.utils.version_factory.VersionFactory object at 0x7bb41acb7110>\n\n    def test_load_agent_tools_missing_tool_non_strict(self, factory):\n        \"\"\"Test missing tool with non-strict validation.\"\"\"\n        config = {\"tools\": [\"existing_tool\", \"missing_tool\"]}\n    \n        mock_tool = MagicMock()\n        mock_module = MagicMock()\n        mock_module.existing_tool = mock_tool\n        # missing_tool not in module\n    \n        with patch(\"importlib.import_module\", return_value=mock_module), \\\n             patch(\"lib.utils.version_factory.logger\") as mock_logger, \\\n             patch.dict(\"os.environ\", {\"HIVE_STRICT_VALIDATION\": \"false\"}):\n    \n            tools = factory._load_agent_tools(\"test-agent\", config)\n    \n            # Should only load existing tool\n>           assert tools == [mock_tool]\nE           AssertionError: assert [<MagicMock n...13470628320'>] == [<MagicMock n...13476405200'>]\nE             \nE             Left contains one more item: \u001b[0m<MagicMock name=\u001b[33m'\u001b[39;49;00m\u001b[33mmock.missing_tool\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m \u001b[96mid\u001b[39;49;00m=\u001b[33m'\u001b[39;49;00m\u001b[33m136013470628320\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m>\u001b[90m\u001b[39;49;00m\nE             Use -v to get more diff\n\ntests/lib_utils/test_version_factory.py:744: AssertionError"
            }
          ]
        },
        {
          "name": "test_load_agent_tools_no_module_strict",
          "fullName": "tests/lib_utils/test_version_factory.py::TestAgentToolsLoading::test_load_agent_tools_no_module_strict",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestAgentToolsLoading object at 0x7bb41b4116a0>\nfactory = <lib.utils.version_factory.VersionFactory object at 0x7bb41a909d30>\n\n    def test_load_agent_tools_no_module_strict(self, factory):\n        \"\"\"Test missing tools module with strict validation.\"\"\"\n        config = {\"tools\": [\"some_tool\"]}\n    \n>       with patch(\"importlib.import_module\", side_effect=ImportError(\"No module\")), \\\n             patch.dict(\"os.environ\", {\"HIVE_STRICT_VALIDATION\": \"true\"}):\n\ntests/lib_utils/test_version_factory.py:753: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1875: in __enter__\n    self._patch_dict()\n/usr/lib/python3.12/unittest/mock.py:1882: in _patch_dict\n    self.in_dict = pkgutil.resolve_name(self.in_dict)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/pkgutil.py:513: in resolve_name\n    mod = importlib.import_module(modname)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1134: in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1138: in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <MagicMock name='import_module' id='136013474560240'>, args = ('os',), kwargs = {}\neffect = ImportError('No module')\n\n    def _execute_mock_call(self, /, *args, **kwargs):\n        # separate from _increment_mock_call so that awaited functions are\n        # executed separately from their call, also AsyncMock overrides this method\n    \n        effect = self.side_effect\n        if effect is not None:\n            if _is_exception(effect):\n>               raise effect\nE               ImportError: No module\n\n/usr/lib/python3.12/unittest/mock.py:1193: ImportError"
            }
          ]
        },
        {
          "name": "test_load_agent_tools_no_module_non_strict",
          "fullName": "tests/lib_utils/test_version_factory.py::TestAgentToolsLoading::test_load_agent_tools_no_module_non_strict",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestAgentToolsLoading object at 0x7bb41b411910>\nfactory = <lib.utils.version_factory.VersionFactory object at 0x7bb41aae79b0>\n\n    def test_load_agent_tools_no_module_non_strict(self, factory):\n        \"\"\"Test missing tools module with non-strict validation.\"\"\"\n        config = {\"tools\": []}  # No tools configured\n    \n>       with patch(\"importlib.import_module\", side_effect=ImportError(\"No module\")), \\\n             patch(\"lib.utils.version_factory.logger\") as mock_logger, \\\n             patch.dict(\"os.environ\", {\"HIVE_STRICT_VALIDATION\": \"false\"}):\n\ntests/lib_utils/test_version_factory.py:763: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n                  ^^^^^^^^^^^^^\n/usr/lib/python3.12/pkgutil.py:513: in resolve_name\n    mod = importlib.import_module(modname)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1134: in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1138: in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <MagicMock name='import_module' id='136013473763344'>, args = ('lib',)\nkwargs = {}, effect = ImportError('No module')\n\n    def _execute_mock_call(self, /, *args, **kwargs):\n        # separate from _increment_mock_call so that awaited functions are\n        # executed separately from their call, also AsyncMock overrides this method\n    \n        effect = self.side_effect\n        if effect is not None:\n            if _is_exception(effect):\n>               raise effect\nE               ImportError: No module\n\n/usr/lib/python3.12/unittest/mock.py:1193: ImportError"
            }
          ]
        },
        {
          "name": "test_load_agent_tools_auto_load_all",
          "fullName": "tests/lib_utils/test_version_factory.py::TestAgentToolsLoading::test_load_agent_tools_auto_load_all",
          "state": "passed"
        },
        {
          "name": "test_load_agent_tools_unexpected_error_strict",
          "fullName": "tests/lib_utils/test_version_factory.py::TestAgentToolsLoading::test_load_agent_tools_unexpected_error_strict",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestAgentToolsLoading object at 0x7bb41b411df0>\nfactory = <lib.utils.version_factory.VersionFactory object at 0x7bb41ad83020>\n\n    def test_load_agent_tools_unexpected_error_strict(self, factory):\n        \"\"\"Test unexpected error during tool loading with strict validation.\"\"\"\n        config = {\"tools\": [\"some_tool\"]}\n    \n>       with patch(\"importlib.import_module\", side_effect=Exception(\"Unexpected error\")), \\\n             patch.dict(\"os.environ\", {\"HIVE_STRICT_VALIDATION\": \"true\"}):\n\ntests/lib_utils/test_version_factory.py:800: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1875: in __enter__\n    self._patch_dict()\n/usr/lib/python3.12/unittest/mock.py:1882: in _patch_dict\n    self.in_dict = pkgutil.resolve_name(self.in_dict)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/pkgutil.py:513: in resolve_name\n    mod = importlib.import_module(modname)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1134: in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/unittest/mock.py:1138: in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <MagicMock name='import_module' id='136013455865040'>, args = ('os',), kwargs = {}\neffect = Exception('Unexpected error')\n\n    def _execute_mock_call(self, /, *args, **kwargs):\n        # separate from _increment_mock_call so that awaited functions are\n        # executed separately from their call, also AsyncMock overrides this method\n    \n        effect = self.side_effect\n        if effect is not None:\n            if _is_exception(effect):\n>               raise effect\nE               Exception: Unexpected error\n\n/usr/lib/python3.12/unittest/mock.py:1193: Exception"
            }
          ]
        },
        {
          "name": "test_create_team_success",
          "fullName": "tests/lib_utils/test_version_factory.py::TestTeamCreation::test_create_team_success",
          "state": "passed"
        },
        {
          "name": "test_create_team_validation_failure",
          "fullName": "tests/lib_utils/test_version_factory.py::TestTeamCreation::test_create_team_validation_failure",
          "state": "passed"
        },
        {
          "name": "test_create_team_proxy_error",
          "fullName": "tests/lib_utils/test_version_factory.py::TestTeamCreation::test_create_team_proxy_error",
          "state": "passed"
        },
        {
          "name": "test_create_workflow_success",
          "fullName": "tests/lib_utils/test_version_factory.py::TestWorkflowCreation::test_create_workflow_success",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestWorkflowCreation object at 0x7bb41b4128d0>\nfactory = <lib.utils.version_factory.VersionFactory object at 0x7bb41ab03c20>\n\n    @pytest.mark.asyncio\n    async def test_create_workflow_success(self, factory):\n        \"\"\"Test successful workflow creation.\"\"\"\n        config = {\"name\": \"Test Workflow\", \"steps\": [{\"name\": \"step1\"}, {\"name\": \"step2\"}]}\n    \n        mock_workflow = MagicMock()\n    \n>       with patch(\"lib.utils.version_factory.get_agno_workflow_proxy\") as mock_proxy_func, \\\n             patch(\"lib.utils.version_factory.logger\") as mock_logger:\n\ntests/lib_utils/test_version_factory.py:936: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb41ab01970>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.utils.version_factory' from '/home/namastex/workspace/automagik-hive/lib/utils/version_factory.py'> does not have the attribute 'get_agno_workflow_proxy'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_create_workflow_minimal_params",
          "fullName": "tests/lib_utils/test_version_factory.py::TestWorkflowCreation::test_create_workflow_minimal_params",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestWorkflowCreation object at 0x7bb41b412420>\nfactory = <lib.utils.version_factory.VersionFactory object at 0x7bb419d75670>\n\n    @pytest.mark.asyncio\n    async def test_create_workflow_minimal_params(self, factory):\n        \"\"\"Test workflow creation with minimal parameters.\"\"\"\n        config = {\"name\": \"Minimal Workflow\"}\n    \n        mock_workflow = MagicMock()\n    \n>       with patch(\"lib.utils.version_factory.get_agno_workflow_proxy\") as mock_proxy_func:\n\ntests/lib_utils/test_version_factory.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3.12/unittest/mock.py:1458: in __enter__\n    original, local = self.get_original()\n                      ^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unittest.mock._patch object at 0x7bb419d76180>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'lib.utils.version_factory' from '/home/namastex/workspace/automagik-hive/lib/utils/version_factory.py'> does not have the attribute 'get_agno_workflow_proxy'\n\n/usr/lib/python3.12/unittest/mock.py:1431: AttributeError"
            }
          ]
        },
        {
          "name": "test_create_component_from_yaml_agent",
          "fullName": "tests/lib_utils/test_version_factory.py::TestYamlFallback::test_create_component_from_yaml_agent",
          "state": "passed"
        },
        {
          "name": "test_create_component_from_yaml_missing_file",
          "fullName": "tests/lib_utils/test_version_factory.py::TestYamlFallback::test_create_component_from_yaml_missing_file",
          "state": "passed"
        },
        {
          "name": "test_create_component_from_yaml_invalid_yaml",
          "fullName": "tests/lib_utils/test_version_factory.py::TestYamlFallback::test_create_component_from_yaml_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_create_component_from_yaml_missing_section",
          "fullName": "tests/lib_utils/test_version_factory.py::TestYamlFallback::test_create_component_from_yaml_missing_section",
          "state": "passed"
        },
        {
          "name": "test_create_component_from_yaml_unsupported_type",
          "fullName": "tests/lib_utils/test_version_factory.py::TestYamlFallback::test_create_component_from_yaml_unsupported_type",
          "state": "passed"
        },
        {
          "name": "test_get_version_factory_singleton",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalFactoryFunctions::test_get_version_factory_singleton",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.lib_utils.test_version_factory.TestGlobalFactoryFunctions object at 0x7bb41b413800>\n\n    def test_get_version_factory_singleton(self):\n        \"\"\"Test get_version_factory returns singleton instance.\"\"\"\n        from lib.utils.version_factory import get_version_factory\n    \n        with patch(\"lib.utils.version_factory.VersionFactory\") as mock_factory_class, \\\n             patch.dict(\"os.environ\", {\"HIVE_DATABASE_URL\": \"postgresql://test\"}):\n    \n            mock_factory = MagicMock()\n            mock_factory_class.return_value = mock_factory\n    \n            # First call should create factory\n            factory1 = get_version_factory()\n>           assert factory1 == mock_factory\nE           AssertionError: assert <lib.utils.version_factory.VersionFactory object at 0x7bb41adfd010> == <MagicMock name='VersionFactory()' id='136013470543424'>\n\ntests/lib_utils/test_version_factory.py:1148: AssertionError"
            }
          ]
        },
        {
          "name": "test_create_agent_function",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalFactoryFunctions::test_create_agent_function",
          "state": "passed"
        },
        {
          "name": "test_create_team_function",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalFactoryFunctions::test_create_team_function",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_workflow_function",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalFactoryFunctions::test_create_versioned_workflow_function",
          "state": "passed"
        },
        {
          "name": "test_global_factory_reset",
          "fullName": "tests/lib_utils/test_version_factory.py::TestGlobalFactoryFunctions::test_global_factory_reset",
          "state": "passed"
        },
        {
          "name": "test_load_global_knowledge_config_real_execution",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_load_global_knowledge_config_real_execution",
          "state": "passed"
        },
        {
          "name": "test_version_factory_real_initialization",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_version_factory_real_initialization",
          "state": "passed"
        },
        {
          "name": "test_create_versioned_component_real_coverage",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_create_versioned_component_real_coverage",
          "state": "passed"
        },
        {
          "name": "test_yaml_fallback_real_coverage",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_yaml_fallback_real_coverage",
          "state": "passed"
        },
        {
          "name": "test_singleton_pattern_real_coverage",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_singleton_pattern_real_coverage",
          "state": "passed"
        },
        {
          "name": "test_global_functions_real_coverage",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_global_functions_real_coverage",
          "state": "passed"
        },
        {
          "name": "test_yaml_fallback_method_coverage",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_yaml_fallback_method_coverage",
          "state": "passed"
        },
        {
          "name": "test_inheritance_and_tools_basic_coverage",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_inheritance_and_tools_basic_coverage",
          "state": "passed"
        },
        {
          "name": "test_error_cases_real_coverage",
          "fullName": "tests/lib_utils/test_version_factory.py::TestVersionFactoryWorkingCore::test_error_cases_real_coverage",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_utils/test_yaml_cache_comprehensive.py",
      "tests": [
        {
          "name": "test_yaml_cache_manager_creation",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_yaml_cache_manager_creation",
          "state": "passed"
        },
        {
          "name": "test_get_yaml_cache_manager_singleton",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_get_yaml_cache_manager_singleton",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_file_loading",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_yaml_cache_file_loading",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_file_modification_detection",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_yaml_cache_file_modification_detection",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_invalid_file_handling",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_yaml_cache_invalid_file_handling",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_permission_error_handling",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_yaml_cache_permission_error_handling",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_clear_functionality",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_yaml_cache_clear_functionality",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_thread_safety",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_yaml_cache_thread_safety",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_memory_management",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYAMLCacheManager::test_yaml_cache_memory_management",
          "state": "passed"
        },
        {
          "name": "test_load_yaml_cached_function",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheUtilityFunctions::test_load_yaml_cached_function",
          "state": "passed"
        },
        {
          "name": "test_discover_components_cached_function",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheUtilityFunctions::test_discover_components_cached_function",
          "state": "passed"
        },
        {
          "name": "test_discover_components_empty_directory",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheUtilityFunctions::test_discover_components_empty_directory",
          "state": "passed"
        },
        {
          "name": "test_discover_components_non_existent_directory",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheUtilityFunctions::test_discover_components_non_existent_directory",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_error_recovery",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheUtilityFunctions::test_yaml_cache_error_recovery",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_mtime_comparison",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheUtilityFunctions::test_yaml_cache_mtime_comparison",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_large_file_handling",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheUtilityFunctions::test_yaml_cache_large_file_handling",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_concurrent_access",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheUtilityFunctions::test_yaml_cache_concurrent_access",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_symlink_handling",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheEdgeCases::test_yaml_cache_symlink_handling",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_unicode_content",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheEdgeCases::test_yaml_cache_unicode_content",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_binary_file_handling",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheEdgeCases::test_yaml_cache_binary_file_handling",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_very_long_path",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheEdgeCases::test_yaml_cache_very_long_path",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_rapid_file_changes",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheEdgeCases::test_yaml_cache_rapid_file_changes",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_circular_references",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCacheEdgeCases::test_yaml_cache_circular_references",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_performance_benchmark",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCachePerformance::test_yaml_cache_performance_benchmark",
          "state": "passed"
        },
        {
          "name": "test_yaml_cache_memory_efficiency",
          "fullName": "tests/lib_utils/test_yaml_cache_comprehensive.py::TestYamlCachePerformance::test_yaml_cache_memory_efficiency",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_validation/test_models_comprehensive.py",
      "tests": [
        {
          "name": "test_base_model_config",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestBaseValidatedRequest::test_base_model_config",
          "state": "passed"
        },
        {
          "name": "test_base_model_creation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestBaseValidatedRequest::test_base_model_creation",
          "state": "passed"
        },
        {
          "name": "test_base_model_extra_fields_forbidden",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestBaseValidatedRequest::test_base_model_extra_fields_forbidden",
          "state": "passed"
        },
        {
          "name": "test_agent_request_valid_creation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestAgentRequest::test_agent_request_valid_creation",
          "state": "passed"
        },
        {
          "name": "test_agent_request_all_fields",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestAgentRequest::test_agent_request_all_fields",
          "state": "passed"
        },
        {
          "name": "test_agent_request_message_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestAgentRequest::test_agent_request_message_validation",
          "state": "passed"
        },
        {
          "name": "test_agent_request_message_sanitization",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestAgentRequest::test_agent_request_message_sanitization",
          "state": "passed"
        },
        {
          "name": "test_agent_request_session_id_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestAgentRequest::test_agent_request_session_id_validation",
          "state": "passed"
        },
        {
          "name": "test_agent_request_user_id_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestAgentRequest::test_agent_request_user_id_validation",
          "state": "passed"
        },
        {
          "name": "test_agent_request_context_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestAgentRequest::test_agent_request_context_validation",
          "state": "passed"
        },
        {
          "name": "test_agent_request_stream_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestAgentRequest::test_agent_request_stream_validation",
          "state": "passed"
        },
        {
          "name": "test_team_request_valid_creation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestTeamRequest::test_team_request_valid_creation",
          "state": "passed"
        },
        {
          "name": "test_team_request_all_fields",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestTeamRequest::test_team_request_all_fields",
          "state": "passed"
        },
        {
          "name": "test_team_request_task_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestTeamRequest::test_team_request_task_validation",
          "state": "passed"
        },
        {
          "name": "test_team_request_task_sanitization",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestTeamRequest::test_team_request_task_sanitization",
          "state": "passed"
        },
        {
          "name": "test_team_request_team_id_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestTeamRequest::test_team_request_team_id_validation",
          "state": "passed"
        },
        {
          "name": "test_team_request_context_default",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestTeamRequest::test_team_request_context_default",
          "state": "passed"
        },
        {
          "name": "test_workflow_request_valid_creation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestWorkflowRequest::test_workflow_request_valid_creation",
          "state": "passed"
        },
        {
          "name": "test_workflow_request_all_fields",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestWorkflowRequest::test_workflow_request_all_fields",
          "state": "passed"
        },
        {
          "name": "test_workflow_request_workflow_id_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestWorkflowRequest::test_workflow_request_workflow_id_validation",
          "state": "passed"
        },
        {
          "name": "test_workflow_request_input_data_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestWorkflowRequest::test_workflow_request_input_data_validation",
          "state": "passed"
        },
        {
          "name": "test_workflow_request_recursive_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestWorkflowRequest::test_workflow_request_recursive_validation",
          "state": "passed"
        },
        {
          "name": "test_health_request_creation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestHealthRequest::test_health_request_creation",
          "state": "passed"
        },
        {
          "name": "test_version_request_creation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestVersionRequest::test_version_request_creation",
          "state": "passed"
        },
        {
          "name": "test_error_response_creation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestErrorResponse::test_error_response_creation",
          "state": "passed"
        },
        {
          "name": "test_error_response_all_fields",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestErrorResponse::test_error_response_all_fields",
          "state": "passed"
        },
        {
          "name": "test_error_response_required_field",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestErrorResponse::test_error_response_required_field",
          "state": "passed"
        },
        {
          "name": "test_success_response_creation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestSuccessResponse::test_success_response_creation",
          "state": "passed"
        },
        {
          "name": "test_success_response_all_fields",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestSuccessResponse::test_success_response_all_fields",
          "state": "passed"
        },
        {
          "name": "test_success_response_false_success",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestSuccessResponse::test_success_response_false_success",
          "state": "passed"
        },
        {
          "name": "test_all_models_importable",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationModelsIntegration::test_all_models_importable",
          "state": "passed"
        },
        {
          "name": "test_model_inheritance",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationModelsIntegration::test_model_inheritance",
          "state": "passed"
        },
        {
          "name": "test_field_descriptions",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationModelsIntegration::test_field_descriptions",
          "state": "passed"
        },
        {
          "name": "test_regex_patterns",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationModelsIntegration::test_regex_patterns",
          "state": "passed"
        },
        {
          "name": "test_model_serialization",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationModelsIntegration::test_model_serialization",
          "state": "passed"
        },
        {
          "name": "test_dangerous_key_variations",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationEdgeCases::test_dangerous_key_variations",
          "state": "passed"
        },
        {
          "name": "test_boundary_values",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationEdgeCases::test_boundary_values",
          "state": "passed"
        },
        {
          "name": "test_unicode_handling",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationEdgeCases::test_unicode_handling",
          "state": "passed"
        },
        {
          "name": "test_deeply_nested_context_validation",
          "fullName": "tests/lib_validation/test_models_comprehensive.py::TestValidationEdgeCases::test_deeply_nested_context_validation",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_validation/test_models_production_coverage.py",
      "tests": [
        {
          "name": "test_base_model_config_extra_forbid",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionBaseValidatedRequest::test_base_model_config_extra_forbid",
          "state": "passed"
        },
        {
          "name": "test_base_model_config_validate_assignment",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionBaseValidatedRequest::test_base_model_config_validate_assignment",
          "state": "passed"
        },
        {
          "name": "test_base_model_config_use_enum_values",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionBaseValidatedRequest::test_base_model_config_use_enum_values",
          "state": "passed"
        },
        {
          "name": "test_base_model_inheritance",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionBaseValidatedRequest::test_base_model_inheritance",
          "state": "passed"
        },
        {
          "name": "test_message_sanitization_html_removal",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_message_sanitization_html_removal",
          "state": "passed"
        },
        {
          "name": "test_message_sanitization_quote_removal",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_message_sanitization_quote_removal",
          "state": "passed"
        },
        {
          "name": "test_message_sanitization_bracket_removal",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_message_sanitization_bracket_removal",
          "state": "passed"
        },
        {
          "name": "test_message_empty_validation",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_message_empty_validation",
          "state": "passed"
        },
        {
          "name": "test_message_whitespace_only_validation",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_message_whitespace_only_validation",
          "state": "passed"
        },
        {
          "name": "test_message_whitespace_stripping",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_message_whitespace_stripping",
          "state": "passed"
        },
        {
          "name": "test_context_none_validation",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_context_none_validation",
          "state": "passed"
        },
        {
          "name": "test_context_size_limit_within_bounds",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_context_size_limit_within_bounds",
          "state": "passed"
        },
        {
          "name": "test_context_size_limit_exceeded",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_context_size_limit_exceeded",
          "state": "passed"
        },
        {
          "name": "test_context_dangerous_keys_detection",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_context_dangerous_keys_detection",
          "state": "passed"
        },
        {
          "name": "test_context_dangerous_keys_case_insensitive",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_context_dangerous_keys_case_insensitive",
          "state": "passed"
        },
        {
          "name": "test_session_id_regex_validation_valid",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_session_id_regex_validation_valid",
          "state": "passed"
        },
        {
          "name": "test_session_id_regex_validation_invalid",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_session_id_regex_validation_invalid",
          "state": "passed"
        },
        {
          "name": "test_user_id_regex_validation",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_user_id_regex_validation",
          "state": "passed"
        },
        {
          "name": "test_stream_field_default",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_stream_field_default",
          "state": "passed"
        },
        {
          "name": "test_stream_field_explicit",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionAgentRequestValidation::test_stream_field_explicit",
          "state": "passed"
        },
        {
          "name": "test_task_sanitization_logic",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionTeamRequestValidation::test_task_sanitization_logic",
          "state": "passed"
        },
        {
          "name": "test_task_empty_validation",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionTeamRequestValidation::test_task_empty_validation",
          "state": "passed"
        },
        {
          "name": "test_task_whitespace_validation",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionTeamRequestValidation::test_task_whitespace_validation",
          "state": "passed"
        },
        {
          "name": "test_task_whitespace_stripping",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionTeamRequestValidation::test_task_whitespace_stripping",
          "state": "passed"
        },
        {
          "name": "test_context_default_factory",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionTeamRequestValidation::test_context_default_factory",
          "state": "passed"
        },
        {
          "name": "test_team_id_validation",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionTeamRequestValidation::test_team_id_validation",
          "state": "passed"
        },
        {
          "name": "test_input_data_size_limit_within_bounds",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionWorkflowRequestValidation::test_input_data_size_limit_within_bounds",
          "state": "passed"
        },
        {
          "name": "test_input_data_size_limit_exceeded",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionWorkflowRequestValidation::test_input_data_size_limit_exceeded",
          "state": "passed"
        },
        {
          "name": "test_input_data_recursive_validation_safe",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionWorkflowRequestValidation::test_input_data_recursive_validation_safe",
          "state": "passed"
        },
        {
          "name": "test_input_data_recursive_validation_dangerous",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionWorkflowRequestValidation::test_input_data_recursive_validation_dangerous",
          "state": "passed"
        },
        {
          "name": "test_input_data_recursive_check_dict_condition",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionWorkflowRequestValidation::test_input_data_recursive_check_dict_condition",
          "state": "passed"
        },
        {
          "name": "test_input_data_dangerous_keys_top_level",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionWorkflowRequestValidation::test_input_data_dangerous_keys_top_level",
          "state": "passed"
        },
        {
          "name": "test_workflow_id_validation",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionWorkflowRequestValidation::test_workflow_id_validation",
          "state": "passed"
        },
        {
          "name": "test_input_data_default_factory",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionWorkflowRequestValidation::test_input_data_default_factory",
          "state": "passed"
        },
        {
          "name": "test_error_response_required_field",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionResponseModels::test_error_response_required_field",
          "state": "passed"
        },
        {
          "name": "test_error_response_all_fields",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionResponseModels::test_error_response_all_fields",
          "state": "passed"
        },
        {
          "name": "test_success_response_defaults",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionResponseModels::test_success_response_defaults",
          "state": "passed"
        },
        {
          "name": "test_success_response_all_fields",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionResponseModels::test_success_response_all_fields",
          "state": "passed"
        },
        {
          "name": "test_unicode_handling",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionValidationEdgeCases::test_unicode_handling",
          "state": "passed"
        },
        {
          "name": "test_boundary_length_values",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionValidationEdgeCases::test_boundary_length_values",
          "state": "passed"
        },
        {
          "name": "test_model_serialization",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionValidationEdgeCases::test_model_serialization",
          "state": "passed"
        },
        {
          "name": "test_field_descriptions",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionValidationEdgeCases::test_field_descriptions",
          "state": "passed"
        },
        {
          "name": "test_dangerous_key_substring_matching",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionSecurityValidation::test_dangerous_key_substring_matching",
          "state": "passed"
        },
        {
          "name": "test_complex_nested_dangerous_keys",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionSecurityValidation::test_complex_nested_dangerous_keys",
          "state": "passed"
        },
        {
          "name": "test_mixed_dangerous_and_safe_keys",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionSecurityValidation::test_mixed_dangerous_and_safe_keys",
          "state": "passed"
        },
        {
          "name": "test_agent_request_full_validation_chain",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionValidationIntegration::test_agent_request_full_validation_chain",
          "state": "passed"
        },
        {
          "name": "test_workflow_request_full_validation_chain",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionValidationIntegration::test_workflow_request_full_validation_chain",
          "state": "passed"
        },
        {
          "name": "test_all_models_inheritance_structure",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionValidationIntegration::test_all_models_inheritance_structure",
          "state": "passed"
        },
        {
          "name": "test_minimal_request_models",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::TestProductionValidationIntegration::test_minimal_request_models",
          "state": "passed"
        },
        {
          "name": "test_production_sanitization_patterns",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::test_production_sanitization_patterns",
          "state": "passed"
        },
        {
          "name": "test_production_dangerous_keys_logic",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::test_production_dangerous_keys_logic",
          "state": "passed"
        },
        {
          "name": "test_production_size_limits",
          "fullName": "tests/lib_validation/test_models_production_coverage.py::test_production_size_limits",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/lib_validation/test_production_code_analysis.py",
      "tests": [
        {
          "name": "test_production_code_import_analysis",
          "fullName": "tests/lib_validation/test_production_code_analysis.py::test_production_code_import_analysis",
          "state": "passed"
        },
        {
          "name": "test_production_validation_logic_verification",
          "fullName": "tests/lib_validation/test_production_code_analysis.py::test_production_validation_logic_verification",
          "state": "passed"
        },
        {
          "name": "test_production_dangerous_keys_verification",
          "fullName": "tests/lib_validation/test_production_code_analysis.py::test_production_dangerous_keys_verification",
          "state": "passed"
        },
        {
          "name": "test_production_field_constraints_documentation",
          "fullName": "tests/lib_validation/test_production_code_analysis.py::test_production_field_constraints_documentation",
          "state": "passed"
        },
        {
          "name": "test_coverage_strategy_documentation",
          "fullName": "tests/lib_validation/test_production_code_analysis.py::test_coverage_strategy_documentation",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/registry/test_agents_registry.py",
      "tests": [
        {
          "name": "test_discover_agents_with_valid_configs",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentDiscovery::test_discover_agents_with_valid_configs",
          "state": "passed"
        },
        {
          "name": "test_discover_agents_no_agents_directory",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentDiscovery::test_discover_agents_no_agents_directory",
          "state": "passed"
        },
        {
          "name": "test_discover_agents_invalid_yaml",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentDiscovery::test_discover_agents_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_discover_agents_missing_agent_id",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentDiscovery::test_discover_agents_missing_agent_id",
          "state": "passed"
        },
        {
          "name": "test_discover_agents_sorted_output",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentDiscovery::test_discover_agents_sorted_output",
          "state": "passed"
        },
        {
          "name": "test_agent_registry_get_available_agents",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_get_available_agents",
          "state": "passed"
        },
        {
          "name": "test_agent_registry_get_agent_success",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_get_agent_success",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.registry.test_agents_registry.TestAgentRegistry object at 0x7bb41b30a9c0>\nmock_database_layer = {'agent': <MagicMock id='136013455860000'>, 'component_service': <AsyncMock id='136013455437376'>, 'db_service': <AsyncMock id='136013476554384'>, 'version_service': <AsyncMock id='136013470032256'>}\n\n    @pytest.mark.asyncio\n    async def test_agent_registry_get_agent_success(self, mock_database_layer):\n        \"\"\"Test successfully getting an agent.\"\"\"\n        agent_id = \"test-agent\"\n        mock_agent = mock_database_layer[\"agent\"]\n    \n        with patch(\"ai.agents.registry._discover_agents\", return_value=[agent_id]):\n>           agent = await AgentRegistry.get_agent(\n                agent_id=agent_id,\n                version=1,\n                session_id=\"test-session\",\n                debug_mode=True,\n                user_id=\"test-user\",\n            )\n\ntests/registry/test_agents_registry.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nai/agents/registry.py:106: in get_agent\n    return await create_agent(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nagent_id = 'test-agent', version = 1, metrics_service = None\nkwargs = {'debug_mode': True, 'session_id': 'test-session', 'user_id': 'test-user'}\n\n    async def create_agent(\n        agent_id: str,\n        version: int | None = None,\n        metrics_service: object | None = None,\n        **kwargs,\n    ) -> Agent:\n        \"\"\"Create agent using factory pattern.\"\"\"\n>       return await get_version_factory().create_versioned_component(\n            agent_id, \"agent\", version, metrics_service=metrics_service, **kwargs\n        )\nE       TypeError: object MagicMock can't be used in 'await' expression\n\nlib/utils/version_factory.py:693: TypeError"
            }
          ]
        },
        {
          "name": "test_agent_registry_get_agent_not_found",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_get_agent_not_found",
          "state": "passed"
        },
        {
          "name": "test_agent_registry_get_all_agents",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_get_all_agents",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.registry.test_agents_registry.TestAgentRegistry object at 0x7bb41b30ac30>\nmock_database_layer = {'agent': <MagicMock id='136013476545744'>, 'component_service': <AsyncMock id='136013475557456'>, 'db_service': <AsyncMock id='136013474754448'>, 'version_service': <AsyncMock id='136013473995312'>}\n\n    @pytest.mark.asyncio\n    async def test_agent_registry_get_all_agents(self, mock_database_layer):\n        \"\"\"Test getting all available agents.\"\"\"\n        agent_ids = [\"agent-1\", \"agent-2\"]\n    \n        with patch(\"ai.agents.registry._discover_agents\", return_value=agent_ids):\n            agents = await AgentRegistry.get_all_agents(\n                session_id=\"test-session\",\n                debug_mode=False,\n            )\n    \n>       assert len(agents) == 2\nE       assert 0 == 2\nE        +  where 0 = len({})\n\ntests/registry/test_agents_registry.py:187: AssertionError"
            }
          ]
        },
        {
          "name": "test_agent_registry_get_all_agents_with_failures",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_get_all_agents_with_failures",
          "state": "passed"
        },
        {
          "name": "test_agent_registry_list_available_agents",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_list_available_agents",
          "state": "passed"
        },
        {
          "name": "test_agent_registry_mcp_catalog_singleton",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_mcp_catalog_singleton",
          "state": "passed"
        },
        {
          "name": "test_agent_registry_list_mcp_servers",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_list_mcp_servers",
          "state": "passed"
        },
        {
          "name": "test_agent_registry_get_mcp_server_info",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_get_mcp_server_info",
          "state": "passed"
        },
        {
          "name": "test_agent_registry_reload_mcp_catalog",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistry::test_agent_registry_reload_mcp_catalog",
          "state": "passed"
        },
        {
          "name": "test_get_agent_function",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryGlobalFunctions::test_get_agent_function",
          "state": "passed"
        },
        {
          "name": "test_get_team_agents_function",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryGlobalFunctions::test_get_team_agents_function",
          "state": "passed"
        },
        {
          "name": "test_list_mcp_servers_function",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryGlobalFunctions::test_list_mcp_servers_function",
          "state": "passed"
        },
        {
          "name": "test_get_mcp_server_info_function",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryGlobalFunctions::test_get_mcp_server_info_function",
          "state": "passed"
        },
        {
          "name": "test_reload_mcp_catalog_function",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryGlobalFunctions::test_reload_mcp_catalog_function",
          "state": "passed"
        },
        {
          "name": "test_get_agent_with_all_parameters",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryEdgeCases::test_get_agent_with_all_parameters",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.registry.test_agents_registry.TestAgentRegistryEdgeCases object at 0x7bb41b334a70>\nmock_database_layer = {'agent': <MagicMock id='136013475128592'>, 'component_service': <AsyncMock id='136013455859520'>, 'db_service': <AsyncMock id='136013462099712'>, 'version_service': <AsyncMock id='136013470690688'>}\n\n    @pytest.mark.asyncio\n    async def test_get_agent_with_all_parameters(self, mock_database_layer):\n        \"\"\"Test get_agent with all possible parameters.\"\"\"\n        agent_id = \"full-param-agent\"\n    \n        with patch(\"ai.agents.registry._discover_agents\", return_value=[agent_id]):\n>           agent = await AgentRegistry.get_agent(\n                agent_id=agent_id,\n                version=5,\n                session_id=\"full-session\",\n                debug_mode=True,\n                db_url=\"postgresql://test:test@localhost/test\",\n                memory={\"key\": \"value\"},\n                user_id=\"full-user\",\n                pb_phone_number=\"+5511999999999\",\n                pb_cpf=\"11122233344\",\n            )\n\ntests/registry/test_agents_registry.py:414: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nai/agents/registry.py:106: in get_agent\n    return await create_agent(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nagent_id = 'full-param-agent', version = 5, metrics_service = None\nkwargs = {'debug_mode': True, 'session_id': 'full-session', 'user_id': 'full-user'}\n\n    async def create_agent(\n        agent_id: str,\n        version: int | None = None,\n        metrics_service: object | None = None,\n        **kwargs,\n    ) -> Agent:\n        \"\"\"Create agent using factory pattern.\"\"\"\n>       return await get_version_factory().create_versioned_component(\n            agent_id, \"agent\", version, metrics_service=metrics_service, **kwargs\n        )\nE       TypeError: object MagicMock can't be used in 'await' expression\n\nlib/utils/version_factory.py:693: TypeError"
            }
          ]
        },
        {
          "name": "test_get_team_agents_empty_list",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryEdgeCases::test_get_team_agents_empty_list",
          "state": "passed"
        },
        {
          "name": "test_get_all_agents_empty_discovery",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryEdgeCases::test_get_all_agents_empty_discovery",
          "state": "passed"
        },
        {
          "name": "test_mcp_catalog_error_handling",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryEdgeCases::test_mcp_catalog_error_handling",
          "state": "passed"
        },
        {
          "name": "test_discover_agents_file_read_error",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryEdgeCases::test_discover_agents_file_read_error",
          "state": "passed"
        },
        {
          "name": "test_full_agent_lifecycle",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryIntegration::test_full_agent_lifecycle",
          "state": "failed",
          "errors": [
            {
              "message": "self = <tests.registry.test_agents_registry.TestAgentRegistryIntegration object at 0x7bb41b30ba10>\nsample_agent_config = {'agent': {'agent_id': 'integration-agent', 'name': 'Test Agent', 'version': '1.0.0'}, 'instructions': 'Test instructions for the agent.', 'model': {'id': 'claude-sonnet-4-20250514', 'provider': 'anthropic', 'temperature': 0.7}}\nmock_database_layer = {'agent': <MagicMock id='136013470689872'>, 'component_service': <AsyncMock id='136013429332432'>, 'db_service': <AsyncMock id='136013475039376'>, 'version_service': <AsyncMock id='136013459456416'>}\n\n    @pytest.mark.asyncio\n    async def test_full_agent_lifecycle(self, sample_agent_config, mock_database_layer):\n        \"\"\"Test full agent lifecycle from discovery to creation.\"\"\"\n        agent_id = \"integration-agent\"\n        mock_agent = mock_database_layer[\"agent\"]\n    \n        # Mock the entire flow\n        config_with_id = sample_agent_config.copy()\n        config_with_id[\"agent\"][\"agent_id\"] = agent_id\n    \n        with patch(\"ai.agents.registry._discover_agents\", return_value=[agent_id]):\n            # Test discovery\n            available_agents = AgentRegistry.list_available_agents()\n            assert agent_id in available_agents\n    \n            # Test creation\n>           agent = await AgentRegistry.get_agent(agent_id)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/registry/test_agents_registry.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nai/agents/registry.py:106: in get_agent\n    return await create_agent(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nagent_id = 'integration-agent', version = None, metrics_service = None\nkwargs = {'debug_mode': False, 'session_id': None, 'user_id': None}\n\n    async def create_agent(\n        agent_id: str,\n        version: int | None = None,\n        metrics_service: object | None = None,\n        **kwargs,\n    ) -> Agent:\n        \"\"\"Create agent using factory pattern.\"\"\"\n>       return await get_version_factory().create_versioned_component(\n            agent_id, \"agent\", version, metrics_service=metrics_service, **kwargs\n        )\nE       TypeError: object MagicMock can't be used in 'await' expression\n\nlib/utils/version_factory.py:693: TypeError"
            }
          ]
        },
        {
          "name": "test_mcp_integration",
          "fullName": "tests/registry/test_agents_registry.py::TestAgentRegistryIntegration::test_mcp_integration",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/security/test_api_routes_security.py",
      "tests": [
        {
          "name": "test_health_endpoint_unauthenticated_access",
          "fullName": "tests/security/test_api_routes_security.py::TestHealthEndpointSecurity::test_health_endpoint_unauthenticated_access",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_information_disclosure",
          "fullName": "tests/security/test_api_routes_security.py::TestHealthEndpointSecurity::test_health_endpoint_information_disclosure",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_http_methods",
          "fullName": "tests/security/test_api_routes_security.py::TestHealthEndpointSecurity::test_health_endpoint_http_methods",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_response_headers",
          "fullName": "tests/security/test_api_routes_security.py::TestHealthEndpointSecurity::test_health_endpoint_response_headers",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_rate_limiting_simulation",
          "fullName": "tests/security/test_api_routes_security.py::TestHealthEndpointSecurity::test_health_endpoint_rate_limiting_simulation",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_malformed_requests",
          "fullName": "tests/security/test_api_routes_security.py::TestHealthEndpointSecurity::test_health_endpoint_malformed_requests",
          "state": "passed"
        },
        {
          "name": "test_mcp_status_endpoint_error_handling",
          "fullName": "tests/security/test_api_routes_security.py::TestMCPRouterSecurity::test_mcp_status_endpoint_error_handling",
          "state": "passed"
        },
        {
          "name": "test_mcp_status_endpoint_successful_response",
          "fullName": "tests/security/test_api_routes_security.py::TestMCPRouterSecurity::test_mcp_status_endpoint_successful_response",
          "state": "passed"
        },
        {
          "name": "test_mcp_servers_endpoint_security",
          "fullName": "tests/security/test_api_routes_security.py::TestMCPRouterSecurity::test_mcp_servers_endpoint_security",
          "state": "passed"
        },
        {
          "name": "test_mcp_endpoints_authentication_bypass",
          "fullName": "tests/security/test_api_routes_security.py::TestMCPRouterSecurity::test_mcp_endpoints_authentication_bypass",
          "state": "passed"
        },
        {
          "name": "test_mcp_endpoints_input_validation",
          "fullName": "tests/security/test_api_routes_security.py::TestMCPRouterSecurity::test_mcp_endpoints_input_validation",
          "state": "passed"
        },
        {
          "name": "test_version_endpoints_authentication_requirements",
          "fullName": "tests/security/test_api_routes_security.py::TestVersionRouterSecurity::test_version_endpoints_authentication_requirements",
          "state": "passed"
        },
        {
          "name": "test_version_execution_input_validation",
          "fullName": "tests/security/test_api_routes_security.py::TestVersionRouterSecurity::test_version_execution_input_validation",
          "state": "passed"
        },
        {
          "name": "test_version_creation_authorization",
          "fullName": "tests/security/test_api_routes_security.py::TestVersionRouterSecurity::test_version_creation_authorization",
          "state": "passed"
        },
        {
          "name": "test_version_history_information_disclosure",
          "fullName": "tests/security/test_api_routes_security.py::TestVersionRouterSecurity::test_version_history_information_disclosure",
          "state": "passed"
        },
        {
          "name": "test_v1_router_path_traversal_protection",
          "fullName": "tests/security/test_api_routes_security.py::TestV1RouterSecurity::test_v1_router_path_traversal_protection",
          "state": "passed"
        },
        {
          "name": "test_v1_router_method_override_protection",
          "fullName": "tests/security/test_api_routes_security.py::TestV1RouterSecurity::test_v1_router_method_override_protection",
          "state": "passed"
        },
        {
          "name": "test_v1_router_large_request_handling",
          "fullName": "tests/security/test_api_routes_security.py::TestV1RouterSecurity::test_v1_router_large_request_handling",
          "state": "passed"
        },
        {
          "name": "test_v1_router_security_headers",
          "fullName": "tests/security/test_api_routes_security.py::TestV1RouterSecurity::test_v1_router_security_headers",
          "state": "passed"
        },
        {
          "name": "test_v1_router_cors_configuration",
          "fullName": "tests/security/test_api_routes_security.py::TestV1RouterSecurity::test_v1_router_cors_configuration",
          "state": "passed"
        },
        {
          "name": "test_v1_router_concurrent_request_handling",
          "fullName": "tests/security/test_api_routes_security.py::TestV1RouterSecurity::test_v1_router_concurrent_request_handling",
          "state": "passed"
        },
        {
          "name": "test_api_route_enumeration_resistance",
          "fullName": "tests/security/test_api_routes_security.py::TestAPISecurityIntegration::test_api_route_enumeration_resistance",
          "state": "passed"
        },
        {
          "name": "test_api_error_handling_consistency",
          "fullName": "tests/security/test_api_routes_security.py::TestAPISecurityIntegration::test_api_error_handling_consistency",
          "state": "passed"
        },
        {
          "name": "test_api_response_time_consistency",
          "fullName": "tests/security/test_api_routes_security.py::TestAPISecurityIntegration::test_api_response_time_consistency",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/security/test_api_routes_unit.py",
      "tests": [
        {
          "name": "test_health_endpoint_response",
          "fullName": "tests/security/test_api_routes_unit.py::TestHealthRouterUnit::test_health_endpoint_response",
          "state": "passed"
        },
        {
          "name": "test_health_endpoint_methods",
          "fullName": "tests/security/test_api_routes_unit.py::TestHealthRouterUnit::test_health_endpoint_methods",
          "state": "passed"
        },
        {
          "name": "test_mcp_status_endpoint",
          "fullName": "tests/security/test_api_routes_unit.py::TestMCPRouterUnit::test_mcp_status_endpoint",
          "state": "passed"
        },
        {
          "name": "test_mcp_servers_endpoint",
          "fullName": "tests/security/test_api_routes_unit.py::TestMCPRouterUnit::test_mcp_servers_endpoint",
          "state": "passed"
        },
        {
          "name": "test_version_execute_endpoint_validation",
          "fullName": "tests/security/test_api_routes_unit.py::TestVersionRouterUnit::test_version_execute_endpoint_validation",
          "state": "passed"
        },
        {
          "name": "test_version_history_endpoint",
          "fullName": "tests/security/test_api_routes_unit.py::TestVersionRouterUnit::test_version_history_endpoint",
          "state": "passed"
        },
        {
          "name": "test_v1_router_includes_subrouters",
          "fullName": "tests/security/test_api_routes_unit.py::TestV1RouterUnit::test_v1_router_includes_subrouters",
          "state": "passed"
        },
        {
          "name": "test_consistent_error_responses",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_consistent_error_responses",
          "state": "passed"
        },
        {
          "name": "test_method_not_allowed_responses",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_method_not_allowed_responses",
          "state": "passed"
        },
        {
          "name": "test_large_request_handling",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_large_request_handling",
          "state": "passed"
        },
        {
          "name": "test_malformed_json_handling",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_malformed_json_handling",
          "state": "passed"
        },
        {
          "name": "test_missing_content_type_handling",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_missing_content_type_handling",
          "state": "passed"
        },
        {
          "name": "test_empty_request_body_handling",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_empty_request_body_handling",
          "state": "passed"
        },
        {
          "name": "test_sql_injection_in_path_params",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_sql_injection_in_path_params",
          "state": "passed"
        },
        {
          "name": "test_xss_prevention_in_responses",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_xss_prevention_in_responses",
          "state": "passed"
        },
        {
          "name": "test_path_traversal_prevention",
          "fullName": "tests/security/test_api_routes_unit.py::TestAPIRoutesSecurityUnit::test_path_traversal_prevention",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/security/test_auth_dependencies.py",
      "tests": [
        {
          "name": "test_valid_api_key_acceptance",
          "fullName": "tests/security/test_auth_dependencies.py::TestRequireApiKeyDependency::test_valid_api_key_acceptance",
          "state": "passed"
        },
        {
          "name": "test_invalid_api_key_rejection",
          "fullName": "tests/security/test_auth_dependencies.py::TestRequireApiKeyDependency::test_invalid_api_key_rejection",
          "state": "passed"
        },
        {
          "name": "test_missing_api_key_rejection",
          "fullName": "tests/security/test_auth_dependencies.py::TestRequireApiKeyDependency::test_missing_api_key_rejection",
          "state": "passed"
        },
        {
          "name": "test_empty_string_api_key_rejection",
          "fullName": "tests/security/test_auth_dependencies.py::TestRequireApiKeyDependency::test_empty_string_api_key_rejection",
          "state": "passed"
        },
        {
          "name": "test_auth_service_exception_propagation",
          "fullName": "tests/security/test_auth_dependencies.py::TestRequireApiKeyDependency::test_auth_service_exception_propagation",
          "state": "passed"
        },
        {
          "name": "test_auth_service_async_compatibility",
          "fullName": "tests/security/test_auth_dependencies.py::TestRequireApiKeyDependency::test_auth_service_async_compatibility",
          "state": "passed"
        },
        {
          "name": "test_valid_api_key_returns_true",
          "fullName": "tests/security/test_auth_dependencies.py::TestOptionalApiKeyDependency::test_valid_api_key_returns_true",
          "state": "passed"
        },
        {
          "name": "test_invalid_api_key_returns_false",
          "fullName": "tests/security/test_auth_dependencies.py::TestOptionalApiKeyDependency::test_invalid_api_key_returns_false",
          "state": "passed"
        },
        {
          "name": "test_missing_api_key_returns_false",
          "fullName": "tests/security/test_auth_dependencies.py::TestOptionalApiKeyDependency::test_missing_api_key_returns_false",
          "state": "passed"
        },
        {
          "name": "test_empty_string_api_key_returns_false",
          "fullName": "tests/security/test_auth_dependencies.py::TestOptionalApiKeyDependency::test_empty_string_api_key_returns_false",
          "state": "passed"
        },
        {
          "name": "test_auth_service_exception_propagation",
          "fullName": "tests/security/test_auth_dependencies.py::TestOptionalApiKeyDependency::test_auth_service_exception_propagation",
          "state": "passed"
        },
        {
          "name": "test_returns_global_auth_service",
          "fullName": "tests/security/test_auth_dependencies.py::TestGetAuthServiceDependency::test_returns_global_auth_service",
          "state": "passed"
        },
        {
          "name": "test_auth_service_is_singleton",
          "fullName": "tests/security/test_auth_dependencies.py::TestGetAuthServiceDependency::test_auth_service_is_singleton",
          "state": "passed"
        },
        {
          "name": "test_protected_endpoint_with_valid_key",
          "fullName": "tests/security/test_auth_dependencies.py::TestFastAPIIntegration::test_protected_endpoint_with_valid_key",
          "state": "passed"
        },
        {
          "name": "test_protected_endpoint_with_invalid_key",
          "fullName": "tests/security/test_auth_dependencies.py::TestFastAPIIntegration::test_protected_endpoint_with_invalid_key",
          "state": "passed"
        },
        {
          "name": "test_protected_endpoint_without_key",
          "fullName": "tests/security/test_auth_dependencies.py::TestFastAPIIntegration::test_protected_endpoint_without_key",
          "state": "passed"
        },
        {
          "name": "test_optional_endpoint_with_valid_key",
          "fullName": "tests/security/test_auth_dependencies.py::TestFastAPIIntegration::test_optional_endpoint_with_valid_key",
          "state": "passed"
        },
        {
          "name": "test_optional_endpoint_without_key",
          "fullName": "tests/security/test_auth_dependencies.py::TestFastAPIIntegration::test_optional_endpoint_without_key",
          "state": "passed"
        },
        {
          "name": "test_service_endpoint_returns_auth_service",
          "fullName": "tests/security/test_auth_dependencies.py::TestFastAPIIntegration::test_service_endpoint_returns_auth_service",
          "state": "passed"
        },
        {
          "name": "test_api_key_header_configuration",
          "fullName": "tests/security/test_auth_dependencies.py::TestAPIKeyHeaderSecurity::test_api_key_header_configuration",
          "state": "passed"
        },
        {
          "name": "test_header_case_sensitivity",
          "fullName": "tests/security/test_auth_dependencies.py::TestAPIKeyHeaderSecurity::test_header_case_sensitivity",
          "state": "passed"
        },
        {
          "name": "test_multiple_api_key_headers",
          "fullName": "tests/security/test_auth_dependencies.py::TestAPIKeyHeaderSecurity::test_multiple_api_key_headers",
          "state": "passed"
        },
        {
          "name": "test_header_with_special_characters",
          "fullName": "tests/security/test_auth_dependencies.py::TestAPIKeyHeaderSecurity::test_header_with_special_characters",
          "state": "passed"
        },
        {
          "name": "test_very_long_api_key_handling",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_very_long_api_key_handling",
          "state": "passed"
        },
        {
          "name": "test_unicode_api_key_handling",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_unicode_api_key_handling",
          "state": "passed"
        },
        {
          "name": "test_null_byte_injection_protection",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_null_byte_injection_protection",
          "state": "passed"
        },
        {
          "name": "test_sql_injection_attempt_in_key",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_sql_injection_attempt_in_key",
          "state": "passed"
        },
        {
          "name": "test_script_injection_attempt_in_key",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_script_injection_attempt_in_key",
          "state": "passed"
        },
        {
          "name": "test_concurrent_authentication_requests",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_concurrent_authentication_requests",
          "state": "passed"
        },
        {
          "name": "test_memory_efficiency_with_large_keys",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_memory_efficiency_with_large_keys",
          "state": "passed"
        },
        {
          "name": "test_auth_service_timeout_handling",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_auth_service_timeout_handling",
          "state": "passed"
        },
        {
          "name": "test_exception_info_leakage_prevention",
          "fullName": "tests/security/test_auth_dependencies.py::TestSecurityEdgeCases::test_exception_info_leakage_prevention",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/security/test_auth_init_service.py",
      "tests": [
        {
          "name": "test_secure_key_generation",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_secure_key_generation",
          "state": "passed"
        },
        {
          "name": "test_key_entropy_quality",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_key_entropy_quality",
          "state": "passed"
        },
        {
          "name": "test_ensure_api_key_from_environment",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_ensure_api_key_from_environment",
          "state": "passed"
        },
        {
          "name": "test_ensure_api_key_from_env_file",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_ensure_api_key_from_env_file",
          "state": "passed"
        },
        {
          "name": "test_ensure_api_key_generation_new",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_ensure_api_key_generation_new",
          "state": "passed"
        },
        {
          "name": "test_save_key_to_env_new_file",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_save_key_to_env_new_file",
          "state": "passed"
        },
        {
          "name": "test_save_key_to_env_existing_file",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_save_key_to_env_existing_file",
          "state": "passed"
        },
        {
          "name": "test_save_key_preserves_auth_disabled",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_save_key_preserves_auth_disabled",
          "state": "passed"
        },
        {
          "name": "test_read_key_from_env_file",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_read_key_from_env_file",
          "state": "passed"
        },
        {
          "name": "test_read_key_with_whitespace",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_read_key_with_whitespace",
          "state": "passed"
        },
        {
          "name": "test_regenerate_key",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_regenerate_key",
          "state": "passed"
        },
        {
          "name": "test_get_current_key_priority",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_get_current_key_priority",
          "state": "passed"
        },
        {
          "name": "test_display_key_to_user",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceSecurity::test_display_key_to_user",
          "state": "passed"
        },
        {
          "name": "test_file_permissions_security",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceFileSystemSecurity::test_file_permissions_security",
          "state": "passed"
        },
        {
          "name": "test_concurrent_file_access",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceFileSystemSecurity::test_concurrent_file_access",
          "state": "passed"
        },
        {
          "name": "test_malformed_env_file_handling",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceFileSystemSecurity::test_malformed_env_file_handling",
          "state": "passed"
        },
        {
          "name": "test_large_env_file_handling",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceFileSystemSecurity::test_large_env_file_handling",
          "state": "passed"
        },
        {
          "name": "test_readonly_env_file",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceErrorHandling::test_readonly_env_file",
          "state": "passed"
        },
        {
          "name": "test_readonly_directory",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceErrorHandling::test_readonly_directory",
          "state": "passed"
        },
        {
          "name": "test_disk_full_simulation",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceErrorHandling::test_disk_full_simulation",
          "state": "passed"
        },
        {
          "name": "test_unicode_handling_in_env_file",
          "fullName": "tests/security/test_auth_init_service.py::TestAuthInitServiceErrorHandling::test_unicode_handling_in_env_file",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/security/test_auth_service.py",
      "tests": [
        {
          "name": "test_auth_service_initialization_with_key",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_auth_service_initialization_with_key",
          "state": "passed"
        },
        {
          "name": "test_auth_service_initialization_disabled",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_auth_service_initialization_disabled",
          "state": "passed"
        },
        {
          "name": "test_valid_api_key_acceptance",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_valid_api_key_acceptance",
          "state": "passed"
        },
        {
          "name": "test_invalid_api_key_rejection",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_invalid_api_key_rejection",
          "state": "passed"
        },
        {
          "name": "test_none_api_key_rejection",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_none_api_key_rejection",
          "state": "passed"
        },
        {
          "name": "test_empty_string_api_key_rejection",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_empty_string_api_key_rejection",
          "state": "passed"
        },
        {
          "name": "test_whitespace_api_key_rejection",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_whitespace_api_key_rejection",
          "state": "passed"
        },
        {
          "name": "test_auth_disabled_bypass",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_auth_disabled_bypass",
          "state": "passed"
        },
        {
          "name": "test_no_api_key_configured_error",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_no_api_key_configured_error",
          "state": "passed"
        },
        {
          "name": "test_timing_attack_resistance",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_timing_attack_resistance",
          "state": "passed"
        },
        {
          "name": "test_is_auth_enabled_with_auth_disabled_false",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_is_auth_enabled_with_auth_disabled_false",
          "state": "passed"
        },
        {
          "name": "test_is_auth_enabled_with_auth_disabled_true",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_is_auth_enabled_with_auth_disabled_true",
          "state": "passed"
        },
        {
          "name": "test_get_current_key",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_get_current_key",
          "state": "passed"
        },
        {
          "name": "test_regenerate_key",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_regenerate_key",
          "state": "passed"
        },
        {
          "name": "test_case_sensitive_api_key_validation",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_case_sensitive_api_key_validation",
          "state": "passed"
        },
        {
          "name": "test_unicode_and_special_chars_in_key",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_unicode_and_special_chars_in_key",
          "state": "passed"
        },
        {
          "name": "test_environment_variable_precedence",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceSecurity::test_environment_variable_precedence",
          "state": "passed"
        },
        {
          "name": "test_auth_disabled_variations",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceEdgeCases::test_auth_disabled_variations",
          "state": "passed"
        },
        {
          "name": "test_very_long_api_keys",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceEdgeCases::test_very_long_api_keys",
          "state": "passed"
        },
        {
          "name": "test_concurrent_api_key_validation",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceEdgeCases::test_concurrent_api_key_validation",
          "state": "passed"
        },
        {
          "name": "test_service_state_isolation",
          "fullName": "tests/security/test_auth_service.py::TestAuthServiceEdgeCases::test_service_state_isolation",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/security/test_database_service.py",
      "tests": [
        {
          "name": "test_initialization_requires_database_url",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConnectionSecurity::test_initialization_requires_database_url",
          "state": "passed"
        },
        {
          "name": "test_database_url_format_conversion",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConnectionSecurity::test_database_url_format_conversion",
          "state": "passed"
        },
        {
          "name": "test_connection_url_security_parameters",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConnectionSecurity::test_connection_url_security_parameters",
          "state": "passed"
        },
        {
          "name": "test_connection_pool_configuration",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConnectionSecurity::test_connection_pool_configuration",
          "state": "passed"
        },
        {
          "name": "test_connection_pool_initialization",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConnectionSecurity::test_connection_pool_initialization",
          "state": "passed"
        },
        {
          "name": "test_connection_pool_cleanup",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConnectionSecurity::test_connection_pool_cleanup",
          "state": "passed"
        },
        {
          "name": "test_connection_context_manager_security",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConnectionSecurity::test_connection_context_manager_security",
          "state": "passed"
        },
        {
          "name": "test_parameterized_query_execution",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceSQLInjectionPrevention::test_parameterized_query_execution",
          "state": "passed"
        },
        {
          "name": "test_sql_injection_attempt_in_parameters",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceSQLInjectionPrevention::test_sql_injection_attempt_in_parameters",
          "state": "passed"
        },
        {
          "name": "test_fetch_one_with_malicious_parameters",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceSQLInjectionPrevention::test_fetch_one_with_malicious_parameters",
          "state": "passed"
        },
        {
          "name": "test_fetch_all_with_malicious_parameters",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceSQLInjectionPrevention::test_fetch_all_with_malicious_parameters",
          "state": "passed"
        },
        {
          "name": "test_transaction_with_malicious_operations",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceSQLInjectionPrevention::test_transaction_with_malicious_operations",
          "state": "passed"
        },
        {
          "name": "test_unicode_injection_attempts",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceSQLInjectionPrevention::test_unicode_injection_attempts",
          "state": "passed"
        },
        {
          "name": "test_connection_failure_handling",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceErrorHandling::test_connection_failure_handling",
          "state": "passed"
        },
        {
          "name": "test_query_execution_error_handling",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceErrorHandling::test_query_execution_error_handling",
          "state": "passed"
        },
        {
          "name": "test_sensitive_data_not_leaked_in_errors",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceErrorHandling::test_sensitive_data_not_leaked_in_errors",
          "state": "passed"
        },
        {
          "name": "test_transaction_rollback_on_error",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceErrorHandling::test_transaction_rollback_on_error",
          "state": "passed"
        },
        {
          "name": "test_concurrent_query_execution",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConcurrencySecurity::test_concurrent_query_execution",
          "state": "passed"
        },
        {
          "name": "test_concurrent_transaction_isolation",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConcurrencySecurity::test_concurrent_transaction_isolation",
          "state": "passed"
        },
        {
          "name": "test_connection_pool_exhaustion_handling",
          "fullName": "tests/security/test_database_service.py::TestDatabaseServiceConcurrencySecurity::test_connection_pool_exhaustion_handling",
          "state": "passed"
        },
        {
          "name": "test_global_service_singleton_behavior",
          "fullName": "tests/security/test_database_service.py::TestGlobalDatabaseServiceSecurity::test_global_service_singleton_behavior",
          "state": "passed"
        },
        {
          "name": "test_global_service_cleanup",
          "fullName": "tests/security/test_database_service.py::TestGlobalDatabaseServiceSecurity::test_global_service_cleanup",
          "state": "passed"
        },
        {
          "name": "test_global_service_initialization_error_handling",
          "fullName": "tests/security/test_database_service.py::TestGlobalDatabaseServiceSecurity::test_global_service_initialization_error_handling",
          "state": "passed"
        },
        {
          "name": "test_global_service_concurrent_initialization",
          "fullName": "tests/security/test_database_service.py::TestGlobalDatabaseServiceSecurity::test_global_service_concurrent_initialization",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/security/test_database_service_unit.py",
      "tests": [
        {
          "name": "test_database_service_initialization",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_initialization",
          "state": "passed"
        },
        {
          "name": "test_database_service_initialization_without_url",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_initialization_without_url",
          "state": "passed"
        },
        {
          "name": "test_database_service_url_conversion",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_url_conversion",
          "state": "passed"
        },
        {
          "name": "test_database_service_custom_pool_sizes",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_custom_pool_sizes",
          "state": "passed"
        },
        {
          "name": "test_database_service_initialize",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_initialize",
          "state": "passed"
        },
        {
          "name": "test_database_service_close",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_close",
          "state": "passed"
        },
        {
          "name": "test_database_service_get_connection",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_get_connection",
          "state": "passed"
        },
        {
          "name": "test_database_service_execute",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_execute",
          "state": "passed"
        },
        {
          "name": "test_database_service_fetch_one",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_fetch_one",
          "state": "passed"
        },
        {
          "name": "test_database_service_fetch_all",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_fetch_all",
          "state": "passed"
        },
        {
          "name": "test_database_service_execute_transaction",
          "fullName": "tests/security/test_database_service_unit.py::TestDatabaseServiceUnit::test_database_service_execute_transaction",
          "state": "passed"
        },
        {
          "name": "test_get_db_service_creates_instance",
          "fullName": "tests/security/test_database_service_unit.py::TestGlobalDatabaseService::test_get_db_service_creates_instance",
          "state": "passed"
        },
        {
          "name": "test_get_db_service_returns_cached_instance",
          "fullName": "tests/security/test_database_service_unit.py::TestGlobalDatabaseService::test_get_db_service_returns_cached_instance",
          "state": "passed"
        },
        {
          "name": "test_get_db_service_handles_initialization_error",
          "fullName": "tests/security/test_database_service_unit.py::TestGlobalDatabaseService::test_get_db_service_handles_initialization_error",
          "state": "passed"
        },
        {
          "name": "test_close_db_service",
          "fullName": "tests/security/test_database_service_unit.py::TestGlobalDatabaseService::test_close_db_service",
          "state": "passed"
        },
        {
          "name": "test_close_db_service_when_none",
          "fullName": "tests/security/test_database_service_unit.py::TestGlobalDatabaseService::test_close_db_service_when_none",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/services/test_component_version_service.py",
      "tests": [
        {
          "name": "test_component_version_creation",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersion::test_component_version_creation",
          "state": "passed"
        },
        {
          "name": "test_version_history_creation",
          "fullName": "tests/services/test_component_version_service.py::TestVersionHistory::test_version_history_creation",
          "state": "passed"
        },
        {
          "name": "test_version_history_creation_without_from_version",
          "fullName": "tests/services/test_component_version_service.py::TestVersionHistory::test_version_history_creation_without_from_version",
          "state": "passed"
        },
        {
          "name": "test_component_version_service_initialization_default",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_component_version_service_initialization_default",
          "state": "passed"
        },
        {
          "name": "test_component_version_service_initialization_with_url",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_component_version_service_initialization_with_url",
          "state": "passed"
        },
        {
          "name": "test_get_db_service_uses_provided_url",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_get_db_service_uses_provided_url",
          "state": "passed"
        },
        {
          "name": "test_get_db_service_uses_global_when_no_url",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_get_db_service_uses_global_when_no_url",
          "state": "passed"
        },
        {
          "name": "test_create_version_success",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_create_version_success",
          "state": "passed"
        },
        {
          "name": "test_get_version_success",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_get_version_success",
          "state": "passed"
        },
        {
          "name": "test_get_version_not_found",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_get_version_not_found",
          "state": "passed"
        },
        {
          "name": "test_list_versions_success",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_list_versions_success",
          "state": "passed"
        },
        {
          "name": "test_get_active_version_success",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_get_active_version_success",
          "state": "passed"
        },
        {
          "name": "test_activate_version_success",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_activate_version_success",
          "state": "passed"
        },
        {
          "name": "test_delete_version_success",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionService::test_delete_version_success",
          "state": "passed"
        },
        {
          "name": "test_create_version_with_minimal_data",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionServiceEdgeCases::test_create_version_with_minimal_data",
          "state": "passed"
        },
        {
          "name": "test_list_versions_empty_result",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionServiceEdgeCases::test_list_versions_empty_result",
          "state": "passed"
        },
        {
          "name": "test_get_active_version_no_active",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionServiceEdgeCases::test_get_active_version_no_active",
          "state": "passed"
        },
        {
          "name": "test_database_error_handling",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionServiceEdgeCases::test_database_error_handling",
          "state": "passed"
        },
        {
          "name": "test_create_version_with_complex_config",
          "fullName": "tests/services/test_component_version_service.py::TestComponentVersionServiceEdgeCases::test_create_version_with_complex_config",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/services/test_component_version_service_simple.py",
      "tests": [
        {
          "name": "test_component_version_creation",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersion::test_component_version_creation",
          "state": "passed"
        },
        {
          "name": "test_component_version_with_none_description",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersion::test_component_version_with_none_description",
          "state": "passed"
        },
        {
          "name": "test_component_version_with_complex_config",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersion::test_component_version_with_complex_config",
          "state": "passed"
        },
        {
          "name": "test_version_history_creation",
          "fullName": "tests/services/test_component_version_service_simple.py::TestVersionHistory::test_version_history_creation",
          "state": "passed"
        },
        {
          "name": "test_version_history_initial_creation",
          "fullName": "tests/services/test_component_version_service_simple.py::TestVersionHistory::test_version_history_initial_creation",
          "state": "passed"
        },
        {
          "name": "test_version_history_with_none_description",
          "fullName": "tests/services/test_component_version_service_simple.py::TestVersionHistory::test_version_history_with_none_description",
          "state": "passed"
        },
        {
          "name": "test_service_initialization_default",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionService::test_service_initialization_default",
          "state": "passed"
        },
        {
          "name": "test_service_initialization_with_url",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionService::test_service_initialization_with_url",
          "state": "passed"
        },
        {
          "name": "test_service_initialization_with_empty_url",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionService::test_service_initialization_with_empty_url",
          "state": "passed"
        },
        {
          "name": "test_service_attributes_exist",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionService::test_service_attributes_exist",
          "state": "passed"
        },
        {
          "name": "test_service_method_signatures",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionService::test_service_method_signatures",
          "state": "passed"
        },
        {
          "name": "test_service_with_various_db_urls",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionServiceEdgeCases::test_service_with_various_db_urls",
          "state": "passed"
        },
        {
          "name": "test_service_state_isolation",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionServiceEdgeCases::test_service_state_isolation",
          "state": "passed"
        },
        {
          "name": "test_dataclass_equality",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionServiceEdgeCases::test_dataclass_equality",
          "state": "passed"
        },
        {
          "name": "test_version_history_equality",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionServiceEdgeCases::test_version_history_equality",
          "state": "passed"
        },
        {
          "name": "test_dataclass_repr",
          "fullName": "tests/services/test_component_version_service_simple.py::TestComponentVersionServiceEdgeCases::test_dataclass_repr",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/services/test_metrics_service.py",
      "tests": [
        {
          "name": "test_agent_metric_creation",
          "fullName": "tests/services/test_metrics_service.py::TestAgentMetric::test_agent_metric_creation",
          "state": "passed"
        },
        {
          "name": "test_store_metrics_success",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsService::test_store_metrics_success",
          "state": "passed"
        },
        {
          "name": "test_store_metrics_default_version",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsService::test_store_metrics_default_version",
          "state": "passed"
        },
        {
          "name": "test_get_metrics_by_agent",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsService::test_get_metrics_by_agent",
          "state": "passed"
        },
        {
          "name": "test_get_metrics_by_date_range",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsService::test_get_metrics_by_date_range",
          "state": "passed"
        },
        {
          "name": "test_get_execution_stats",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsService::test_get_execution_stats",
          "state": "passed"
        },
        {
          "name": "test_delete_old_metrics",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsService::test_delete_old_metrics",
          "state": "passed"
        },
        {
          "name": "test_store_metrics_with_complex_metrics_data",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsServiceEdgeCases::test_store_metrics_with_complex_metrics_data",
          "state": "passed"
        },
        {
          "name": "test_get_metrics_empty_result",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsServiceEdgeCases::test_get_metrics_empty_result",
          "state": "passed"
        },
        {
          "name": "test_store_metrics_database_error",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsServiceEdgeCases::test_store_metrics_database_error",
          "state": "passed"
        },
        {
          "name": "test_get_metrics_with_limit",
          "fullName": "tests/services/test_metrics_service.py::TestMetricsServiceEdgeCases::test_get_metrics_with_limit",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/services/test_migration_service.py",
      "tests": [
        {
          "name": "test_init_with_provided_db_url",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceInitialization::test_init_with_provided_db_url",
          "state": "passed"
        },
        {
          "name": "test_init_with_env_var_db_url",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceInitialization::test_init_with_env_var_db_url",
          "state": "passed"
        },
        {
          "name": "test_init_missing_db_url_raises_error",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceInitialization::test_init_missing_db_url_raises_error",
          "state": "passed"
        },
        {
          "name": "test_init_missing_alembic_config_raises_error",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceInitialization::test_init_missing_alembic_config_raises_error",
          "state": "passed"
        },
        {
          "name": "test_alembic_config_path_calculation",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceInitialization::test_alembic_config_path_calculation",
          "state": "passed"
        },
        {
          "name": "test_get_alembic_config",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceConfiguration::test_get_alembic_config",
          "state": "passed"
        },
        {
          "name": "test_convert_to_sync_url_psycopg_dialect",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceConfiguration::test_convert_to_sync_url_psycopg_dialect",
          "state": "passed"
        },
        {
          "name": "test_convert_to_sync_url_standard_postgresql",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceConfiguration::test_convert_to_sync_url_standard_postgresql",
          "state": "passed"
        },
        {
          "name": "test_convert_to_sync_url_other_formats",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceConfiguration::test_convert_to_sync_url_other_formats",
          "state": "passed"
        },
        {
          "name": "test_convert_to_sync_url_complex_format",
          "fullName": "tests/services/test_migration_service.py::TestMigrationServiceConfiguration::test_convert_to_sync_url_complex_format",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_success_initialized_db",
          "fullName": "tests/services/test_migration_service.py::TestMigrationStatusCheck::test_check_migration_status_success_initialized_db",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_success_pending_upgrades",
          "fullName": "tests/services/test_migration_service.py::TestMigrationStatusCheck::test_check_migration_status_success_pending_upgrades",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_uninitialized_database",
          "fullName": "tests/services/test_migration_service.py::TestMigrationStatusCheck::test_check_migration_status_uninitialized_database",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_configuration_error",
          "fullName": "tests/services/test_migration_service.py::TestMigrationStatusCheck::test_check_migration_status_configuration_error",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_database_connection_error",
          "fullName": "tests/services/test_migration_service.py::TestMigrationStatusCheck::test_check_migration_status_database_connection_error",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_missing_db_url",
          "fullName": "tests/services/test_migration_service.py::TestMigrationStatusCheck::test_check_migration_status_missing_db_url",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_success_to_head",
          "fullName": "tests/services/test_migration_service.py::TestMigrationExecution::test_run_migrations_success_to_head",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_success_to_specific_revision",
          "fullName": "tests/services/test_migration_service.py::TestMigrationExecution::test_run_migrations_success_to_specific_revision",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_alembic_command_error",
          "fullName": "tests/services/test_migration_service.py::TestMigrationExecution::test_run_migrations_alembic_command_error",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_database_connection_error",
          "fullName": "tests/services/test_migration_service.py::TestMigrationExecution::test_run_migrations_database_connection_error",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_context_configuration_error",
          "fullName": "tests/services/test_migration_service.py::TestMigrationExecution::test_run_migrations_context_configuration_error",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_outer_exception_handling",
          "fullName": "tests/services/test_migration_service.py::TestMigrationExecution::test_run_migrations_outer_exception_handling",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_logs_failure_on_sync_error",
          "fullName": "tests/services/test_migration_service.py::TestMigrationExecution::test_run_migrations_logs_failure_on_sync_error",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_outer_exception_coverage",
          "fullName": "tests/services/test_migration_service.py::TestMigrationExecution::test_run_migrations_outer_exception_coverage",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_already_up_to_date",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseReadinessEnsurance::test_ensure_database_ready_already_up_to_date",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_status_check_fails",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseReadinessEnsurance::test_ensure_database_ready_status_check_fails",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_pending_upgrades_migration_success",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseReadinessEnsurance::test_ensure_database_ready_pending_upgrades_migration_success",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_pending_upgrades_migration_failure",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseReadinessEnsurance::test_ensure_database_ready_pending_upgrades_migration_failure",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_uninitialized_database",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseReadinessEnsurance::test_ensure_database_ready_uninitialized_database",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_exception_handling",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseReadinessEnsurance::test_ensure_database_ready_exception_handling",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_edge_case_status_values",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseReadinessEnsurance::test_ensure_database_ready_edge_case_status_values",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_edge_case_initialized_false",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseReadinessEnsurance::test_ensure_database_ready_edge_case_initialized_false",
          "state": "passed"
        },
        {
          "name": "test_get_migration_service_creates_new_instance",
          "fullName": "tests/services/test_migration_service.py::TestGlobalServiceInstance::test_get_migration_service_creates_new_instance",
          "state": "passed"
        },
        {
          "name": "test_get_migration_service_returns_existing_instance",
          "fullName": "tests/services/test_migration_service.py::TestGlobalServiceInstance::test_get_migration_service_returns_existing_instance",
          "state": "passed"
        },
        {
          "name": "test_get_migration_service_handles_missing_env_var",
          "fullName": "tests/services/test_migration_service.py::TestGlobalServiceInstance::test_get_migration_service_handles_missing_env_var",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_async_default_target",
          "fullName": "tests/services/test_migration_service.py::TestConvenienceFunctions::test_run_migrations_async_default_target",
          "state": "passed"
        },
        {
          "name": "test_run_migrations_async_specific_target",
          "fullName": "tests/services/test_migration_service.py::TestConvenienceFunctions::test_run_migrations_async_specific_target",
          "state": "passed"
        },
        {
          "name": "test_check_migration_status_async",
          "fullName": "tests/services/test_migration_service.py::TestConvenienceFunctions::test_check_migration_status_async",
          "state": "passed"
        },
        {
          "name": "test_ensure_database_ready_async",
          "fullName": "tests/services/test_migration_service.py::TestConvenienceFunctions::test_ensure_database_ready_async",
          "state": "passed"
        },
        {
          "name": "test_convert_to_sync_url_empty_string",
          "fullName": "tests/services/test_migration_service.py::TestURLConversionEdgeCases::test_convert_to_sync_url_empty_string",
          "state": "passed"
        },
        {
          "name": "test_convert_to_sync_url_none_input",
          "fullName": "tests/services/test_migration_service.py::TestURLConversionEdgeCases::test_convert_to_sync_url_none_input",
          "state": "passed"
        },
        {
          "name": "test_convert_to_sync_url_complex_psycopg_url",
          "fullName": "tests/services/test_migration_service.py::TestURLConversionEdgeCases::test_convert_to_sync_url_complex_psycopg_url",
          "state": "passed"
        },
        {
          "name": "test_convert_to_sync_url_legacy_postgresql_url",
          "fullName": "tests/services/test_migration_service.py::TestURLConversionEdgeCases::test_convert_to_sync_url_legacy_postgresql_url",
          "state": "passed"
        },
        {
          "name": "test_async_operation_cancelled",
          "fullName": "tests/services/test_migration_service.py::TestErrorScenarios::test_async_operation_cancelled",
          "state": "passed"
        },
        {
          "name": "test_thread_pool_executor_error",
          "fullName": "tests/services/test_migration_service.py::TestErrorScenarios::test_thread_pool_executor_error",
          "state": "passed"
        },
        {
          "name": "test_alembic_config_file_permissions_error",
          "fullName": "tests/services/test_migration_service.py::TestErrorScenarios::test_alembic_config_file_permissions_error",
          "state": "passed"
        },
        {
          "name": "test_sqlalchemy_import_error",
          "fullName": "tests/services/test_migration_service.py::TestErrorScenarios::test_sqlalchemy_import_error",
          "state": "passed"
        },
        {
          "name": "test_database_timeout_error",
          "fullName": "tests/services/test_migration_service.py::TestErrorScenarios::test_database_timeout_error",
          "state": "passed"
        },
        {
          "name": "test_alembic_script_directory_error",
          "fullName": "tests/services/test_migration_service.py::TestErrorScenarios::test_alembic_script_directory_error",
          "state": "passed"
        },
        {
          "name": "test_migration_with_multiple_pending_revisions",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseIntegrationPatterns::test_migration_with_multiple_pending_revisions",
          "state": "passed"
        },
        {
          "name": "test_downgrade_migration_scenario",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseIntegrationPatterns::test_downgrade_migration_scenario",
          "state": "passed"
        },
        {
          "name": "test_complex_database_url_handling",
          "fullName": "tests/services/test_migration_service.py::TestDatabaseIntegrationPatterns::test_complex_database_url_handling",
          "state": "passed"
        },
        {
          "name": "test_concurrent_migration_status_checks",
          "fullName": "tests/services/test_migration_service.py::TestConcurrencyAndThreadSafety::test_concurrent_migration_status_checks",
          "state": "passed"
        },
        {
          "name": "test_mixed_concurrent_operations",
          "fullName": "tests/services/test_migration_service.py::TestConcurrencyAndThreadSafety::test_mixed_concurrent_operations",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/services/test_services_database.py",
      "tests": [
        {
          "name": "test_database_service_initialization",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_initialization",
          "state": "passed"
        },
        {
          "name": "test_database_service_initialization_from_env",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_initialization_from_env",
          "state": "passed"
        },
        {
          "name": "test_database_service_initialization_no_url_raises_error",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_initialization_no_url_raises_error",
          "state": "passed"
        },
        {
          "name": "test_database_service_url_conversion",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_url_conversion",
          "state": "passed"
        },
        {
          "name": "test_database_service_initialize",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_initialize",
          "state": "passed"
        },
        {
          "name": "test_database_service_initialize_idempotent",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_initialize_idempotent",
          "state": "passed"
        },
        {
          "name": "test_database_service_close",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_close",
          "state": "passed"
        },
        {
          "name": "test_database_service_close_without_pool",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_close_without_pool",
          "state": "passed"
        },
        {
          "name": "test_database_service_get_connection",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_get_connection",
          "state": "passed"
        },
        {
          "name": "test_database_service_get_connection_initializes_pool",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_get_connection_initializes_pool",
          "state": "passed"
        },
        {
          "name": "test_database_service_execute",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_execute",
          "state": "passed"
        },
        {
          "name": "test_database_service_fetch_one",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_fetch_one",
          "state": "passed"
        },
        {
          "name": "test_database_service_fetch_one_no_result",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_fetch_one_no_result",
          "state": "passed"
        },
        {
          "name": "test_database_service_fetch_all",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_fetch_all",
          "state": "passed"
        },
        {
          "name": "test_database_service_fetch_all_empty_result",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_fetch_all_empty_result",
          "state": "passed"
        },
        {
          "name": "test_database_service_execute_transaction",
          "fullName": "tests/services/test_services_database.py::TestDatabaseService::test_database_service_execute_transaction",
          "state": "passed"
        },
        {
          "name": "test_database_service_execute_with_none_params",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceEdgeCases::test_database_service_execute_with_none_params",
          "state": "passed"
        },
        {
          "name": "test_database_service_query_methods_with_none_params",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceEdgeCases::test_database_service_query_methods_with_none_params",
          "state": "passed"
        },
        {
          "name": "test_database_service_empty_transaction",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceEdgeCases::test_database_service_empty_transaction",
          "state": "passed"
        },
        {
          "name": "test_database_service_custom_pool_sizes",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceEdgeCases::test_database_service_custom_pool_sizes",
          "state": "passed"
        },
        {
          "name": "test_database_service_default_pool_sizes",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceEdgeCases::test_database_service_default_pool_sizes",
          "state": "passed"
        },
        {
          "name": "test_get_db_service_creates_instance",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceGlobalFunctions::test_get_db_service_creates_instance",
          "state": "passed"
        },
        {
          "name": "test_get_db_service_returns_same_instance",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceGlobalFunctions::test_get_db_service_returns_same_instance",
          "state": "passed"
        },
        {
          "name": "test_close_db_service",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceGlobalFunctions::test_close_db_service",
          "state": "passed"
        },
        {
          "name": "test_close_db_service_no_instance",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceGlobalFunctions::test_close_db_service_no_instance",
          "state": "passed"
        },
        {
          "name": "test_database_service_full_lifecycle",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceIntegration::test_database_service_full_lifecycle",
          "state": "passed"
        },
        {
          "name": "test_database_service_context_manager_usage",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceIntegration::test_database_service_context_manager_usage",
          "state": "passed"
        },
        {
          "name": "test_database_service_multiple_operations",
          "fullName": "tests/services/test_services_database.py::TestDatabaseServiceIntegration::test_database_service_multiple_operations",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/services/test_version_sync_service.py",
      "tests": [
        {
          "name": "test_init_with_explicit_db_url",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_init_with_explicit_db_url",
          "state": "passed"
        },
        {
          "name": "test_init_with_env_db_url",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_init_with_env_db_url",
          "state": "passed"
        },
        {
          "name": "test_init_without_db_url_raises_error",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_init_without_db_url_raises_error",
          "state": "passed"
        },
        {
          "name": "test_sync_on_startup_success",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_on_startup_success",
          "state": "passed"
        },
        {
          "name": "test_sync_on_startup_with_errors",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_on_startup_with_errors",
          "state": "passed"
        },
        {
          "name": "test_sync_component_type_success",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_component_type_success",
          "state": "passed"
        },
        {
          "name": "test_sync_component_type_with_errors",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_component_type_with_errors",
          "state": "passed"
        },
        {
          "name": "test_sync_component_type_invalid_type",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_component_type_invalid_type",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_skip_shared_config",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_skip_shared_config",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_skip_non_component_config",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_skip_non_component_config",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_empty_config",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_empty_config",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_missing_section",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_missing_section",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_missing_component_id",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_missing_component_id",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_missing_version",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_missing_version",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_no_agno_version_creates",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_no_agno_version_creates",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_dev_version_skip",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_dev_version_skip",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_yaml_newer_updates_agno",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_yaml_newer_updates_agno",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_agno_newer_updates_yaml",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_agno_newer_updates_yaml",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_version_conflict",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_version_conflict",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_same_version_same_config",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_same_version_same_config",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_version_service_error",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_version_service_error",
          "state": "passed"
        },
        {
          "name": "test_sync_single_component_file_read_error",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_sync_single_component_file_read_error",
          "state": "passed"
        },
        {
          "name": "test_update_yaml_from_agno_success",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_update_yaml_from_agno_success",
          "state": "passed"
        },
        {
          "name": "test_update_yaml_from_agno_no_active_version",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_update_yaml_from_agno_no_active_version",
          "state": "passed"
        },
        {
          "name": "test_update_yaml_from_agno_version_service_error",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_update_yaml_from_agno_version_service_error",
          "state": "passed"
        },
        {
          "name": "test_update_yaml_from_agno_backup_creation_fails",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_update_yaml_from_agno_backup_creation_fails",
          "state": "passed"
        },
        {
          "name": "test_update_yaml_from_agno_write_fails_restores_backup",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_update_yaml_from_agno_write_fails_restores_backup",
          "state": "passed"
        },
        {
          "name": "test_validate_yaml_update_success",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_validate_yaml_update_success",
          "state": "passed"
        },
        {
          "name": "test_validate_yaml_update_empty_file",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_validate_yaml_update_empty_file",
          "state": "passed"
        },
        {
          "name": "test_validate_yaml_update_file_read_error",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_validate_yaml_update_file_read_error",
          "state": "passed"
        },
        {
          "name": "test_discover_components",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_discover_components",
          "state": "passed"
        },
        {
          "name": "test_discover_components_with_errors",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_discover_components_with_errors",
          "state": "passed"
        },
        {
          "name": "test_force_sync_component_auto_direction",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_force_sync_component_auto_direction",
          "state": "passed"
        },
        {
          "name": "test_force_sync_component_yaml_to_agno",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_force_sync_component_yaml_to_agno",
          "state": "passed"
        },
        {
          "name": "test_force_sync_component_agno_to_yaml",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_force_sync_component_agno_to_yaml",
          "state": "passed"
        },
        {
          "name": "test_force_sync_component_no_yaml_file",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_force_sync_component_no_yaml_file",
          "state": "passed"
        },
        {
          "name": "test_force_sync_component_invalid_direction",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_force_sync_component_invalid_direction",
          "state": "passed"
        },
        {
          "name": "test_find_yaml_file_success",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_find_yaml_file_success",
          "state": "passed"
        },
        {
          "name": "test_find_yaml_file_not_found",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_find_yaml_file_not_found",
          "state": "passed"
        },
        {
          "name": "test_find_yaml_file_invalid_component_type",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_find_yaml_file_invalid_component_type",
          "state": "passed"
        },
        {
          "name": "test_find_yaml_file_read_errors",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_find_yaml_file_read_errors",
          "state": "passed"
        },
        {
          "name": "test_cleanup_old_backups",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_cleanup_old_backups",
          "state": "passed"
        },
        {
          "name": "test_cleanup_old_backups_removal_error",
          "fullName": "tests/services/test_version_sync_service.py::TestAgnoVersionSyncService::test_cleanup_old_backups_removal_error",
          "state": "passed"
        },
        {
          "name": "test_sync_all_components",
          "fullName": "tests/services/test_version_sync_service.py::TestConvenienceFunction::test_sync_all_components",
          "state": "passed"
        },
        {
          "name": "test_component_id_extraction_variants",
          "fullName": "tests/services/test_version_sync_service.py::TestEdgeCasesAndErrorHandling::test_component_id_extraction_variants",
          "state": "passed"
        },
        {
          "name": "test_yaml_content_validation_edge_cases",
          "fullName": "tests/services/test_version_sync_service.py::TestEdgeCasesAndErrorHandling::test_yaml_content_validation_edge_cases",
          "state": "passed"
        },
        {
          "name": "test_full_sync_workflow_simulation",
          "fullName": "tests/services/test_version_sync_service.py::TestIntegrationScenarios::test_full_sync_workflow_simulation",
          "state": "passed"
        },
        {
          "name": "test_large_yaml_file_handling",
          "fullName": "tests/services/test_version_sync_service.py::TestPerformanceAndLimits::test_large_yaml_file_handling",
          "state": "passed"
        },
        {
          "name": "test_concurrent_access_simulation",
          "fullName": "tests/services/test_version_sync_service.py::TestPerformanceAndLimits::test_concurrent_access_simulation",
          "state": "passed"
        },
        {
          "name": "test_store_successful_patterns",
          "fullName": "tests/services/test_version_sync_service.py::test_store_successful_patterns",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/teams/test_registry.py",
      "tests": [
        {
          "name": "test_default_patterns_without_config",
          "fullName": "tests/teams/test_registry.py::TestFactoryPatterns::test_default_patterns_without_config",
          "state": "passed"
        },
        {
          "name": "test_custom_function_name_in_config",
          "fullName": "tests/teams/test_registry.py::TestFactoryPatterns::test_custom_function_name_in_config",
          "state": "passed"
        },
        {
          "name": "test_template_variables_in_function_name",
          "fullName": "tests/teams/test_registry.py::TestFactoryPatterns::test_template_variables_in_function_name",
          "state": "passed"
        },
        {
          "name": "test_additional_patterns_in_config",
          "fullName": "tests/teams/test_registry.py::TestFactoryPatterns::test_additional_patterns_in_config",
          "state": "passed"
        },
        {
          "name": "test_duplicate_removal",
          "fullName": "tests/teams/test_registry.py::TestFactoryPatterns::test_duplicate_removal",
          "state": "passed"
        },
        {
          "name": "test_hyphen_to_underscore_conversion",
          "fullName": "tests/teams/test_registry.py::TestFactoryPatterns::test_hyphen_to_underscore_conversion",
          "state": "passed"
        },
        {
          "name": "test_empty_config",
          "fullName": "tests/teams/test_registry.py::TestFactoryPatterns::test_empty_config",
          "state": "passed"
        },
        {
          "name": "test_load_valid_config",
          "fullName": "tests/teams/test_registry.py::TestConfigLoading::test_load_valid_config",
          "state": "passed"
        },
        {
          "name": "test_load_invalid_yaml",
          "fullName": "tests/teams/test_registry.py::TestConfigLoading::test_load_invalid_yaml",
          "state": "passed"
        },
        {
          "name": "test_load_missing_file",
          "fullName": "tests/teams/test_registry.py::TestConfigLoading::test_load_missing_file",
          "state": "passed"
        },
        {
          "name": "test_get_team_registry_returns_dict",
          "fullName": "tests/teams/test_registry.py::TestTeamDiscovery::test_get_team_registry_returns_dict",
          "state": "passed"
        },
        {
          "name": "test_list_available_teams_returns_list",
          "fullName": "tests/teams/test_registry.py::TestTeamDiscovery::test_list_available_teams_returns_list",
          "state": "passed"
        },
        {
          "name": "test_is_team_registered_with_existing_team",
          "fullName": "tests/teams/test_registry.py::TestTeamDiscovery::test_is_team_registered_with_existing_team",
          "state": "passed"
        },
        {
          "name": "test_get_team_raises_on_invalid_id",
          "fullName": "tests/teams/test_registry.py::TestTeamDiscovery::test_get_team_raises_on_invalid_id",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/test_metrics_input_validation.py",
      "tests": [
        {
          "name": "test_batch_size_validation_normal_values",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_batch_size_validation_normal_values",
          "state": "passed"
        },
        {
          "name": "test_batch_size_validation_minimum_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_batch_size_validation_minimum_clamp",
          "state": "passed"
        },
        {
          "name": "test_batch_size_validation_negative_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_batch_size_validation_negative_clamp",
          "state": "passed"
        },
        {
          "name": "test_batch_size_validation_maximum_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_batch_size_validation_maximum_clamp",
          "state": "passed"
        },
        {
          "name": "test_batch_size_validation_invalid_string",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_batch_size_validation_invalid_string",
          "state": "passed"
        },
        {
          "name": "test_flush_interval_validation_normal_values",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_flush_interval_validation_normal_values",
          "state": "passed"
        },
        {
          "name": "test_flush_interval_validation_minimum_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_flush_interval_validation_minimum_clamp",
          "state": "passed"
        },
        {
          "name": "test_flush_interval_validation_negative_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_flush_interval_validation_negative_clamp",
          "state": "passed"
        },
        {
          "name": "test_flush_interval_validation_maximum_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_flush_interval_validation_maximum_clamp",
          "state": "passed"
        },
        {
          "name": "test_flush_interval_validation_invalid_string",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_flush_interval_validation_invalid_string",
          "state": "passed"
        },
        {
          "name": "test_queue_size_validation_normal_values",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_queue_size_validation_normal_values",
          "state": "passed"
        },
        {
          "name": "test_queue_size_validation_minimum_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_queue_size_validation_minimum_clamp",
          "state": "passed"
        },
        {
          "name": "test_queue_size_validation_negative_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_queue_size_validation_negative_clamp",
          "state": "passed"
        },
        {
          "name": "test_queue_size_validation_maximum_clamp",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_queue_size_validation_maximum_clamp",
          "state": "passed"
        },
        {
          "name": "test_queue_size_validation_invalid_string",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_queue_size_validation_invalid_string",
          "state": "passed"
        },
        {
          "name": "test_dos_attack_prevention_extreme_values",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_dos_attack_prevention_extreme_values",
          "state": "passed"
        },
        {
          "name": "test_type_error_handling",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_type_error_handling",
          "state": "passed"
        },
        {
          "name": "test_logging_of_clamped_values",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_logging_of_clamped_values",
          "state": "passed"
        },
        {
          "name": "test_enable_metrics_boolean_parsing",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_enable_metrics_boolean_parsing",
          "state": "passed"
        },
        {
          "name": "test_all_defaults_when_no_env_vars",
          "fullName": "tests/test_metrics_input_validation.py::TestMetricsInputValidation::test_all_defaults_when_no_env_vars",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/test_metrics_performance.py",
      "tests": [
        {
          "name": "test_single_metric_collection_latency",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_single_metric_collection_latency",
          "state": "passed"
        },
        {
          "name": "test_batch_collection_latency",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_batch_collection_latency",
          "state": "passed"
        },
        {
          "name": "test_concurrent_collection_performance",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_concurrent_collection_performance",
          "state": "passed"
        },
        {
          "name": "test_queue_overflow_handling",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_queue_overflow_handling",
          "state": "passed"
        },
        {
          "name": "test_background_processing_efficiency",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_background_processing_efficiency",
          "state": "passed"
        },
        {
          "name": "test_error_recovery_performance",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_error_recovery_performance",
          "state": "passed"
        },
        {
          "name": "test_flush_performance",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_flush_performance",
          "state": "passed"
        },
        {
          "name": "test_shutdown_performance",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_shutdown_performance",
          "state": "passed"
        },
        {
          "name": "test_sync_wrapper_performance",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_sync_wrapper_performance",
          "state": "passed"
        },
        {
          "name": "test_memory_efficiency",
          "fullName": "tests/test_metrics_performance.py::TestMetricsServicePerformance::test_memory_efficiency",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/utilities/test_yaml_cache.py",
      "tests": [
        {
          "name": "test_cached_yaml_creation",
          "fullName": "tests/utilities/test_yaml_cache.py::TestCachedYAML::test_cached_yaml_creation",
          "state": "passed"
        },
        {
          "name": "test_cached_glob_creation",
          "fullName": "tests/utilities/test_yaml_cache.py::TestCachedGlob::test_cached_glob_creation",
          "state": "passed"
        },
        {
          "name": "test_singleton_pattern",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_singleton_pattern",
          "state": "passed"
        },
        {
          "name": "test_cache_initialization",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_cache_initialization",
          "state": "passed"
        },
        {
          "name": "test_discover_yaml_files_success",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_discover_yaml_files_success",
          "state": "passed"
        },
        {
          "name": "test_discover_yaml_files_cache_hit",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_discover_yaml_files_cache_hit",
          "state": "passed"
        },
        {
          "name": "test_discover_yaml_files_cache_invalidation",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_discover_yaml_files_cache_invalidation",
          "state": "passed"
        },
        {
          "name": "test_discover_yaml_files_directory_not_exists",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_discover_yaml_files_directory_not_exists",
          "state": "passed"
        },
        {
          "name": "test_clear_cache",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_clear_cache",
          "state": "passed"
        },
        {
          "name": "test_get_cache_stats",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_get_cache_stats",
          "state": "passed"
        },
        {
          "name": "test_memory_management_large_cache",
          "fullName": "tests/utilities/test_yaml_cache.py::TestYAMLCacheManager::test_memory_management_large_cache",
          "state": "passed"
        }
      ]
    }
  ]
}