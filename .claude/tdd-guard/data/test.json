{
  "testModules": [
    {
      "moduleId": "tests/api_integration/test_serve_comprehensive.py",
      "tests": [
        {
          "name": "test_create_automagik_api_with_event_loop",
          "fullName": "tests/api_integration/test_serve_comprehensive.py::TestFastAPIAppCreation::test_create_automagik_api_with_event_loop",
          "state": "failed",
          "errors": [
            {
              "message": "self = <MagicMock name='ThreadPoolExecutor' id='123304977108720'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'ThreadPoolExecutor' to have been called once. Called 0 times.\n\n/usr/lib/python3.12/unittest/mock.py:923: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.api_integration.test_serve_comprehensive.TestFastAPIAppCreation object at 0x70257fe244d0>\n\n    def test_create_automagik_api_with_event_loop(self):\n        \"\"\"Test create_automagik_api when event loop is running.\"\"\"\n    \n        async def create_loop_and_test():\n            # We're now in an event loop\n            with (\n                patch(\"api.serve._async_create_automagik_api\") as mock_async_create,\n                patch(\"concurrent.futures.ThreadPoolExecutor\") as mock_executor,\n            ):\n                # Setup mock app\n                mock_app = MagicMock(spec=FastAPI)\n                mock_async_create.return_value = mock_app\n    \n                # Setup mock executor\n                mock_executor_instance = MagicMock()\n                mock_future = MagicMock()\n                mock_future.result.return_value = mock_app\n                mock_executor_instance.submit.return_value = mock_future\n                mock_executor.return_value.__enter__.return_value = mock_executor_instance\n    \n                # Call the function\n                result = api.serve.create_automagik_api()\n    \n                # Verify it used thread executor\n                mock_executor.assert_called_once()\n                mock_executor_instance.submit.assert_called_once()\n                assert result == mock_app\n    \n        # Run the test in an event loop\n>       asyncio.run(create_loop_and_test())\n\ntests/api_integration/test_serve_comprehensive.py:403: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.12/asyncio/runners.py:194: in run\n    return runner.run(main)\n           ^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/asyncio/runners.py:118: in run\n    return self._loop.run_until_complete(task)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete\n    return future.result()\n           ^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def create_loop_and_test():\n        # We're now in an event loop\n        with (\n            patch(\"api.serve._async_create_automagik_api\") as mock_async_create,\n            patch(\"concurrent.futures.ThreadPoolExecutor\") as mock_executor,\n        ):\n            # Setup mock app\n            mock_app = MagicMock(spec=FastAPI)\n            mock_async_create.return_value = mock_app\n    \n            # Setup mock executor\n            mock_executor_instance = MagicMock()\n            mock_future = MagicMock()\n            mock_future.result.return_value = mock_app\n            mock_executor_instance.submit.return_value = mock_future\n            mock_executor.return_value.__enter__.return_value = mock_executor_instance\n    \n            # Call the function\n            result = api.serve.create_automagik_api()\n    \n            # Verify it used thread executor\n>           mock_executor.assert_called_once()\nE           AssertionError: Expected 'ThreadPoolExecutor' to have been called once. Called 0 times.\n\ntests/api_integration/test_serve_comprehensive.py:398: AssertionError"
            }
          ]
        }
      ]
    }
  ]
}