# Manual Release Creation Workflow
# YOU control the version - workflow just automates the mechanics

name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0, 0.2.0-rc.1, 0.2.1)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        type: boolean
        default: false
      branch:
        description: 'Branch to release from'
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - main

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Validate version format
        run: |
          VERSION="${{ inputs.version }}"

          # Check version format (semantic versioning)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected: X.Y.Z or X.Y.Z-rc.N or X.Y.Z-beta.N"
            exit 1
          fi

          echo "✅ Version format valid: $VERSION"

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ inputs.version }}"

          # Update version
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml

          echo "✅ Updated pyproject.toml to version $VERSION"

          # Show the change
          grep "^version = " pyproject.toml

      - name: Generate changelog from commits
        id: changelog
        run: |
          VERSION="${{ inputs.version }}"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found - including all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog since $LAST_TAG"
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create changelog
          CHANGELOG="## Changes in v${VERSION}

${COMMITS}

---
Generated from commits since last release"

          # Save to file for PR body
          echo "$CHANGELOG" > /tmp/changelog.md

          echo "✅ Changelog generated"

      - name: Create Release PR
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ inputs.version }}"
          BRANCH="release/v${VERSION}"

          # Create release branch
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -b "$BRANCH"
          git add pyproject.toml
          git commit -m "release: v${VERSION}" \
            -m "Bump version to ${VERSION}" \
            -m "" \
            -m "$(cat /tmp/changelog.md)" \
            -m "" \
            -m "Co-Authored-By: Automagik Genie 🧞 <genie@namastex.ai>"

          git push origin "$BRANCH"

          # Create PR
          PRERELEASE_FLAG="${{ inputs.prerelease }}"
          if [ "$PRERELEASE_FLAG" = "true" ]; then
            PR_TITLE="🔖 Pre-release: v${VERSION}"
          else
            PR_TITLE="🚀 Release: v${VERSION}"
          fi

          PR_BODY="## Release v${VERSION}

$(cat /tmp/changelog.md)

### Checklist
- [ ] Version updated in pyproject.toml
- [ ] Changelog looks correct
- [ ] Ready to publish to PyPI

### What happens when merged:
1. Git tag \`v${VERSION}\` will be created automatically
2. PyPI publishing workflow will trigger
3. Package will be published in ~5 minutes

**Pre-release**: ${{ inputs.prerelease }}
**Branch**: ${{ inputs.branch }}

---
🤖 This PR was created by the Create Release workflow"

          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base "${{ inputs.branch }}" \
            --head "$BRANCH" \
            --label "release"

          echo "✅ Release PR created!"
          echo "Review at: https://github.com/${{ github.repository }}/pulls"

      - name: Summary
        run: |
          echo "## 🎉 Release PR Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release**: ${{ inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the Release PR" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify version and changelog" >> $GITHUB_STEP_SUMMARY
          echo "3. Merge when ready → Auto-publishes to PyPI" >> $GITHUB_STEP_SUMMARY
