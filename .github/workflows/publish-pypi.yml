# PyPI Publishing Workflow
# Automatically publishes to PyPI when a version tag is pushed
# Supports both release candidates (rc) and stable releases

name: Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'        # Matches v1.0.0, v0.2.0rc1, etc.
  workflow_dispatch:    # Allow manual triggering

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Build and verify the package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Building version: $VERSION"

      - name: Verify pyproject.toml version matches tag
        run: |
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          TAG_VERSION="${{ steps.version.outputs.version }}"

          if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "   pyproject.toml: $PYPROJECT_VERSION"
            echo "   Git tag: $TAG_VERSION"
            exit 1
          fi

          echo "✅ Version match confirmed: $PYPROJECT_VERSION"

      - name: Install build dependencies
        run: uv sync --dev

      - name: Build package
        run: |
          echo "🔨 Building package..."
          uv build

          echo "📦 Build artifacts:"
          ls -lh dist/

      - name: Verify build artifacts
        run: |
          if [ ! -f "dist/automagik_hive-${{ steps.version.outputs.version }}-py3-none-any.whl" ]; then
            echo "❌ Wheel file not found!"
            exit 1
          fi

          if [ ! -f "dist/automagik-hive-${{ steps.version.outputs.version }}.tar.gz" ]; then
            echo "❌ Source distribution not found!"
            exit 1
          fi

          echo "✅ All build artifacts present"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/
          retention-days: 7

  # Publish to TestPyPI first
  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: testpypi
      url: https://test.pypi.org/project/automagik-hive/
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

      - name: Test TestPyPI installation
        run: |
          sleep 60  # Wait for TestPyPI propagation

          echo "🧪 Testing installation from TestPyPI..."
          pip install --index-url https://test.pypi.org/simple/ \
                      --extra-index-url https://pypi.org/simple \
                      automagik-hive==${{ needs.build.outputs.version }} || {
            echo "⚠️ TestPyPI installation test failed (this is non-blocking)"
          }

  # Publish to production PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, publish-testpypi]
    environment:
      name: pypi
      url: https://pypi.org/project/automagik-hive/
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true

      - name: Create summary
        run: |
          echo "## 🎉 Package Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Install from PyPI" >> $GITHUB_STEP_SUMMARY
          echo "pip install automagik-hive==${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or run directly with uvx" >> $GITHUB_STEP_SUMMARY
          echo "uvx automagik-hive@${{ needs.build.outputs.version }} --version" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [PyPI Package](https://pypi.org/project/automagik-hive/${{ needs.build.outputs.version }}/)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build.outputs.version }})" >> $GITHUB_STEP_SUMMARY

  # Update GitHub Release
  update-release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: [build, publish-pypi]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Update GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body: |
            ## 📦 PyPI Release

            This release has been published to PyPI!

            ### Installation
            ```bash
            # Install from PyPI
            pip install automagik-hive==${{ needs.build.outputs.version }}

            # Or run directly with uvx
            uvx automagik-hive@${{ needs.build.outputs.version }} --version
            ```

            ### Links
            - [PyPI Package](https://pypi.org/project/automagik-hive/${{ needs.build.outputs.version }}/)
            - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)

            ---
            🤖 Published automatically via GitHub Actions
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, 'rc') || contains(needs.build.outputs.version, 'b') }}
