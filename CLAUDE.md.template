# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Development Commands

### Essential Commands
```bash
# Install dependencies and set up environment
uv sync

# Run tests
uv run pytest                         # Run all tests
uv run pytest tests/unit/             # Run unit tests only
uv run pytest tests/integration/      # Run integration tests
uv run pytest -v                      # Verbose output
uv run pytest tests/path/to/test.py   # Run specific test file
uv run pytest -k "test_function_name"  # Run specific test

# Code quality
uv run ruff check .                    # Lint code
uv run ruff format .                   # Format code
uv run mypy .                         # Type checking

# Run services
uv run automagik-hive --init          # Initialize workspace
uv run python api/serve.py            # Start API server (port 8886)

# Agent service management
uv run automagik-hive --agent-start   # Start agent service (port 38886)
uv run automagik-hive --agent-stop    # Stop agent service
uv run automagik-hive --agent-status  # Check agent service status
```

### Database Commands
```bash
# PostgreSQL management via CLI
uv run automagik-hive --postgres-start    # Start PostgreSQL
uv run automagik-hive --postgres-stop     # Stop PostgreSQL
uv run automagik-hive --postgres-status   # Check status
uv run automagik-hive --postgres-restart  # Restart PostgreSQL
uv run automagik-hive --postgres-logs     # View logs
```

## High-Level Architecture

### Three-Layer Agent System

The Automagik Hive implements a sophisticated three-layer coordination system:

```
ðŸ§ž GENIE TEAM (Top Layer - Coordination)
    â”œâ”€â”€ Orchestrates work across domains
    â””â”€â”€ Uses mode="coordinate" for strategic decisions
    
ðŸŽ¯ DOMAIN ORCHESTRATORS (Middle Layer - ai/agents/)
    â”œâ”€â”€ genie-dev: Development coordination
    â”œâ”€â”€ genie-testing: Testing coordination
    â”œâ”€â”€ genie-quality: Quality assurance coordination
    â””â”€â”€ Each spawns specialized execution agents
    
ðŸ¤– EXECUTION AGENTS (Bottom Layer - .claude/agents/)
    â”œâ”€â”€ hive-dev-planner: Requirements analysis
    â”œâ”€â”€ hive-dev-designer: System design
    â”œâ”€â”€ hive-dev-coder: Implementation
    â”œâ”€â”€ hive-dev-fixer: Bug fixing
    â”œâ”€â”€ hive-testing-maker: Test creation
    â”œâ”€â”€ hive-testing-fixer: Test repair
    â”œâ”€â”€ hive-quality-ruff: Code formatting
    â””â”€â”€ hive-quality-mypy: Type checking
```

### Key Components

**AI System (`ai/`)**
- **Agents**: Domain orchestrators that coordinate specialized work
- **Teams**: Collections of agents working together
- **Workflows**: Multi-step processes with parallel execution support
- **Registry Pattern**: Dynamic loading via factory functions

**API Layer (`api/`)**
- FastAPI-based REST API
- Auto-exposes agents, teams, workflows via Playground
- WebSocket support for real-time streaming
- Comprehensive error handling and validation

**Library (`lib/`)**
- **Auth**: API key management and credential service
- **Config**: YAML-based configuration with environment overrides
- **Knowledge**: CSV-based RAG system with hot-reload
- **MCP**: Model Context Protocol integration for tool extensions
- **Metrics**: Performance tracking and observability
- **Storage**: PostgreSQL with pgvector for embeddings

**CLI (`cli/`)**
- Workspace management and initialization
- Service orchestration (API, agents, database)
- Docker container management
- Health checks and monitoring

### Agent Development Pattern

All agents follow a consistent pattern:

1. **Configuration** (`config.yaml`): Defines agent metadata, model settings, and instructions
2. **Factory Function** (`agent.py`): Creates agent instances with proper initialization
3. **Registry Integration**: Auto-discovered and loaded by the registry
4. **Version Management**: Every change requires version bump in config

Example agent structure:
```python
def get_agent(**kwargs) -> Agent:
    config = yaml.safe_load(open("config.yaml"))
    return Agent(
        agent_id=config["agent"]["agent_id"],
        instructions=config["instructions"],
        model=ModelConfig(**config["model"]),
        tools=[...],  # Domain-specific tools
        storage=PostgresStorage(...),
        version="dev",  # Development version
        **kwargs
    )
```

### Testing Strategy

The project follows Test-Driven Development (TDD) with comprehensive coverage:

- **Unit Tests**: `tests/unit/` - Component isolation testing
- **Integration Tests**: `tests/integration/` - System interaction testing
- **Test Organization**: Mirrors source code structure
- **Fixtures**: Shared test utilities in `conftest.py` files
- **Coverage Requirements**: Maintain >80% code coverage

### Critical Patterns

1. **Factory Pattern**: All components (agents, teams, workflows) created via factories
2. **YAML-First Configuration**: Never hardcode, use configs + environment variables
3. **Version Bumping**: ANY change requires version increment in YAML
4. **Registry-Based Discovery**: Components auto-discovered from filesystem
5. **PostgreSQL Storage**: All agents use PostgreSQL for state persistence
6. **MCP Integration**: Extensible tool system via Model Context Protocol

### Environment Configuration

Required environment variables (see `.env.example`):
- `ANTHROPIC_API_KEY`: Claude API access
- `OPENAI_API_KEY`: OpenAI models (optional)
- `GOOGLE_API_KEY`: Gemini models (optional)
- `POSTGRES_*`: Database configuration
- `HIVE_API_PORT`: API server port (default: 8886)
- `AGENT_SERVICE_PORT`: Agent service port (default: 38886)

### Development Workflow

1. **Make changes** to agent/team/workflow configurations
2. **Bump version** in the relevant `config.yaml`
3. **Run tests** to ensure nothing breaks
4. **Format/lint** with ruff
5. **Type check** with mypy
6. **Test integration** with the full system

### Important Notes

- Always use `uv` for Python package management (never pip directly)
- All new agents should use `version: "dev"` during development
- The `.claude/agents/` directory contains execution-layer agent specifications
- Test-first methodology is embedded across the execution layer
- Agents auto-load CLAUDE.md context at runtime for consistency