"""
Finalizacao Workflow - Native Agno Integration Pattern
Uses custom execution function to call typification workflow directly
"""

import json
from typing import Any, Dict, Optional
from datetime import datetime

from agno.workflow.v2 import Workflow
from agno.workflow.v2.types import WorkflowExecutionInput
from lib.logging import logger

# Import typification workflow
from ai.workflows.conversation_typification.workflow import get_conversation_typification_workflow

# Import shared utilities
from ai.workflows.shared.protocol_generator import generate_protocol_id, format_protocol_for_user


async def finalizacao_execution(
    workflow: Workflow,
    execution_input: WorkflowExecutionInput,
    **kwargs: Any
) -> str:
    """
    Execute finalizacao workflow with native typification integration.
    
    Uses Agno native patterns:
    - WorkflowExecutionInput for structured input
    - workflow.workflow_session_state for team context
    - Direct workflow calling via arun()
    """
    
    try:
        logger.info("Iniciando finaliza√ß√£o com tipifica√ß√£o integrada")
        
        # Extract team context from workflow session state
        team_session = workflow.workflow_session_state or {}
        conversation_history = execution_input.message or ""
        
        # Extract customer context from team session
        customer_context = team_session.get("customer_context", {})
        session_id = team_session.get("session_id", f"session-{datetime.now().strftime('%Y%m%d%H%M%S')}")
        
        logger.info(f"üìã Session ID: {session_id}")
        logger.info(f"üë§ Customer context: {customer_context}")
        
        if not conversation_history:
            logger.warning("Nenhum hist√≥rico de conversa fornecido")
            return "‚ùå Erro: Hist√≥rico de conversa n√£o encontrado para tipifica√ß√£o"
        
        # Call typification workflow directly using native Agno pattern
        logger.info("Chamando workflow de tipifica√ß√£o...")
        
        typification_workflow = get_conversation_typification_workflow()
        typification_result = await typification_workflow.arun(
            message=conversation_history,
            session_id=session_id,
            additional_data={
                "customer_context": customer_context,
                "session_metadata": team_session,
                "workflow_caller": "finalizacao",
                "timestamp": datetime.now().isoformat()
            }
        )
        
        logger.info("Tipifica√ß√£o conclu√≠da com sucesso")
        
        # Extract typification results
        if hasattr(typification_result, 'content'):
            # Handle WorkflowRunResponse
            typification_data = typification_result.content
        else:
            # Handle direct response
            typification_data = str(typification_result)
        
        # Parse typification results
        try:
            if isinstance(typification_data, str):
                result_data = json.loads(typification_data)
            else:
                result_data = typification_data
                
            typification_info = result_data.get('typification', {})
            hierarchy_path = result_data.get('hierarchy_path', 'Tipifica√ß√£o realizada')
            retry_used = result_data.get('retry_used', False)
            
        except (json.JSONDecodeError, Exception) as e:
            logger.warning(f"‚ö†Ô∏è Erro ao processar resultado da tipifica√ß√£o: {str(e)}")
            # Use default values if parsing fails
            typification_info = {"hierarchy_path": "Tipifica√ß√£o realizada"}
            hierarchy_path = "Tipifica√ß√£o realizada"
            retry_used = False
        
        # Generate protocol
        protocol_id = generate_protocol_id(session_id, "typification")
        protocol_message = format_protocol_for_user({
            "protocol_id": protocol_id,
            "protocol_type": "finalization_with_typification",
            "typification_path": hierarchy_path,
            "customer_context": customer_context,
            "timestamp": datetime.now().isoformat()
        })
        
        # Create farewell message with protocol and typification info
        customer_name = customer_context.get("customer_name") or customer_context.get("pb_user_name") or "cliente"
        
        farewell_message = f"""Obrigada por entrar em contato, {customer_name}! 

‚úÖ Seu atendimento foi finalizado com sucesso!

üìã {protocol_message}

üéØ Tipifica√ß√£o: {hierarchy_path}
{f"üîÑ Classifica√ß√£o ajustada automaticamente" if retry_used else ""}

Tenha um √≥timo dia! üíô"""
        
        logger.info(f"üí¨ Mensagem de despedida criada: {protocol_id}")
        
        # Store results in workflow session state for future reference
        workflow.workflow_session_state.update({
            "finalization_completed": True,
            "protocol_id": protocol_id,
            "typification_result": {
                "hierarchy_path": hierarchy_path,
                "retry_used": retry_used,
                "timestamp": datetime.now().isoformat()
            }
        })
        
        # Send WhatsApp notification using same pattern as startup notifications
        try:
            from common.notifications import send_notification, NotificationLevel
            
            # Format notification message
            notification_message = f"""üéØ *Atendimento Finalizado com Tipifica√ß√£o*

üìã Protocolo: {protocol_id}
üë§ Cliente: {customer_name}
üéØ Tipifica√ß√£o: {hierarchy_path}
{f"üîÑ Classifica√ß√£o ajustada automaticamente" if retry_used else ""}

‚è∞ Processado em: {datetime.now().strftime('%H:%M:%S')}
üÜî Sess√£o: {session_id}

‚úÖ Atendimento conclu√≠do com sucesso"""
            
            # Send notification using exact same pattern as startup
            logger.info("Sending WhatsApp notification for typification report")
            notification_sent = await send_notification(
                title="üéØ Tipifica√ß√£o Conclu√≠da",
                message=notification_message,
                source="finalizacao-typification",
                level=NotificationLevel.INFO
            )
            
            if notification_sent:
                logger.info("WhatsApp notification sent successfully")
            else:
                logger.warning("WhatsApp notification failed")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to send WhatsApp notification: {str(e)}")
            # Don't fail the entire workflow for notification issues
        
        return farewell_message
        
    except Exception as e:
        logger.error(f"‚ùå Erro na finaliza√ß√£o: {str(e)}")
        
        # Graceful fallback - still provide farewell even if typification fails
        protocol_id = generate_protocol_id(
            team_session.get("session_id", "fallback"), 
            "finalization_fallback"
        )
        
        fallback_message = f"""Obrigada por entrar em contato! 

‚úÖ Seu atendimento foi finalizado.

üìã Protocolo: {protocol_id}

‚ö†Ô∏è Nota: Houve um problema na tipifica√ß√£o autom√°tica, mas seu atendimento foi registrado com sucesso.

Tenha um √≥timo dia! üíô"""
        
        return fallback_message


# Create workflow instance using native Agno pattern
def get_finalizacao_workflow(**kwargs) -> Workflow:
    """Factory function to create finalizacao workflow"""
    
    return Workflow(
        name="Finalizacao com Tipifica√ß√£o",
        description="Workflow de finaliza√ß√£o que integra tipifica√ß√£o automaticamente",
        steps=finalizacao_execution,  # Use custom execution function
        workflow_session_state={},   # Initialize empty session state
        **kwargs
    )


# For backward compatibility and direct testing
finalizacao_workflow = get_finalizacao_workflow()


if __name__ == "__main__":
    # Test the workflow
    import asyncio
    
    async def test_finalizacao():
        """Test finalizacao workflow"""
        
        # Simulate team session context
        test_session_state = {
            "session_id": "test-session-123",
            "customer_context": {
                "customer_name": "Jo√£o Silva",
                "pb_user_name": "Jo√£o Silva", 
                "pb_phone_number": "+5511999999999",
                "pb_user_cpf": "123.456.789-10",
                "user_id": "user-123"
            }
        }
        
        # Test conversation about card blocking
        test_conversation = """
        Cliente: Oi, preciso bloquear meu cart√£o porque perdi ele.
        Atendente: Ol√°! Vou te ajudar com o bloqueio do cart√£o. Pode me confirmar seus dados?
        Cliente: Sim, meu CPF √© 123.456.789-10 e meu nome √© Jo√£o Silva.
        Atendente: Perfeito Jo√£o! Seu cart√£o foi bloqueado com sucesso por motivo de perda. Voc√™ receber√° um novo cart√£o em at√© 7 dias √∫teis.
        Cliente: Obrigado! Est√° resolvido ent√£o.
        """
        
        # Create workflow with test session state
        workflow = get_finalizacao_workflow()
        workflow.workflow_session_state = test_session_state
        
        logger.info("Testando workflow de finaliza√ß√£o...")
        logger.info(f"ü§ñ Session ID: {test_session_state['session_id']}")
        logger.info(f"ü§ñ Cliente: {test_session_state['customer_context']['customer_name']}")
        
        # Run workflow
        result = await workflow.arun(message=test_conversation)
        
        logger.info("Resultado da finaliza√ß√£o:")
        logger.info(f"ü§ñ {result.content if hasattr(result, 'content') else result}")
        
    # Run test
    asyncio.run(test_finalizacao())