team:
  mode: coordinate
  name: "Code Development Team"
  team_id: "code-development-team"
  version: 2
  description: >
    Comprehensive code development team providing end-to-end software development
    capabilities through coordinated multi-agent collaboration. Handles project
    onboarding, code analysis, file operations, and intelligent code modifications.

model:
  provider: openai
  id: gpt-4.1-mini
  temperature: 0.7
  max_tokens: 2000

storage:
  type: postgres
  table_name: teams_code_development
  auto_upgrade_schema: true

memory:
  num_history_runs: 10
  enable_user_memories: true
  enable_agentic_memory: false
  add_history_to_messages: true
  enable_session_summaries: true
  add_memory_references: true
  add_session_summary_references: true

display:
  markdown: false
  show_tool_calls: true
  add_datetime_to_instructions: true

context:
  add_state_in_messages: true
  enable_agentic_context: true
  share_member_interactions: true

events:
  store_events: true
  events_to_skip: []

streaming:
  stream: true
  stream_member_events: true
  show_members_responses: true
  stream_intermediate_steps: true

members:
  - project-orchestration-agent
  - code-understanding-agent
  - file-management-agent
  - code-editing-agent

# Coordination patterns for different types of work
coordination_patterns:
  project_setup:
    description: "Initial project analysis and setup"
    workflow:
      - agent: "project-orchestration-agent"
        action: "onboarding"
        description: "Comprehensive project analysis and setup"
      - agent: "file-management-agent"
        action: "list_dir"
        description: "Directory structure analysis"
      - agent: "code-understanding-agent"
        action: "get_symbols_overview"
        description: "Code structure overview"
        depends_on: ["project-orchestration-agent"]

  code_analysis:
    description: "Deep code analysis and understanding"
    workflow:
      - agent: "code-understanding-agent"
        action: "find_symbol"
        description: "Locate and analyze symbols"
      - agent: "code-understanding-agent"
        action: "find_referencing_symbols"
        description: "Map symbol relationships"
        depends_on: ["find_symbol"]
      - agent: "file-management-agent"
        action: "read_file"
        description: "Read relevant files for analysis"
        parallel: true

  code_modification:
    description: "Safe code modifications with validation"
    workflow:
      - agent: "code-understanding-agent"
        action: "find_symbol"
        description: "Understand current symbol structure"
      - agent: "file-management-agent"
        action: "read_file"
        description: "Read target files"
        parallel: true
      - agent: "code-editing-agent"
        action: "replace_symbol_body"
        description: "Perform code modifications"
        depends_on: ["code-understanding-agent", "file-management-agent"]
      - agent: "code-editing-agent"
        action: "validate_code_syntax"
        description: "Validate modifications"
        depends_on: ["replace_symbol_body"]
      - agent: "project-orchestration-agent"
        action: "write_memory"
        description: "Record modifications"
        depends_on: ["validate_code_syntax"]

# Task routing based on request analysis
task_routing:
  project_questions:
    keywords: ["project", "setup", "onboard", "overview", "structure"]
    primary_agent: "project-orchestration-agent"
    support_agents: ["file-management-agent"]

  code_analysis:
    keywords: ["find", "analyze", "understand", "symbol", "function", "class"]
    primary_agent: "code-understanding-agent"
    support_agents: ["file-management-agent"]

  file_operations:
    keywords: ["read", "write", "create", "delete", "search", "file", "directory"]
    primary_agent: "file-management-agent"
    support_agents: ["code-understanding-agent"]

  code_modification:
    keywords: ["modify", "change", "refactor", "rename", "replace", "edit"]
    primary_agent: "code-editing-agent"
    support_agents: ["code-understanding-agent", "file-management-agent"]
    always_coordinate: true

# Quality assurance patterns
quality_assurance:
  before_modification:
    - validate_target_exists
    - analyze_dependencies
    - create_backup
    - understand_scope

  after_modification:
    - validate_syntax
    - check_references
    - run_tests
    - update_memory

# Memory coordination patterns
memory_coordination:
  shared_context:
    - project_structure
    - symbol_mappings
    - modification_history
    - workflow_state

  agent_specific:
    project_orchestration: ["project_config", "coordination_state"]
    code_understanding: ["symbol_cache", "analysis_results"]
    file_management: ["file_operations", "search_results"]
    code_editing: ["modification_log", "validation_results"]

instructions: |
  You are the Code Development Team coordinator providing comprehensive software development capabilities.

  **Team Coordination:**
  - Coordinate project-orchestration-agent for project setup and memory management
  - Coordinate code-understanding-agent for symbol analysis and code structure
  - Coordinate file-management-agent for file operations and content management  
  - Coordinate code-editing-agent for safe code modifications and refactoring

  **Workflow Patterns:**
  - Project setup: Start with onboarding → directory analysis → symbol overview
  - Code analysis: Symbol analysis → file reading → relationship mapping
  - Code modifications: Understand structure → prepare changes → validate → record

  Always ensure safe operations with proper validation and backup procedures.

expected_output: |
  Coordinated software development capabilities with comprehensive project
  understanding, safe code operations, and intelligent task distribution
  across specialized agents.

success_criteria: >
  SUCESSO = Successfully coordinated multi-agent workflows, maintained
  code quality and safety, provided comprehensive development capabilities

add_datetime_to_instructions: true