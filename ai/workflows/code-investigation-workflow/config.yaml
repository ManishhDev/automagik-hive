workflow:
  name: "Code Investigation Workflow"
  workflow_id: "code-investigation-workflow"
  version: dev
  description: >
    Deep code investigation workflow for understanding specific symbols, analyzing
    dependencies, tracing code flows, and providing comprehensive code comprehension
    for development and debugging tasks.

steps:
  - step_id: "symbol_discovery"
    name: "Symbol Discovery and Location"
    description: "Find and locate target symbols in the codebase"
    agent: "code-understanding-agent"
    action: "find_symbol"
    inputs:
      symbol_name: "{{ target_symbol }}"
      symbol_type: "{{ symbol_type }}"
      file_pattern: "{{ file_pattern }}"
      case_sensitive: true
    expected_outputs:
      - symbol_locations
      - symbol_definitions
      - context_information

  - step_id: "reference_analysis"
    name: "Symbol Reference Analysis"
    description: "Analyze all references to the target symbol"
    agent: "code-understanding-agent"
    action: "find_referencing_symbols"
    depends_on: ["symbol_discovery"]
    inputs:
      target_symbol: "{{ target_symbol }}"
      target_file: "{{ primary_symbol_file }}"
      target_line: "{{ primary_symbol_line }}"
    expected_outputs:
      - reference_locations
      - usage_patterns
      - dependency_relationships

  - step_id: "code_snippet_extraction"
    name: "Usage Context Extraction"
    description: "Extract code snippets showing symbol usage with context"
    agent: "code-understanding-agent"
    action: "find_referencing_code_snippets"
    depends_on: ["symbol_discovery"]
    inputs:
      target_symbol: "{{ target_symbol }}"
      target_file: "{{ primary_symbol_file }}"
      context_lines: 5
    expected_outputs:
      - usage_examples
      - context_snippets
      - pattern_analysis

  - step_id: "file_content_analysis"
    name: "Detailed File Content Analysis"
    description: "Deep analysis of files containing the target symbol"
    agent: "file-management-agent"
    action: "read_file"
    depends_on: ["symbol_discovery"]
    parallel_execution: true
    inputs:
      relative_path: "{{ relevant_file_path }}"
      max_chars: 50000
    expected_outputs:
      - file_content
      - structure_analysis
      - related_symbols

  - step_id: "dependency_search"
    name: "Dependency Pattern Search"
    description: "Search for related patterns and dependencies"
    agent: "file-management-agent"
    action: "search_for_pattern"
    depends_on: ["reference_analysis"]
    inputs:
      pattern: "{{ dependency_patterns }}"
      case_sensitive: false
      use_regex: true
      max_results: 100
      context_lines: 2
    expected_outputs:
      - dependency_matches
      - related_patterns
      - cross_references

  - step_id: "architectural_overview"
    name: "Architectural Context Overview"
    description: "Get architectural overview of relevant modules"
    agent: "code-understanding-agent"
    action: "get_symbols_overview"
    depends_on: ["file_content_analysis"]
    inputs:
      file_or_directory: "{{ analysis_scope }}"
      include_private: "{{ include_private_symbols }}"
    expected_outputs:
      - architectural_structure
      - symbol_relationships
      - module_organization

  - step_id: "investigation_summary"
    name: "Investigation Results Consolidation"
    description: "Consolidate all investigation results into comprehensive summary"
    agent: "project-orchestration-agent"
    action: "write_memory"
    depends_on: ["symbol_discovery", "reference_analysis", "code_snippet_extraction", "dependency_search", "architectural_overview"]
    inputs:
      memory_name: "investigation_{{ target_symbol }}_{{ timestamp }}"
      content: "{{ consolidate_investigation_results }}"
    expected_outputs:
      - investigation_report
      - findings_summary
      - actionable_insights

# Input parameters for workflow execution
input_parameters:
  target_symbol:
    type: string
    description: "Name of the symbol to investigate"
    required: true

  symbol_type:
    type: string
    description: "Type of symbol (function, class, method, variable)"
    required: false
    options: ["function", "class", "method", "variable", "interface", "type"]

  investigation_scope:
    type: string
    description: "Scope of investigation (file, directory, project)"
    required: false
    default: "project"
    options: ["file", "directory", "project"]

  analysis_depth:
    type: string
    description: "Depth of analysis (surface, standard, deep)"
    required: false
    default: "standard"
    options: ["surface", "standard", "deep"]

  file_pattern:
    type: string
    description: "File pattern to limit search scope"
    required: false
    default: "*"

  include_private_symbols:
    type: boolean
    description: "Include private/internal symbols in analysis"
    required: false
    default: false

  context_lines:
    type: integer
    description: "Number of context lines around matches"
    required: false
    default: 3
    min: 1
    max: 10

# Dynamic parameter resolution
dynamic_parameters:
  primary_symbol_file:
    source: "symbol_discovery"
    extraction: "first_occurrence.file"
    fallback: "unknown"

  primary_symbol_line:
    source: "symbol_discovery"
    extraction: "first_occurrence.line"
    fallback: null

  relevant_file_paths:
    source: "symbol_discovery"
    extraction: "all_files"
    max_items: 10

  dependency_patterns:
    source: "reference_analysis"
    extraction: "common_patterns"
    fallback: "{{ target_symbol }}"

  analysis_scope:
    source: "file_content_analysis"
    extraction: "parent_directory"
    fallback: "."

# Output structure
output_structure:
  symbol_analysis:
    - symbol_definitions
    - symbol_locations
    - symbol_types
    - symbol_scope

  usage_analysis:
    - reference_locations
    - usage_patterns
    - context_examples
    - dependency_relationships

  architectural_insights:
    - module_structure
    - design_patterns
    - integration_points
    - architectural_role

  investigation_findings:
    - key_discoveries
    - potential_issues
    - improvement_opportunities
    - related_components

# Workflow coordination
coordination:
  retry_failed_steps: true
  max_retries: 2
  parallel_execution_limit: 5
  timeout_per_step: 180  # 3 minutes

  conditional_execution:
    deep_analysis:
      condition: "analysis_depth == 'deep'"
      additional_steps:
        - "comprehensive_dependency_trace"
        - "performance_impact_analysis"
        - "security_implications_check"

  error_handling:
    symbol_not_found:
      action: "expand_search_criteria"
      retry: true
    
    file_access_denied:
      action: "skip_file"
      continue: true
    
    timeout_exceeded:
      action: "partial_results"
      continue: true

# Quality gates
quality_gates:
  - gate_id: "symbol_found"
    description: "Target symbol successfully located"
    condition: "symbol_discovery_successful"
    critical: true
    
  - gate_id: "minimum_analysis"
    description: "Minimum analysis depth achieved"
    condition: "at_least_basic_analysis_complete"
    
  - gate_id: "results_coherent"
    description: "Investigation results are coherent and complete"
    condition: "no_major_inconsistencies"

# Success criteria
success_criteria:
  primary:
    - "Target symbol located and analyzed"
    - "Symbol references mapped and understood"
    - "Usage patterns identified and documented"
    - "Investigation results stored in memory"

  secondary:
    - "Architectural context established"
    - "Dependencies and relationships mapped"
    - "Code quality insights generated"
    - "Actionable recommendations provided"

# Integration points
integration:
  team_coordination:
    team_id: "code-development-team"
    coordination_mode: "collaborative"

  memory_management:
    persistent_memory: true
    cross_reference_existing: true
    investigation_history: true

  follow_up_workflows:
    modification_ready: "code-modification-workflow"
    refactoring_needed: "code-refactoring-workflow"

# Performance considerations
performance:
  caching:
    symbol_definitions: true
    file_content: true
    search_results: true
    
  optimization:
    parallel_file_analysis: true
    incremental_search: true
    result_streaming: false

expected_duration: "3-10 minutes"

tags:
  - "investigation"
  - "code-analysis"
  - "symbol-tracing"
  - "dependency-analysis"