workflow:
  name: "Code Project Onboarding Workflow"
  workflow_id: "code-onboarding-workflow"
  version: 8
  description: >
    Comprehensive project onboarding workflow that analyzes project structure,
    identifies technologies, maps dependencies, and sets up development context
    for multi-agent collaboration.

steps:
  - step_id: "initial_assessment"
    name: "Initial Project Assessment"
    description: "Perform basic project structure analysis and technology detection"
    agent: "project-orchestration-agent"
    action: "onboarding"
    inputs:
      project_type: null
      force_refresh: false
    expected_outputs:
      - project_structure_analysis
      - technology_stack_detection
      - dependency_analysis
      - initial_recommendations

  - step_id: "directory_analysis"
    name: "Directory Structure Analysis"
    description: "Comprehensive directory structure and file organization analysis"
    agent: "file-management-agent"
    action: "list_dir"
    depends_on: ["initial_assessment"]
    inputs:
      relative_path: "."
      recursive: true
      max_items: 500
      show_hidden: false
    expected_outputs:
      - directory_hierarchy
      - file_distribution
      - organization_patterns

  - step_id: "symbol_overview"
    name: "Code Symbol Overview"
    description: "High-level analysis of code symbols and architectural patterns"
    agent: "code-understanding-agent"
    action: "get_symbols_overview"
    depends_on: ["directory_analysis"]
    inputs:
      file_or_directory: "."
      include_private: false
    expected_outputs:
      - symbol_inventory
      - architectural_patterns
      - code_organization

  - step_id: "key_file_analysis"
    name: "Key Configuration Files Analysis"
    description: "Analysis of important configuration and setup files"
    agent: "file-management-agent"
    action: "search_for_pattern"
    depends_on: ["directory_analysis"]
    inputs:
      pattern: "config|setup|requirements|package"
      file_pattern: "*"
      case_sensitive: false
      max_results: 50
    expected_outputs:
      - configuration_files
      - setup_scripts
      - dependency_definitions

  - step_id: "syntax_validation"
    name: "Codebase Syntax Validation"
    description: "Validate syntax across major source files"
    agent: "code-editing-agent"
    action: "validate_code_syntax"
    depends_on: ["symbol_overview"]
    parallel_execution: true
    inputs:
      # This will be populated dynamically based on discovered files
      file_path: "main.py"  # Example - will be replaced with discovered files
    expected_outputs:
      - syntax_health_report
      - error_identification
      - quality_metrics

  - step_id: "memory_consolidation"
    name: "Project Memory Consolidation"
    description: "Consolidate all onboarding results into comprehensive project memory"
    agent: "project-orchestration-agent"
    action: "write_memory"
    depends_on: ["initial_assessment", "directory_analysis", "symbol_overview", "key_file_analysis", "syntax_validation"]
    inputs:
      memory_name: "onboarding_complete"
      content: "{{ consolidate_onboarding_results }}"
    expected_outputs:
      - comprehensive_project_memory
      - onboarding_completion_status

# Input parameters for workflow execution
input_parameters:
  project_path:
    type: string
    description: "Path to the project directory"
    required: false
    default: "."

  analysis_depth:
    type: string
    description: "Depth of analysis (basic, standard, comprehensive)"
    required: false
    default: "standard"
    options: ["basic", "standard", "comprehensive"]

  include_private_symbols:
    type: boolean
    description: "Whether to include private/internal symbols in analysis"
    required: false
    default: false

  force_refresh:
    type: boolean
    description: "Force refresh of existing onboarding data"
    required: false
    default: false

# Output structure
output_structure:
  project_assessment:
    - project_metadata
    - technology_stack
    - dependency_analysis
    - quality_metrics

  structural_analysis:
    - directory_hierarchy
    - file_organization
    - configuration_files

  code_analysis:
    - symbol_inventory
    - architectural_patterns
    - syntax_validation_results

  recommendations:
    - development_setup
    - improvement_opportunities
    - next_steps

# Workflow coordination settings
coordination:
  retry_failed_steps: true
  max_retries: 2
  parallel_execution_limit: 3
  timeout_per_step: 300  # 5 minutes

  error_handling:
    continue_on_non_critical_errors: true
    escalation_triggers:
      - "project_not_found"
      - "permission_denied"
      - "corrupted_files"

# Quality gates
quality_gates:
  - gate_id: "project_accessibility"
    description: "Ensure project directory is accessible"
    condition: "project_directory_exists"
    
  - gate_id: "minimum_analysis_completion"
    description: "At least basic project analysis completed"
    condition: "initial_assessment_completed"
    
  - gate_id: "memory_persistence"
    description: "Project memory successfully stored"
    condition: "memory_consolidation_successful"

# Success criteria
success_criteria:
  primary:
    - "Project structure analyzed and documented"
    - "Technology stack identified and catalogued"
    - "Development context established"
    - "Project memory created and accessible"

  secondary:
    - "Code quality baseline established"
    - "Architectural patterns identified"
    - "Development recommendations generated"

# Integration points
integration:
  team_coordination:
    team_id: "code-development-team"
    coordination_mode: "orchestrated"

  memory_management:
    persistent_memory: true
    shared_context: true
    memory_cleanup: false

  notifications:
    completion_status: true
    error_alerts: true
    progress_updates: false

expected_duration: "5-15 minutes"

tags:
  - "onboarding"
  - "project-analysis"
  - "code-understanding"
  - "development-setup"