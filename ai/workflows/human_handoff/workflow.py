"""
Human Handoff Workflow - Native Agno Integration Pattern
Uses custom execution function to call typification workflow directly
"""

import json
from typing import Any, Dict, Optional
from datetime import datetime
from lib.logging import logger

from agno.workflow.v2 import Workflow
from agno.workflow.v2.types import WorkflowExecutionInput

# Import typification workflow
from ai.workflows.conversation_typification.workflow import get_conversation_typification_workflow

# Import shared utilities
from ai.workflows.shared.protocol_generator import generate_protocol_id, format_protocol_for_user


async def human_handoff_execution(
    workflow: Workflow,
    execution_input: WorkflowExecutionInput,
    **kwargs: Any
) -> str:
    """
    Execute human handoff workflow with native typification integration.
    
    Uses Agno native patterns:
    - WorkflowExecutionInput for structured input
    - workflow.workflow_session_state for team context
    - Direct workflow calling via arun()
    """
    
    try:
        logger.info("üö® Iniciando escala√ß√£o para atendimento humano com tipifica√ß√£o integrada")
        
        # Extract team context from workflow session state
        team_session = workflow.workflow_session_state or {}
        conversation_history = execution_input.message or ""
        
        # Extract customer context from team session
        customer_context = team_session.get("customer_context", {})
        session_id = team_session.get("session_id", f"session-{datetime.now().strftime('%Y%m%d%H%M%S')}")
        
        logger.info(f"üìã Session ID: {session_id}")
        logger.info(f"üë§ Customer context: {customer_context}")
        
        if not conversation_history:
            logger.warning("‚ö†Ô∏è Nenhum hist√≥rico de conversa fornecido")
            return "‚ùå Erro: Hist√≥rico de conversa n√£o encontrado para escala√ß√£o"
        
        # Call typification workflow directly using native Agno pattern
        logger.info("üîÑ Chamando workflow de tipifica√ß√£o para escala√ß√£o...")
        
        typification_workflow = get_conversation_typification_workflow()
        typification_result = await typification_workflow.arun(
            message=conversation_history,
            session_id=session_id,
            additional_data={
                "customer_context": customer_context,
                "session_metadata": team_session,
                "workflow_caller": "human_handoff",
                "escalation_triggered": True,
                "timestamp": datetime.now().isoformat()
            }
        )
        
        logger.info("‚úÖ Tipifica√ß√£o para escala√ß√£o conclu√≠da com sucesso")
        
        # Extract typification results
        if hasattr(typification_result, 'content'):
            # Handle WorkflowRunResponse
            typification_data = typification_result.content
        else:
            # Handle direct response
            typification_data = str(typification_result)
        
        # Parse typification results
        try:
            if isinstance(typification_data, str):
                result_data = json.loads(typification_data)
            else:
                result_data = typification_data
                
            typification_info = result_data.get('typification', {})
            hierarchy_path = result_data.get('hierarchy_path', 'Escala√ß√£o registrada')
            retry_used = result_data.get('retry_used', False)
            
        except (json.JSONDecodeError, Exception) as e:
            logger.warning(f"‚ö†Ô∏è Erro ao processar resultado da tipifica√ß√£o: {str(e)}")
            # Use default values if parsing fails
            typification_info = {"hierarchy_path": "Escala√ß√£o registrada"}
            hierarchy_path = "Escala√ß√£o registrada"
            retry_used = False
        
        # Generate protocol for human handoff
        protocol_id = generate_protocol_id(session_id, "human_handoff")
        protocol_message = format_protocol_for_user({
            "protocol_id": protocol_id,
            "protocol_type": "human_handoff_with_typification",
            "typification_path": hierarchy_path,
            "customer_context": customer_context,
            "escalation_reason": "Solicita√ß√£o de atendimento humano",
            "timestamp": datetime.now().isoformat()
        })
        
        # Create escalation message with protocol and typification info
        customer_name = customer_context.get("customer_name") or customer_context.get("pb_user_name") or "cliente"
        
        escalation_message = f"""üö® Solicita√ß√£o de Atendimento Humano

Ol√° {customer_name}! 

Entendi que voc√™ precisa de atendimento humano especializado. J√° registrei sua solicita√ß√£o e um de nossos atendentes entrar√° em contato em breve.

üìã {protocol_message}

üéØ Tipifica√ß√£o: {hierarchy_path}
{f"üîÑ Classifica√ß√£o ajustada automaticamente" if retry_used else ""}

‚è∞ Tempo estimado de resposta: 15-30 minutos
üìû Equipe: Atendimento especializado

Obrigada pela paci√™ncia! üíô"""
        
        logger.info(f"üìû Mensagem de escala√ß√£o criada: {protocol_id}")
        
        # Store results in workflow session state for future reference
        workflow.workflow_session_state.update({
            "human_handoff_completed": True,
            "protocol_id": protocol_id,
            "escalation_reason": "Solicita√ß√£o expl√≠cita de atendimento humano",
            "typification_result": {
                "hierarchy_path": hierarchy_path,
                "retry_used": retry_used,
                "timestamp": datetime.now().isoformat()
            }
        })
        
        # Send WhatsApp notification using same pattern as startup notifications
        try:
            from common.notifications import send_notification, NotificationLevel
            
            # Format notification message
            notification_message = f"""üö® *Escala√ß√£o para Atendimento Humano*

üìã Protocolo: {protocol_id}
üë§ Cliente: {customer_name}
üéØ Tipifica√ß√£o: {hierarchy_path}
{f"üîÑ Classifica√ß√£o ajustada automaticamente" if retry_used else ""}

üìû Motivo: Solicita√ß√£o expl√≠cita de atendimento humano
‚è∞ Escalado em: {datetime.now().strftime('%H:%M:%S')}
üÜî Sess√£o: {session_id}

üö® Cliente aguarda atendimento especializado"""
            
            # Send notification using exact same pattern as startup
            logger.info("Sending WhatsApp notification for human handoff")
            notification_sent = await send_notification(
                title="üö® Escala√ß√£o para Atendimento Humano",
                message=notification_message,
                source="human-handoff-escalation",
                level=NotificationLevel.CRITICAL
            )
            
            if notification_sent:
                logger.info("‚úÖ WhatsApp notification sent successfully")
            else:
                logger.warning("‚ö†Ô∏è WhatsApp notification failed")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to send WhatsApp notification: {str(e)}")
            # Don't fail the entire workflow for notification issues
        
        return escalation_message
        
    except Exception as e:
        logger.error(f"‚ùå Erro na escala√ß√£o: {str(e)}")
        
        # Graceful fallback - still provide escalation even if typification fails
        protocol_id = generate_protocol_id(
            team_session.get("session_id", "fallback"), 
            "human_handoff_fallback"
        )
        
        fallback_message = f"""üö® Solicita√ß√£o de Atendimento Humano

Ol√°! 

Registrei sua solicita√ß√£o de atendimento humano. Um de nossos especialistas entrar√° em contato em breve.

üìã Protocolo: {protocol_id}

‚ö†Ô∏è Nota: Houve um problema na tipifica√ß√£o autom√°tica, mas sua escala√ß√£o foi registrada com sucesso.

‚è∞ Tempo estimado: 15-30 minutos

Obrigada pela paci√™ncia! üíô"""
        
        return fallback_message


# Create workflow instance using native Agno pattern
def get_human_handoff_workflow(**kwargs) -> Workflow:
    """Factory function to create human handoff workflow"""
    
    return Workflow(
        name="Human Handoff com Tipifica√ß√£o",
        description="Workflow de escala√ß√£o que integra tipifica√ß√£o automaticamente",
        steps=human_handoff_execution,  # Use custom execution function
        workflow_session_state={},   # Initialize empty session state
        **kwargs
    )


# For backward compatibility and direct testing
human_handoff_workflow = get_human_handoff_workflow()


if __name__ == "__main__":
    # Test the workflow
    import asyncio
    
    async def test_human_handoff():
        """Test human handoff workflow"""
        
        # Simulate team session context
        test_session_state = {
            "session_id": "test-handoff-123",
            "customer_context": {
                "customer_name": "Maria Santos",
                "pb_user_name": "Maria Santos", 
                "pb_phone_number": "+5511888888888",
                "pb_user_cpf": "987.654.321-00",
                "user_id": "user-456"
            }
        }
        
        # Test conversation requiring human handoff
        test_conversation = """
        Cliente: Oi, estou com um problema muito complexo no meu cart√£o que ningu√©m conseguiu resolver.
        Atendente: Entendo sua frustra√ß√£o. Vou verificar as op√ß√µes dispon√≠veis.
        Cliente: J√° tentei v√°rias vezes e nada resolve. Preciso falar com uma pessoa mesmo, n√£o com rob√¥.
        Atendente: Compreendo perfeitamente. Vou escalar para nossa equipe especializada.
        Cliente: Por favor, preciso resolver isso hoje mesmo!
        """
        
        # Create workflow with test session state
        workflow = get_human_handoff_workflow()
        workflow.workflow_session_state = test_session_state
        
        logger.info("üß™ Testando workflow de escala√ß√£o humana...")
        logger.info(f"ü§ñ üìã Session ID: {test_session_state['session_id']}")
        logger.info(f"ü§ñ üë§ Cliente: {test_session_state['customer_context']['customer_name']}")
        
        # Run workflow
        result = await workflow.arun(message=test_conversation)
        
        logger.info("‚úÖ Resultado da escala√ß√£o:")
        logger.info(f"ü§ñ {result.content if hasattr(result, 'content') else result}")
        
    # Run test
    asyncio.run(test_human_handoff())