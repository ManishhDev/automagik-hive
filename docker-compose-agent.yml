# Agent Environment Docker Compose for Automagik Hive
# Mirrors main services with agent-specific ports and configurations
# Used by: make install-agent, make agent-* commands

x-build-args: &build-args
  BUILD_VERSION: ${BUILD_VERSION:-latest}
  BUILD_DATE: ${BUILD_DATE:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}
  GIT_SHA: ${GIT_SHA:-$(git rev-parse HEAD 2>/dev/null || echo "unknown")}
  API_PORT: 38886

services:
  # Agent application service (mirror of main app)
  app-agent:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        <<: *build-args
      platforms:
        - linux/amd64
      target: production
    container_name: hive-agents-agent
    restart: unless-stopped
    ports:
      - "38886:38886"
    environment:
      # Agent database connection
      - HIVE_DATABASE_URL=postgresql+psycopg://${POSTGRES_USER:-agent}:${POSTGRES_PASSWORD:-agent}@postgres-agent:5432/${POSTGRES_DB:-hive_agent}
      - RUNTIME_ENV=prd
      - HIVE_LOG_LEVEL=info
      - HIVE_API_HOST=0.0.0.0
      - HIVE_API_PORT=38886
      - HIVE_API_WORKERS=${API_WORKERS:-4}
      # Performance optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - agent_app_logs:/app/logs
      - agent_app_data:/app/data
    depends_on:
      postgres-agent:
        condition: service_healthy
    networks:
      - agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:38886/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Agent PostgreSQL database with pgvector extension
  postgres-agent:
    image: agnohq/pgvector:16
    container_name: hive-postgres-agent
    restart: unless-stopped
    user: "${POSTGRES_UID:-1000}:${POSTGRES_GID:-1000}"
    environment:
      # Extract from URL: postgresql+psycopg://user:pass@host:port/db
      - POSTGRES_USER
      - POSTGRES_PASSWORD  
      - POSTGRES_DB=hive_agent
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres-agent:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
    ports:
      - "35532:5432"
    networks:
      - agent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-agent}"]
      interval: 10s
      timeout: 5s
      retries: 5

# Agent network configuration
networks:
  agent_network:
    driver: bridge

# Agent persistent volumes
volumes:
  agent_app_logs:
    driver: local
  agent_app_data:
    driver: local