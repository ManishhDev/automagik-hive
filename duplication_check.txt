=== DUPLICATE FUNCTION SCAN ===
Scanning for duplicate function definitions...
./ai/agents/tools/agent_tools_poc.py:431:def _calculate_compound_interest(params: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:447:def _calculate_credit_limit(params: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:477:def _calculate_fees(params: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:501:def _calculate_insurance_premium(params: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:386:def _calculate_investment_return(params: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:356:def _calculate_loan_installment(params: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:316:def _check_account_change(data: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:295:def _check_card_usage(data: Dict[str, Any]) -> Dict[str, Any]:
./core/knowledge/pagbank_knowledge_factory.py:17:def _check_knowledge_base_exists(db_url: str) -> bool:
./ai/agents/tools/agent_tools_poc.py:254:def _check_login(data: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:274:def _check_pix_transfer(data: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/agent_tools_poc.py:224:def _check_transaction(data: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/registry.py:23:def _import_agent_factory(agent_name: str):
./ai/teams/ana/demo_logging.py:93:def _log_query_complete(team_instance, result):
./ai/teams/ana/demo_logging.py:64:def _log_query_start(team_instance, args):
./ai/teams/ana/demo_logging.py:56:def _log_team_ready(team_instance):
./ai/agents/tools/agent_tools_poc.py:176:def _validate_agency_account(value: str) -> ValidationResult:
./ai/agents/tools/agent_tools_poc.py:147:def _validate_card_number(card_number: str) -> ValidationResult:
./ai/agents/tools/agent_tools_poc.py:88:def _validate_cnpj(cnpj: str) -> ValidationResult:
./ai/agents/tools/agent_tools_poc.py:54:def _validate_cpf(cpf: str) -> ValidationResult:
./ai/agents/tools/agent_tools_poc.py:124:def _validate_email(email: str) -> ValidationResult:
./ai/agents/tools/agent_tools_poc.py:104:def _validate_phone(phone: str) -> ValidationResult:
./ai/agents/tools/agent_tools_poc.py:131:def _validate_pix_key(key: str) -> ValidationResult:
./api/routes/versions.py:144:def activate_component_version(
./api/routes/monitoring.py:526:def add_monitoring_endpoint(router: APIRouter, path: str, endpoint_func):
./ai/teams/ana/demo_logging.py:18:def apply_team_demo_patches():
./ai/workflows/conversation_typification/models.py:613:def calculate_nps_category(score: int) -> NPSRating:
./ai/agents/tools/agent_tools_poc.py:614:def check_security_alert(alert_type: str, data: Dict[str, Any]) -> Dict[str, Any]:
./tests/conftest.py:29:def claude_client():
./tests/conftest.py:183:def cleanup_test_data():
./api/main.py:33:def create_app() -> FastAPI:
./api/routes/versions.py:85:def create_component_version(
./core/knowledge/enhanced_csv_reader.py:170:def create_enhanced_csv_reader_for_pagbank() -> EnhancedCSVReader:
./core/memory/memory_manager.py:374:def create_memory_manager(config: Optional[MemoryConfig] = None) -> MemoryManager:
./api/serve.py:160:def create_pagbank_api():
./core/knowledge/csv_knowledge_base.py:261:def create_pagbank_knowledge_base() -> PagBankCSVKnowledgeBase:
./core/knowledge/pagbank_knowledge_factory.py:43:def create_pagbank_knowledge_base(db_url: str = None, num_documents: int = 10) -> CSVKnowledgeBase:
./core/memory/pattern_detector.py:343:def create_pattern_detector(similarity_threshold: float = 0.8) -> PatternDetector:
./core/mcp/pooled_tools.py:214:def create_pooled_mcp_tools(server_name: str) -> PooledMCPTools:
./common/startup_display.py:227:def create_startup_display() -> StartupDisplay:
./core/knowledge/agentic_filters.py:144:def create_unit_specific_prompt(business_unit: str, query: str) -> str:
./core/utils/user_context_helper.py:10:def create_user_context_state(
./common/version_factory.py:886:def create_versioned_agent(agent_id: str, version: Optional[int] = None, **kwargs) -> Agent:
./common/version_factory.py:892:def create_versioned_team(team_id: str, version: Optional[int] = None, **kwargs) -> Team:
./common/version_factory.py:898:def create_versioned_workflow(workflow_id: str, version: Optional[int] = None, **kwargs) -> Workflow:
./ai/workflows/shared/validation_schemas.py:245:def create_workflow_input_template(workflow_type: str) -> Dict[str, Any]:
./tests/conftest.py:41:def db_session(test_db):
./api/routes/versions.py:203:def delete_component_version(
./common/startup_display.py:232:def display_simple_status(team_name: str, team_id: str, agent_count: int, workflow_count: int = 0):
./db/migrations/versions/001_create_agent_versions.py:131:def downgrade():
./db/migrations/versions/003_create_component_versions.py:68:def downgrade():
./tests/conftest.py:13:def event_loop():
./core/knowledge/agentic_filters.py:10:def extract_filters_from_query(query: str) -> Dict[str, Any]:
./ai/agents/finalizacao/agent.py:119:def finalizacao_specialist_agent(**kwargs) -> Agent:
./ai/agents/tools/finishing_tools.py:166:def finalize_conversation(
./ai/agents/tools/agent_tools_poc.py:331:def financial_calculator(calculation_type: str, params: Dict[str, Any]) -> Dict[str, Any]:
./api/routes/versions.py:254:def force_sync_component(
./ai/workflows/shared/protocol_generator.py:142:def format_protocol_for_user(protocol_data: Dict[str, Any]) -> str:
./ai/workflows/conversation_typification/models.py:625:def generate_executive_summary(
./ai/workflows/shared/protocol_generator.py:37:def generate_protocol(
./ai/agents/adquirencia/agent.py:16:def get_adquirencia_agent(
./ai/agents/adquirencia/agent.py:123:def get_adquirencia_agent_latest(session_id: Optional[str] = None, debug_mode: bool = False) -> Agent:
./ai/agents/adquirencia/agent.py:128:def get_adquirencia_agent_v32(session_id: Optional[str] = None, debug_mode: bool = False) -> Agent:
./ai/agents/registry.py:226:def get_agent(
./ai/agents/tools/agent_tools_poc.py:694:def get_agent_tools(agent_name: str) -> List[Callable]:
./ai/agents/tools/agent_tools.py:16:def get_agent_tools(agent_type: str) -> List[Any]:
./common/version_factory.py:909:def get_agent_version_info(agent_id: str, version: int = None) -> Optional[Dict[str, Any]]:
./api/monitoring/config.py:116:def get_alert_delivery_config() -> Dict[str, Any]:
./ai/teams/ana/team.py:29:def get_ana_team(
./ai/teams/ana/team.py:176:def get_ana_team_development(
./ai/teams/ana/team.py:161:def get_ana_team_latest(
./core/knowledge/agentic_filters.py:70:def get_business_unit_context(business_unit: str) -> Dict[str, Any]:
./config/models.py:104:def get_claude_client() -> Anthropic:
./common/version_factory.py:740:def get_component_default_config(component_id: str, component_type: str) -> Dict[str, Any]:
./ai/workflows/conversation_typification/workflow.py:860:def get_conversation_typification_workflow(debug_mode: bool = False) -> ConversationTypificationWorkflow:
./ai/teams/ana/team.py:191:def get_custom_team(
./db/session.py:31:def get_db() -> Generator[Session, None, None]:
./config/database.py:87:def get_db_session():
./db/session.py:71:def get_db_session():
./ai/agents/emissao/agent.py:16:def get_emissao_agent(
./ai/agents/emissao/agent.py:123:def get_emissao_agent_latest(session_id: Optional[str] = None, debug_mode: bool = False) -> Agent:
./ai/agents/emissao/agent.py:128:def get_emissao_agent_v32(session_id: Optional[str] = None, debug_mode: bool = False) -> Agent:
./ai/agents/finalizacao/agent.py:21:def get_finalizacao_agent(
./api/routes/health.py:12:def get_health():
./ai/agents/human_handoff/agent.py:17:def get_human_handoff_agent(
./ai/agents/human_handoff/agent.py:119:def get_human_handoff_agent_latest(session_id: Optional[str] = None, debug_mode: bool = False) -> Agent:
./ai/agents/human_handoff/agent.py:124:def get_human_handoff_agent_v32(session_id: Optional[str] = None, debug_mode: bool = False) -> Agent:
./ai/workflows/human_handoff/workflow.py:442:def get_human_handoff_workflow(
./common/version_factory.py:929:def get_human_handoff_workflow_versioned(
./core/knowledge/pagbank_knowledge_factory.py:108:def get_knowledge_base(db_url: str = None, num_documents: int = 10) -> CSVKnowledgeBase:
./core/utils/log.py:6:def get_logger(logger_name: str) -> logging.Logger:
./utils/log.py:6:def get_logger(logger_name: str) -> logging.Logger:
./ai/agents/registry.py:319:def get_mcp_server_info(server_name: str) -> Dict[str, Any]:
./core/mcp/config.py:56:def get_mcp_settings() -> MCPSettings:
./core/mcp/pooled_tools.py:204:def get_mcp_tools_factory() -> MCPToolsFactory:
./core/memory/memory_config.py:90:def get_memory_config(environment: str = "production") -> MemoryConfig:
./core/mcp/metrics.py:435:def get_metrics_collector() -> MCPMetricsCollector:
./ai/workflows/config_loader.py:191:def get_model_config(workflow_id: str, agent_key: Optional[str] = None) -> Dict[str, Any]:
./config/models.py:108:def get_model_params(use_case: str = "default") -> Dict[str, Any]:
./api/monitoring/config.py:72:def get_monitoring_config() -> MonitoringConfig:
./api/monitoring/config.py:172:def get_monitoring_features() -> Dict[str, bool]:
./api/monitoring/startup.py:356:def get_monitoring_status():
./ai/agents/pagbank/agent.py:16:def get_pagbank_agent(
./ai/agents/pagbank/agent.py:123:def get_pagbank_agent_latest(session_id: Optional[str] = None, debug_mode: bool = False) -> Agent:
./ai/agents/pagbank/agent.py:128:def get_pagbank_agent_v32(session_id: Optional[str] = None, debug_mode: bool = False) -> Agent:
./api/monitoring/config.py:161:def get_performance_baselines() -> Dict[str, float]:
./api/routes/streaming_router.py:104:def get_playground_router_with_default_streaming(
./config/models.py:132:def get_portuguese_prompt(key: str) -> str:
./config/postgres_config.py:7:def get_postgres_storage(
./config/settings.py:148:def get_project_root() -> Path:
./ai/agents/tools/finishing_tools.py:82:def get_protocol_from_session_state(
./ai/workflows/shared/protocol_generator.py:114:def get_protocol_from_session_state(
./config/settings.py:143:def get_setting(key: str, default: Any = None) -> Any:
./ai/workflows/config_loader.py:205:def get_storage_config(workflow_id: str) -> Dict[str, Any]:
./api/routes/streaming_router.py:24:def get_streaming_router(
./ai/agents/registry.py:270:def get_team_agents(
./common/version_factory.py:759:def get_team_default_config(team_id: str) -> Dict[str, Any]:
./ai/workflows/conversation_typification/integration.py:310:def get_typification_integration(debug_mode: bool = False) -> TypificationIntegration:
./core/utils/user_context_helper.py:62:def get_user_context_from_agent(agent) -> Dict[str, Any]:
./ai/workflows/conversation_typification/models.py:333:def get_valid_motives(business_unit: str, product: str) -> List[str]:
./ai/workflows/conversation_typification/models.py:329:def get_valid_products(business_unit: str) -> List[str]:
./ai/workflows/conversation_typification/models.py:337:def get_valid_submotives(business_unit: str, product: str, motive: str) -> List[str]:
./ai/workflows/shared/whatsapp_notification.py:386:def get_whatsapp_notification_service(debug_mode: bool = False) -> WhatsAppNotificationService:
./ai/workflows/registry.py:17:def get_workflow(workflow_id: str, version: Optional[int] = None, **kwargs) -> Workflow:
./common/version_factory.py:806:def get_workflow_default_config(workflow_id: str) -> Dict[str, Any]:
./ai/workflows/config_loader.py:218:def get_workflow_settings(workflow_id: str) -> Dict[str, Any]:
./ai/agents/tools/workflow_tools.py:118:def handle_workflow_trigger_external(tool_execution):
./config/database.py:97:def health_check() -> dict:
./tests/conftest.py:129:def health_check_services():
./db/migrations/env.py:31:def include_name(name, type_, parent_names):
./config/database.py:91:def init_database():
./db/session.py:82:def init_database():
./tests/conftest.py:192:def integration_test_flow():
./ai/workflows/registry.py:60:def is_workflow_registered(workflow_id: str) -> bool:
./common/version_factory.py:914:def list_available_agents() -> Dict[str, Any]:
./ai/workflows/registry.py:50:def list_available_workflows() -> list[str]:
./api/routes/versions.py:49:def list_component_versions(
./ai/agents/registry.py:314:def list_mcp_servers() -> list[str]:
./ai/workflows/conversation_typification/models.py:17:def load_hierarchy() -> Dict:
./ai/workflows/config_loader.py:178:def load_workflow_config(workflow_id: str) -> Dict[str, Any]:
./ai/teams/ana/demo_logging.py:122:def log_behind_the_scenes_activity(activity_type: str, details: dict):
./core/knowledge/csv_hot_reload.py:615:def main():
./core/knowledge/smart_incremental_loader.py:415:def main():
./scripts/speed/ai/optimization_generator.py:368:def main():
./scripts/speed/benchmarks/benchmark_runner.py:359:def main():
./tests/performance/run_tests.py:77:def main():
./validate_unified_factory.py:119:def main():
./common/version_factory.py:919:def migrate_agent_to_database(
./tests/conftest.py:154:def mock_anthropic_response():
./tests/workflows/test_typification.py:77:def mock_claude_agent():
./tests/conftest.py:176:def mock_embedding_response():
./tests/workflows/test_typification.py:70:def mock_storage():
./ai/agents/tools/agent_tools_poc.py:25:def pagbank_validator(data_type: str, value: str) -> ValidationResult:
./api/streaming_patch.py:11:def patch_agno_streaming_default():
./tests/workflows/test_typification.py:22:def patched_hierarchy(monkeypatch):
./tests/conftest.py:142:def performance_thresholds():
./tests/performance/run_performance_suite.py:759:def print_banner():
./tests/performance/run_tests.py:12:def print_banner():
./tests/performance/run_performance_suite.py:765:def print_help():
./api/routes/mcp_router.py:312:def register_mcp_routes(app):
./ai/agents/registry.py:324:def reload_mcp_catalog() -> None:
./tests/performance/run_tests.py:25:def run_full_test():
./db/migrations/env.py:38:def run_migrations_offline() -> None:
./db/migrations/env.py:64:def run_migrations_online() -> None:
./ai/workflows/conversation_typification/integration.py:319:def run_post_conversation_typification(
./tests/performance/run_tests.py:41:def run_pytest_tests():
./tests/performance/run_tests.py:17:def run_quick_test():
./tests/performance/run_tests.py:33:def run_stress_test():
./core/utils/message_validation.py:76:def safe_agent_run(agent, message: str, context: str = "agent execution"):
./utils/message_validation.py:76:def safe_agent_run(agent, message: str, context: str = "agent execution"):
./tests/conftest.py:61:def sample_knowledge_entries():
./tests/conftest.py:86:def sample_memory_entries():
./tests/conftest.py:109:def sample_teams():
./tests/conftest.py:49:def sample_user_message():
./ai/workflows/shared/protocol_generator.py:82:def save_protocol_to_session_state(
./ai/agents/tools/agent_tools_poc.py:200:def security_checker(check_type: str, data: Dict[str, Any]) -> Dict[str, Any]:
./ai/agents/tools/finishing_tools.py:115:def send_farewell_message(
./ai/agents/tools/agent_tools_poc.py:548:def send_whatsapp_message(message: str) -> Dict[str, Any]:
./api/serve.py:43:def setup_demo_logging():
./core/knowledge/csv_hot_reload.py:23:def setup_logging():
./tests/performance/mock_llm.py:235:def should_use_mock_llm() -> bool:
./tests/performance/run_tests.py:50:def show_help():
./services/version_sync_service.py:371:def sync_all_components() -> Dict[str, Any]:
./common/version_factory.py:841:def sync_component_version_from_yaml(component_id: str, component_type: str, yaml_config: Dict[str, Any]) -> int:
./scripts/test_ana_demo_logging.py:14:def test_ana_demo_logging():
./tests/workflows/test_typification.py:410:def test_business_unit_selection_validation():
./db/session.py:46:def test_connection() -> bool:
./tests/workflows/test_typification.py:437:def test_conversation_typification_complete():
./tests/workflows/test_typification.py:267:def test_create_ticket_assigns_correct_team_and_format(mock_storage):
./tests/workflows/test_typification.py:299:def test_create_ticket_team_mapping(mock_storage):
./tests/conftest.py:21:def test_db():
./scripts/test_demo_logging.py:14:def test_demo_logging():
./tests/workflows/test_typification.py:222:def test_get_valid_motives():
./tests/workflows/test_typification.py:211:def test_get_valid_products():
./tests/workflows/test_typification.py:235:def test_get_valid_submotives():
./tests/workflows/test_typification.py:195:def test_hierarchical_typification_invalid_motive():
./tests/workflows/test_typification.py:183:def test_hierarchical_typification_invalid_product():
./tests/workflows/test_typification.py:168:def test_hierarchical_typification_invalid_submotive():
./tests/workflows/test_typification.py:152:def test_hierarchical_typification_success():
./tests/workflows/test_typification.py:498:def test_hierarchy_loading_file_not_found():
./tests/workflows/test_typification.py:245:def test_hierarchy_utilities_empty_results():
./validate_unified_factory.py:96:def test_import_updates():
./tests/unit/test_knowledge_validation.py:14:def test_knowledge_base_performance():
./tests/workflows/test_typification.py:340:def test_motive_classifier_dynamic_creation(mock_storage):
./tests/workflows/test_typification.py:323:def test_product_classifier_contains_all_options_in_prompt(mock_storage):
./tests/workflows/test_typification.py:372:def test_save_typification_persists_to_session_state(mock_storage):
./tests/conftest.py:35:def test_settings():
./tests/workflows/test_typification.py:354:def test_submotive_classifier_final_level(mock_storage):
./tests/unit/test_knowledge_validation.py:155:def test_team_specific_filters():
./tests/workflows/test_typification.py:472:def test_ticket_creation_result_validation():
./validate_unified_factory.py:10:def test_unified_factory():
./tests/workflows/test_typification.py:88:def test_validate_path_happy():
./tests/workflows/test_typification.py:113:def test_validate_path_invalid_levels(
./tests/workflows/test_typification.py:135:def test_validate_path_provides_suggestions():
./tests/workflows/test_typification.py:531:def test_workflow_demo_mode_logging(mock_storage, monkeypatch):
./tests/workflows/test_typification.py:509:def test_workflow_helper_methods(mock_storage):
./tests/workflows/test_typification.py:256:def test_workflow_initialization(mock_storage):
./ai/agents/tools/finishing_tools.py:19:def trigger_conversation_typification_workflow(
./ai/agents/tools/workflow_tools.py:14:def trigger_human_handoff_workflow(
./api/routes/versions.py:243:def trigger_startup_sync(db: Session = Depends(get_db)):
./db/migrations/versions/001_create_agent_versions.py:24:def upgrade():
./db/migrations/versions/003_create_component_versions.py:19:def upgrade():
./core/utils/message_validation.py:15:def validate_agent_message(message: str, context: str = "agent execution") -> None:
./utils/message_validation.py:15:def validate_agent_message(message: str, context: str = "agent execution") -> None:
./core/knowledge/agentic_filters.py:176:def validate_business_unit_filters() -> Dict[str, Any]:
./config/settings.py:152:def validate_environment() -> Dict[str, bool]:
./ai/workflows/shared/validation_schemas.py:213:def validate_human_handoff_input(workflow_input: Dict[str, Any]) -> HumanHandoffWorkflowInput:
./core/memory/memory_config.py:109:def validate_memory_config(config: MemoryConfig) -> Dict[str, Any]:
./config/models.py:112:def validate_models() -> Dict[str, bool]:
./core/utils/message_validation.py:57:def validate_request_data(request_data: Dict[str, Any], context: str = "request") -> str:
./utils/message_validation.py:57:def validate_request_data(request_data: Dict[str, Any], context: str = "request") -> str:
./ai/workflows/shared/validation_schemas.py:229:def validate_typification_input(workflow_input: Dict[str, Any]) -> ConversationTypificationWorkflowInput:
./ai/workflows/conversation_typification/models.py:341:def validate_typification_path(

=== SIMILAR FILE NAMES ===

=== BACKUP FILES CHECK ===
Backup files found: 88
=== FUNCTION NAME ANALYSIS ===
      6 main
      2 validate_request_data
      2 validate_agent_message
      2 upgrade
      2 safe_agent_run
      2 print_banner
      2 init_database
      2 get_protocol_from_session_state
      2 get_logger
      2 get_db_session
      2 get_agent_tools
      2 downgrade
      2 create_pagbank_knowledge_base
      1 validate_typification_path
      1 validate_typification_input
      1 validate_models
      1 validate_memory_config
      1 validate_human_handoff_input
      1 validate_environment
      1 validate_business_unit_filters

=== IMPORT ANALYSIS ===
Checking for old import patterns...
Old context imports found: 407
Old agents imports found: 0
Old teams imports found: 0
Old workflows imports found: 0
