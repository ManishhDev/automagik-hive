# agents/genie_planning/agent.py

from typing import Dict, Any, List
from agno import Agent
from pathlib import Path
import re


class GeniePlanningAgent(Agent):
    """
    Planning & Requirements Specialist
    
    Analyzes wishes and creates actionable plans through file-based context.
    """
    
    def __init__(self):
        super().__init__(
            agent_id="genie-planning",
            name="Planning & Requirements Specialist"
        )
    
    async def handle_request(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle planning requests from Genie team.
        """
        action = request.get("action")
        wish_id = request.get("wish_id")
        wish_path = request.get("wish_path", f"@genie/wishes/{wish_id}")
        
        if action == "analyze_and_plan":
            # Simple wish - direct analysis and planning
            return await self.analyze_and_plan(wish_id, wish_path, request.get("complexity"))
            
        elif action == "analyze":
            # Part of multi-specialist analysis
            return await self.analyze_wish(wish_id, wish_path)
            
        elif action == "generate_plan":
            # Consolidate analyses into plan
            return await self.generate_plan(wish_id, wish_path)
            
        elif action == "modify_plan":
            # Handle plan modifications
            return await self.modify_plan(wish_id, request.get("modifications"))
            
        else:
            return {"error": f"Unknown action: {action}"}
    
    async def analyze_and_plan(self, wish_id: str, wish_path: str, complexity: str) -> Dict[str, Any]:
        """
        Complete analysis and planning for simple wishes.
        """
        # Read wish document
        wish_content = await self.read_file(f"{wish_path}/wish.md")
        wish_text = self.extract_wish_text(wish_content)
        
        # Analyze requirements
        analysis = await self.analyze_requirements(wish_text)
        
        # Create task cards
        tasks = await self.decompose_into_tasks(analysis, complexity)
        
        # Write task cards
        for i, task in enumerate(tasks):
            task_id = f"task-{i+1:03d}"
            await self.write_task_card(wish_id, task_id, task)
        
        # Generate plan
        plan = await self.create_plan(wish_id, wish_text, tasks, analysis)
        await self.write_file(f"{wish_path}/plan.md", plan)
        
        # Update wish document
        await self.update_wish_document(wish_id, analysis, tasks)
        
        return {
            "status": "completed",
            "tasks_created": len(tasks),
            "plan_path": f"{wish_path}/plan.md"
        }
    
    async def analyze_requirements(self, wish_text: str) -> Dict[str, Any]:
        """
        Analyze wish to extract requirements.
        """
        # Use LLM to analyze (this is where the actual AI analysis happens)
        # For now, showing the structure
        
        return {
            "functional_requirements": [
                "Implement user authentication",
                "Support JWT tokens",
                "Handle login/logout"
            ],
            "non_functional_requirements": [
                "Secure token storage",
                "Fast authentication (<100ms)",
                "Scalable to 10k users"
            ],
            "constraints": [
                "Use existing database",
                "Follow current patterns"
            ],
            "assumptions": [
                "PostgreSQL available",
                "HTTPS enabled"
            ]
        }
    
    async def decompose_into_tasks(self, analysis: Dict[str, Any], complexity: str) -> List[Dict[str, Any]]:
        """
        Break down requirements into executable tasks.
        """
        tasks = []
        
        if complexity == "simple":
            # Simple wishes get direct tasks
            tasks.append({
                "title": "Implement basic authentication",
                "type": "[P]",
                "description": "Add authentication to the system",
                "assigned": "genie-implementation",
                "estimate": "2-3 hours",
                "acceptance_criteria": [
                    "Login endpoint works",
                    "Logout endpoint works",
                    "JWT tokens generated"
                ]
            })
            
        else:
            # Complex wishes get detailed breakdown
            # Phase 1: Design
            tasks.extend([
                {
                    "title": "Design authentication architecture",
                    "type": "[P]",
                    "description": "Create detailed auth system design",
                    "assigned": "genie-architecture",
                    "estimate": "1-2 hours",
                    "acceptance_criteria": [
                        "Architecture diagram created",
                        "Component interfaces defined",
                        "Security model documented"
                    ]
                },
                {
                    "title": "Research security best practices",
                    "type": "[P]",
                    "description": "Research current auth security standards",
                    "assigned": "genie-analysis",
                    "estimate": "1 hour",
                    "acceptance_criteria": [
                        "OWASP guidelines reviewed",
                        "JWT best practices documented",
                        "Rate limiting strategy defined"
                    ]
                }
            ])
            
            # Phase 2: Implementation (depends on design)
            tasks.extend([
                {
                    "title": "Implement auth agent",
                    "type": "[W:001,002]",
                    "description": "Build authentication agent following design",
                    "assigned": "genie-implementation",
                    "estimate": "3-4 hours",
                    "acceptance_criteria": [
                        "Auth agent created",
                        "JWT handling implemented",
                        "Database integration complete"
                    ]
                },
                {
                    "title": "Create auth endpoints",
                    "type": "[S]",
                    "description": "Implement REST API endpoints",
                    "assigned": "genie-implementation",
                    "estimate": "2 hours",
                    "acceptance_criteria": [
                        "POST /login endpoint",
                        "POST /logout endpoint",
                        "GET /me endpoint"
                    ]
                }
            ])
            
        return tasks
    
    async def write_task_card(self, wish_id: str, task_id: str, task: Dict[str, Any]):
        """
        Write task card to file.
        """
        task_content = f"""## Task: {task['title']}
ID: {task_id}
Type: {task['type']}
Status: pending
Assigned: {task['assigned']}
Estimate: {task['estimate']}

### Description
{task['description']}

### Acceptance Criteria
"""
        
        for criterion in task['acceptance_criteria']:
            task_content += f"- [ ] {criterion}\n"
        
        task_content += f"""
### Context
- Wish: @genie/wishes/{wish_id}/wish.md
- Analysis: @genie/wishes/{wish_id}/analysis.md
- Plan: @genie/wishes/{wish_id}/plan.md
"""
        
        await self.write_file(
            f"@genie/wishes/{wish_id}/tasks/{task_id}.md",
            task_content
        )
    
    async def create_plan(self, wish_id: str, wish_text: str, tasks: List[Dict[str, Any]], analysis: Dict[str, Any]) -> str:
        """
        Create user-reviewable plan document.
        """
        # Calculate total time
        total_hours = sum(self.parse_estimate(t['estimate']) for t in tasks)
        
        plan = f"""# Technical Plan: {wish_text[:50]}...

## Overview
This plan outlines the implementation of: {wish_text}

**Total Estimated Time**: {total_hours} hours  
**Number of Tasks**: {len(tasks)}

## Proposed Tasks

### Phase 1: Design & Research [{self.sum_phase_time(tasks, '[P]')} hours]
"""
        
        # Group tasks by phase
        task_num = 1
        for task in tasks:
            if task['type'] == '[P]':
                plan += f"- [ ] {task['type']} Task-{task_num:03d}: {task['title']} ({task['estimate']})\n"
                task_num += 1
        
        plan += f"\n### Phase 2: Implementation [{self.sum_phase_time(tasks, '[W')} hours]\n"
        
        for task in tasks:
            if task['type'].startswith('[W'):
                plan += f"- [ ] {task['type']} Task-{task_num:03d}: {task['title']} ({task['estimate']})\n"
                task_num += 1
        
        plan += f"\n### Phase 3: Sequential Tasks [{self.sum_phase_time(tasks, '[S]')} hours]\n"
        
        for task in tasks:
            if task['type'] == '[S]':
                plan += f"- [ ] {task['type']} Task-{task_num:03d}: {task['title']} ({task['estimate']})\n"
                task_num += 1
        
        plan += """
## Requirements Summary

### Functional Requirements
"""
        for req in analysis['functional_requirements']:
            plan += f"- {req}\n"
        
        plan += "\n### Non-Functional Requirements\n"
        for req in analysis['non_functional_requirements']:
            plan += f"- {req}\n"
        
        plan += """
## Architecture Decisions
- Agent-based implementation for modularity
- JWT for stateless authentication
- PostgreSQL for user storage

## Risk Assessment
- **Low Risk**: Following established patterns
- **Medium Risk**: New authentication system integration

---
üìù **To modify this plan**: 
- Edit this file directly, OR
- Tell me what changes you'd like

‚úÖ **To approve**: Say "approved" or "looks good"
"""
        
        return plan
    
    def parse_estimate(self, estimate: str) -> float:
        """
        Parse estimate string to hours.
        """
        # Simple parsing - can be enhanced
        if "-" in estimate:
            parts = estimate.split("-")
            return float(parts[1].split()[0])
        return 2.0  # Default
    
    def sum_phase_time(self, tasks: List[Dict[str, Any]], phase_type: str) -> float:
        """
        Sum time for tasks in a phase.
        """
        total = 0
        for task in tasks:
            if task['type'].startswith(phase_type):
                total += self.parse_estimate(task['estimate'])
        return total
    
    def extract_wish_text(self, wish_content: str) -> str:
        """
        Extract original wish text from document.
        """
        # Parse markdown to find original request
        lines = wish_content.split('\n')
        in_original = False
        wish_text = ""
        
        for line in lines:
            if "## Original Request" in line:
                in_original = True
                continue
            if in_original and line.startswith("##"):
                break
            if in_original and line.strip():
                wish_text += line.strip() + " "
                
        return wish_text.strip()