"""
Console visualizer for execution tracing

Provides rich console output matching the original demo mode functionality.
"""

import os
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

from ..core import ExecutionObserver, ExecutionEvent, ExecutionEventType


class ConsoleVisualizer(ExecutionObserver):
    """Rich console visualizer for execution events"""
    
    def __init__(self):
        self.console = Console()
        self.active_executions = {}
    
    def on_event(self, event: ExecutionEvent):
        """Handle execution events and display them in console"""
        if event.event_type == ExecutionEventType.EXECUTION_START:
            self._show_execution_start(event)
        elif event.event_type == ExecutionEventType.EXECUTION_END:
            self._show_execution_end(event)
        elif event.event_type == ExecutionEventType.ROUTING_DECISION:
            self._show_routing_analysis(event)
        elif event.event_type == ExecutionEventType.TOOL_CALL:
            self._show_tool_usage(event)
        elif event.event_type == ExecutionEventType.KNOWLEDGE_SEARCH:
            self._show_knowledge_search(event)
        elif event.event_type == ExecutionEventType.CONTEXT_SHARING:
            self._show_context_sharing(event)
        elif event.event_type == ExecutionEventType.ERROR_OCCURRED:
            self._show_error(event)
    
    def _show_execution_start(self, event: ExecutionEvent):
        """Display execution start event"""
        if event.component_type == "team":
            self._show_team_execution_start(event)
        elif event.component_type == "agent":
            self._show_agent_execution_start(event)
        elif event.component_type == "workflow":
            self._show_workflow_execution_start(event)
        
        # Store execution for later reference
        self.active_executions[event.execution_id] = event
    
    def _show_team_execution_start(self, event: ExecutionEvent):
        """Display team execution start with query processing panel"""
        query = event.data.get("args", "")
        if isinstance(query, str) and query.startswith("(") and query.endswith(")"):
            # Extract query from args tuple string
            query = query[2:-2] if len(query) > 4 else query
        
        self.console.print(Panel.fit(
            f"[bold yellow]üéØ PROCESSING USER QUERY[/bold yellow]\n\n"
            f"[cyan]Input:[/cyan] {query[:100]}{'...' if len(query) > 100 else ''}\n"
            f"[cyan]Team:[/cyan] {event.component_id}\n"
            f"[cyan]Mode:[/cyan] route (will select appropriate specialist)",
            title="üìù Query Processing",
            border_style="yellow"
        ))
    
    def _show_agent_execution_start(self, event: ExecutionEvent):
        """Display agent execution start"""
        self.console.print(Panel.fit(
            f"[bold blue]ü§ñ AGENT EXECUTION START[/bold blue]\n\n"
            f"[cyan]Agent:[/cyan] {event.component_id}\n"
            f"[cyan]Function:[/cyan] {event.data.get('function', 'unknown')}\n"
            f"[cyan]Input:[/cyan] {event.data.get('args', 'N/A')[:100]}...",
            title="ü§ñ Agent Processing",
            border_style="blue"
        ))
    
    def _show_workflow_execution_start(self, event: ExecutionEvent):
        """Display workflow execution start"""
        self.console.print(Panel.fit(
            f"[bold purple]üîÑ WORKFLOW EXECUTION START[/bold purple]\n\n"
            f"[cyan]Workflow:[/cyan] {event.component_id}\n"
            f"[cyan]Function:[/cyan] {event.data.get('function', 'unknown')}\n"
            f"[cyan]Input:[/cyan] {event.data.get('args', 'N/A')[:100]}...",
            title="üîÑ Workflow Processing",
            border_style="purple"
        ))
    
    def _show_execution_end(self, event: ExecutionEvent):
        """Display execution completion"""
        duration = event.data.get("duration", 0)
        
        if event.component_type == "team":
            self.console.print(Panel.fit(
                f"[bold green]‚úÖ QUERY PROCESSING COMPLETE[/bold green]\n\n"
                f"[cyan]Result:[/cyan] Response generated by specialist\n"
                f"[cyan]Status:[/cyan] Success\n"
                f"[cyan]Duration:[/cyan] {duration:.2f}s",
                title="üéâ Processing Complete",
                border_style="green"
            ))
        else:
            self.console.print(Panel.fit(
                f"[bold green]‚úÖ {event.component_type.upper()} EXECUTION COMPLETE[/bold green]\n\n"
                f"[cyan]Component:[/cyan] {event.component_id}\n"
                f"[cyan]Status:[/cyan] Success\n"
                f"[cyan]Duration:[/cyan] {duration:.2f}s",
                title="‚úÖ Execution Complete",
                border_style="green"
            ))
        
        # Clean up execution reference
        if event.execution_id in self.active_executions:
            del self.active_executions[event.execution_id]
    
    def _show_routing_analysis(self, event: ExecutionEvent):
        """Display routing analysis progress"""
        self.console.print(Panel.fit(
            f"[bold cyan]üß† ROUTING ANALYSIS IN PROGRESS[/bold cyan]\n\n"
            f"[yellow]Step 1:[/yellow] Analyzing query intent\n"
            f"[yellow]Step 2:[/yellow] Calculating confidence scores\n"
            f"[yellow]Step 3:[/yellow] Selecting best-match agent\n\n"
            f"[cyan]Query:[/cyan] {event.data.get('query', 'N/A')[:100]}...\n"
            f"[cyan]Available Agents:[/cyan] {', '.join(event.data.get('available_agents', []))[:100]}...",
            title="üéØ AI Routing Process",
            border_style="cyan"
        ))
    
    def _show_tool_usage(self, event: ExecutionEvent):
        """Display tool usage"""
        self.console.print(Panel.fit(
            f"[bold blue]üîß AGENT TOOL USAGE[/bold blue]\n\n"
            f"[cyan]Agent:[/cyan] {event.component_id}\n"
            f"[cyan]Tool:[/cyan] {event.data.get('tool_name', 'Unknown')}\n"
            f"[cyan]Purpose:[/cyan] {event.data.get('purpose', 'Processing query')}\n"
            f"[cyan]Status:[/cyan] {event.data.get('status', 'Active')}",
            title="üîß Tool Execution",
            border_style="blue"
        ))
    
    def _show_knowledge_search(self, event: ExecutionEvent):
        """Display knowledge search activity"""
        self.console.print(Panel.fit(
            f"[bold purple]üìö KNOWLEDGE BASE SEARCH[/bold purple]\n\n"
            f"[cyan]Query:[/cyan] {event.data.get('search_query', 'Unknown')}\n"
            f"[cyan]Database:[/cyan] {event.data.get('knowledge_base', 'CSV Knowledge')}\n"
            f"[cyan]Results Found:[/cyan] {event.data.get('results_count', 'Processing')}\n"
            f"[cyan]Relevance:[/cyan] {event.data.get('relevance_score', 'Calculating')}",
            title="üìö Knowledge Retrieval",
            border_style="purple"
        ))
    
    def _show_context_sharing(self, event: ExecutionEvent):
        """Display context sharing between components"""
        self.console.print(Panel.fit(
            f"[bold orange1]üîÑ CONTEXT SHARING[/bold orange1]\n\n"
            f"[cyan]From:[/cyan] {event.data.get('from_component', 'Team Leader')}\n"
            f"[cyan]To:[/cyan] {event.data.get('to_component', 'Specialist')}\n"
            f"[cyan]Context Type:[/cyan] {event.data.get('context_type', 'Query Context')}\n"
            f"[cyan]Data Size:[/cyan] {event.data.get('data_size', 'Processing')}",
            title="üîÑ Context Transfer",
            border_style="orange1"
        ))
    
    def _show_error(self, event: ExecutionEvent):
        """Display error events"""
        self.console.print(Panel.fit(
            f"[bold red]‚ùå EXECUTION ERROR[/bold red]\n\n"
            f"[cyan]Component:[/cyan] {event.component_id}\n"
            f"[cyan]Error Type:[/cyan] {event.data.get('error_type', 'Unknown')}\n"
            f"[cyan]Error Message:[/cyan] {event.data.get('error', 'Unknown error')}\n"
            f"[cyan]Duration:[/cyan] {event.data.get('duration', 0):.2f}s",
            title="‚ùå Error Occurred",
            border_style="red"
        ))
        
        # Clean up execution reference
        if event.execution_id in self.active_executions:
            del self.active_executions[event.execution_id]


def log_behind_the_scenes_activity(activity_type: str, details: dict):
    """
    Compatibility function for existing code that uses the old demo logging.
    This will be removed once all components are migrated to the new system.
    """
    # Only show if demo mode is enabled
    if os.getenv("DEMO_MODE", "false").lower() != "true":
        return
    
    console = Console()
    
    if activity_type == "agent_tool_usage":
        console.print(Panel.fit(
            f"[bold blue]üîß AGENT TOOL USAGE[/bold blue]\n\n"
            f"[cyan]Agent:[/cyan] {details.get('agent_name', 'Unknown')}\n"
            f"[cyan]Tool:[/cyan] {details.get('tool_name', 'Unknown')}\n"
            f"[cyan]Purpose:[/cyan] {details.get('purpose', 'Processing query')}\n"
            f"[cyan]Status:[/cyan] {details.get('status', 'Active')}",
            title="üîß Tool Execution",
            border_style="blue"
        ))
        
    elif activity_type == "knowledge_search":
        console.print(Panel.fit(
            f"[bold purple]üìö KNOWLEDGE BASE SEARCH[/bold purple]\n\n"
            f"[cyan]Query:[/cyan] {details.get('search_query', 'Unknown')}\n"
            f"[cyan]Database:[/cyan] {details.get('knowledge_base', 'CSV Knowledge')}\n"
            f"[cyan]Results Found:[/cyan] {details.get('results_count', 'Processing')}\n"
            f"[cyan]Relevance:[/cyan] {details.get('relevance_score', 'Calculating')}",
            title="üìö Knowledge Retrieval",
            border_style="purple"
        ))
        
    elif activity_type == "context_sharing":
        console.print(Panel.fit(
            f"[bold orange1]üîÑ CONTEXT SHARING[/bold orange1]\n\n"
            f"[cyan]From:[/cyan] {details.get('from_agent', 'Team Leader')}\n"
            f"[cyan]To:[/cyan] {details.get('to_agent', 'Specialist')}\n"
            f"[cyan]Context Type:[/cyan] {details.get('context_type', 'Query Context')}\n"
            f"[cyan]Data Size:[/cyan] {details.get('data_size', 'Processing')}",
            title="üîÑ Context Transfer",
            border_style="orange1"
        ))