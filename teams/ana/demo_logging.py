"""
Enhanced demo logging for Ana team - Shows agent activity under the hood
"""

import os
from agno.utils.log import logger
from rich.console import Console
from rich.panel import Panel
from rich.table import Table


def get_demo_enhanced_ana_team(original_team_func):
    """
    Decorator to enhance Ana team with demo logging capabilities
    """
    def enhanced_team_factory(*args, **kwargs):
        # Check for demo mode
        demo_mode = os.getenv("DEMO_MODE", "false").lower() == "true"
        
        if demo_mode:
            logger.info(f"🎬 DEMO MODE: Enhanced team logging enabled for Ana")
            logger.info(f"🎯 Team will show: Agent routing, tool usage, decision process")
        
        # Get the original team
        team = original_team_func(*args, **kwargs)
        
        if demo_mode:
            console = Console()
            team = _wrap_team_with_demo_logging(team, console)
            _log_team_ready(console, team)
        
        return team
    
    return enhanced_team_factory


def _log_team_ready(console: Console, team):
    """Log team readiness with member details"""
    console.print(Panel.fit(
        f"[bold blue]🎬 ANA TEAM READY FOR DEMO[/bold blue]\n\n"
        f"[yellow]Team Name:[/yellow] {team.name}\n"
        f"[yellow]Mode:[/yellow] route (Automatic agent routing)\n"
        f"[yellow]Model:[/yellow] Claude Sonnet 4\n"
        f"[yellow]Available Specialists:[/yellow] {len(team.members)}\n"
        f"[yellow]Team ID:[/yellow] {team.team_id}",
        title="🚀 Demo Team Active",
        border_style="blue"
    ))
    
    # Show available specialists
    table = Table(title="🎯 Available Specialists")
    table.add_column("Agent", style="cyan")
    table.add_column("Specialization", style="green")
    table.add_column("Status", style="magenta")
    
    for member in team.members:
        agent_name = getattr(member, 'name', 'Unknown')
        agent_role = getattr(member, 'role', 'Specialist')
        table.add_row(agent_name, agent_role, "✅ Ready")
    
    console.print(table)
    
    logger.info(f"🎬 DEMO TEAM READY: {team.name} with {len(team.members)} agents")


def _wrap_team_with_demo_logging(team, console: Console):
    """Wrap team with enhanced demo logging for run operations"""
    original_run = team.run
    
    def enhanced_run(*args, **kwargs):
        """Enhanced run method with demo logging"""
        user_query = str(args[0]) if args else "No query provided"
        
        # Log query start
        console.print(Panel.fit(
            f"[bold yellow]🎯 PROCESSING USER QUERY[/bold yellow]\n\n"
            f"[cyan]Input:[/cyan] {user_query[:100]}{'...' if len(user_query) > 100 else ''}\n"
            f"[cyan]Team:[/cyan] {team.name}\n"
            f"[cyan]Mode:[/cyan] route (will select appropriate specialist)\n"
            f"[cyan]Available Agents:[/cyan] {len(team.members)}",
            title="📝 Query Processing",
            border_style="yellow"
        ))
        
        logger.info(f"🎯 PROCESSING QUERY: {user_query[:50]}{'...' if len(user_query) > 50 else ''}")
        logger.info(f"🤖 Team mode: route - will analyze and forward to specialist")
        logger.info(f"👥 Available specialists: {len(team.members)}")
        
        # Show routing analysis
        console.print(Panel.fit(
            f"[bold cyan]🧠 ROUTING ANALYSIS IN PROGRESS[/bold cyan]\n\n"
            f"[yellow]Step 1:[/yellow] Analyzing query intent and keywords\n"
            f"[yellow]Step 2:[/yellow] Calculating confidence scores for each specialist\n"
            f"[yellow]Step 3:[/yellow] Selecting best-match agent\n"
            f"[yellow]Step 4:[/yellow] Forwarding query with context",
            title="🎯 AI Routing Process",
            border_style="cyan"
        ))
        
        logger.info(f"🧠 ROUTING ANALYSIS: Evaluating query against specialist patterns")
        logger.info(f"🔍 Pattern matching: Checking adquirencia, emissao, pagbank keywords")
        logger.info(f"📊 Confidence scoring: Calculating best specialist match")
        
        # Call original run method
        result = original_run(*args, **kwargs)
        
        # Log completion
        agent_used = "Routing decision made"
        if hasattr(result, 'content') and 'agent_id' in str(result.content):
            # Try to extract agent info from result
            agent_used = "Specialist agent selected"
        
        console.print(Panel.fit(
            f"[bold green]✅ QUERY PROCESSING COMPLETE[/bold green]\n\n"
            f"[cyan]Result:[/cyan] Response generated by specialist\n"
            f"[cyan]Agent Used:[/cyan] {agent_used}\n"
            f"[cyan]Status:[/cyan] Success\n"
            f"[cyan]Response Length:[/cyan] {len(str(result.content)) if hasattr(result, 'content') else 'N/A'} characters",
            title="🎉 Processing Complete",
            border_style="green"
        ))
        
        logger.info(f"✅ QUERY COMPLETE: Routed to appropriate specialist")
        logger.info(f"📊 Result: Response generated and returned")
        logger.info(f"🎯 Agent Activity: Query analyzed, routed, and processed successfully")
        
        return result
    
    # Replace the run method
    team.run = enhanced_run
    return team


def log_behind_the_scenes_activity(activity_type: str, details: dict):
    """Log behind-the-scenes activity for demo purposes"""
    demo_mode = os.getenv("DEMO_MODE", "false").lower() == "true"
    
    if not demo_mode:
        return
    
    console = Console()
    
    if activity_type == "agent_tool_usage":
        console.print(Panel.fit(
            f"[bold blue]🔧 AGENT TOOL USAGE[/bold blue]\n\n"
            f"[cyan]Agent:[/cyan] {details.get('agent_name', 'Unknown')}\n"
            f"[cyan]Tool:[/cyan] {details.get('tool_name', 'Unknown')}\n"
            f"[cyan]Purpose:[/cyan] {details.get('purpose', 'Processing query')}\n"
            f"[cyan]Status:[/cyan] {details.get('status', 'Active')}",
            title="🔧 Tool Execution",
            border_style="blue"
        ))
        
        logger.info(f"🔧 TOOL USAGE: {details.get('agent_name')} using {details.get('tool_name')}")
        
    elif activity_type == "knowledge_search":
        console.print(Panel.fit(
            f"[bold purple]📚 KNOWLEDGE BASE SEARCH[/bold purple]\n\n"
            f"[cyan]Query:[/cyan] {details.get('search_query', 'Unknown')}\n"
            f"[cyan]Database:[/cyan] {details.get('knowledge_base', 'CSV Knowledge')}\n"
            f"[cyan]Results Found:[/cyan] {details.get('results_count', 'Processing')}\n"
            f"[cyan]Relevance:[/cyan] {details.get('relevance_score', 'Calculating')}",
            title="📚 Knowledge Retrieval",
            border_style="purple"
        ))
        
        logger.info(f"📚 KNOWLEDGE SEARCH: {details.get('search_query')}")
        
    elif activity_type == "context_sharing":
        console.print(Panel.fit(
            f"[bold orange1]🔄 CONTEXT SHARING[/bold orange1]\n\n"
            f"[cyan]From:[/cyan] {details.get('from_agent', 'Team Leader')}\n"
            f"[cyan]To:[/cyan] {details.get('to_agent', 'Specialist')}\n"
            f"[cyan]Context Type:[/cyan] {details.get('context_type', 'Query Context')}\n"
            f"[cyan]Data Size:[/cyan] {details.get('data_size', 'Processing')}",
            title="🔄 Context Transfer",
            border_style="orange1"
        ))
        
        logger.info(f"🔄 CONTEXT SHARING: {details.get('from_agent')} → {details.get('to_agent')}")