"""
Performs a global patch on the agno.Team class to add demo logging.
This "hijacks" the base class to ensure logging works even if the framework
re-instantiates objects using the base Team class.
"""

import os
from agno.team import Team
from agno.utils.log import logger
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
import inspect

_patched = False
console = Console()

def apply_team_demo_patches():
    """
    Applies demo logging patches to agno.Team class if DEMO_MODE is true.
    This function is designed to be idempotent (only runs once).
    """
    global _patched
    if _patched or os.getenv("DEMO_MODE", "false").lower() != "true":
        return

    # Simple one-line confirmation instead of redundant banners
    logger.info("🎬 DEMO MODE: Global Team class patching applied")

    # Store original methods before patching
    original_init = Team.__init__
    original_run = Team.run

    # --- Patched __init__ ---
    def patched_init(self, *args, **kwargs):
        original_init(self, *args, **kwargs)
        # Now, call our logging function on the newly created instance
        _log_team_ready(self)

    # --- Patched run ---
    async def patched_run(self, *args, **kwargs):
        _log_query_start(self, args)
        
        # Call the original run method
        result = await original_run(self, *args, **kwargs)
        
        _log_query_complete(self, result)
        return result

    # Apply the patches
    Team.__init__ = patched_init
    Team.run = patched_run
    _patched = True


def _log_team_ready(team_instance):
    """Log team readiness with member details."""
    # Use workflow-style logging pattern
    logger.info(f"🎬 DEMO MODE: ANA TEAM READY - {team_instance.name}")
    logger.info(f"🤖 AI Model: Mode={team_instance.mode}, Members={len(team_instance.members)}")
    logger.info(f"🎯 Team Configuration: ID={team_instance.team_id}")
    
    panel_content = (
        f"[bold blue]🎬 ANA TEAM READY FOR DEMO (Patched)[/bold blue]\n\n"
        f"[yellow]Team Name:[/yellow] {team_instance.name}\n"
        f"[yellow]Mode:[/yellow] {team_instance.mode}\n"
        f"[yellow]Available Specialists:[/yellow] {len(team_instance.members)}\n"
        f"[yellow]Team ID:[/yellow] {team_instance.team_id}"
    )
    console.print(Panel.fit(panel_content, title="🚀 Demo Team Active", border_style="blue"))
    print(f"--- [DEMO LOG] Patched agno.Team instance '{team_instance.name}' is ready. ---\n")

def _log_query_start(team_instance, args):
    """Log the start of a query."""
    user_query = str(args[0]) if args else "No query provided"
    
    # Use workflow-style direct logging
    logger.info(f"🎯 TEAM QUERY START: Processing user input")
    logger.info(f"📝 Input: {user_query[:150]}{'...' if len(user_query) > 150 else ''}")
    logger.info(f"🤖 Team: {team_instance.name} (Mode: {team_instance.mode})")
    logger.info(f"🔄 ROUTING ANALYSIS: Step 1/3 - Analyzing query intent")
    logger.info(f"🔄 ROUTING ANALYSIS: Step 2/3 - Calculating confidence scores")
    logger.info(f"🔄 ROUTING ANALYSIS: Step 3/3 - Selecting best-match agent")
    
    console.print(Panel.fit(
        f"[bold yellow]🎯 PROCESSING USER QUERY[/bold yellow]\n\n"
        f"[cyan]Input:[/cyan] {user_query[:100]}{'...' if len(user_query) > 100 else ''}\n"
        f"[cyan]Team:[/cyan] {team_instance.name}\n"
        f"[cyan]Mode:[/cyan] {team_instance.mode} (will select appropriate specialist)",
        title="📝 Query Processing",
        border_style="yellow"
    ))
    console.print(Panel.fit(
        f"[bold cyan]🧠 ROUTING ANALYSIS IN PROGRESS[/bold cyan]\n\n"
        f"[yellow]Step 1:[/yellow] Analyzing query intent\n"
        f"[yellow]Step 2:[/yellow] Calculating confidence scores\n"
        f"[yellow]Step 3:[/yellow] Selecting best-match agent",
        title="🎯 AI Routing Process",
        border_style="cyan"
    ))

def _log_query_complete(team_instance, result):
    """Log the completion of a query."""
    # Use workflow-style direct logging
    logger.info(f"✅ TEAM QUERY COMPLETE: Response generated successfully")
    logger.info(f"🎯 Team: {team_instance.name} - Processing successful")
    logger.info(f"📊 Result: {len(str(result.content)) if hasattr(result, 'content') else 0} characters generated")
    logger.info(f"🤖 Agent Routing: Specialist agent provided expert response")
    
    console.print(Panel.fit(
        f"[bold green]✅ QUERY PROCESSING COMPLETE[/bold green]\n\n"
        f"[cyan]Result:[/cyan] Response generated by specialist\n"
        f"[cyan]Status:[/cyan] Success",
        title="🎉 Processing Complete",
        border_style="green"
    ))




class DemoAnaTeam(Team):
    """
    DEPRECATED: This subclass approach is no longer used.
    Use global patching instead.
    """
    def __init__(self, *args, **kwargs):
        print("WARNING: Using deprecated DemoAnaTeam subclass. Use global patching instead.")
        super().__init__(*args, **kwargs)


def log_behind_the_scenes_activity(activity_type: str, details: dict):
    """Log behind-the-scenes activity for demo purposes"""
    demo_mode = os.getenv("DEMO_MODE", "false").lower() == "true"
    
    if not demo_mode:
        return
    
    if activity_type == "agent_tool_usage":
        console.print(Panel.fit(
            f"[bold blue]🔧 AGENT TOOL USAGE[/bold blue]\n\n"
            f"[cyan]Agent:[/cyan] {details.get('agent_name', 'Unknown')}\n"
            f"[cyan]Tool:[/cyan] {details.get('tool_name', 'Unknown')}\n"
            f"[cyan]Purpose:[/cyan] {details.get('purpose', 'Processing query')}\n"
            f"[cyan]Status:[/cyan] {details.get('status', 'Active')}",
            title="🔧 Tool Execution",
            border_style="blue"
        ))
        print(f"🔧 TOOL USAGE: {details.get('agent_name')} using {details.get('tool_name')}")
        
    elif activity_type == "knowledge_search":
        console.print(Panel.fit(
            f"[bold purple]📚 KNOWLEDGE BASE SEARCH[/bold purple]\n\n"
            f"[cyan]Query:[/cyan] {details.get('search_query', 'Unknown')}\n"
            f"[cyan]Database:[/cyan] {details.get('knowledge_base', 'CSV Knowledge')}\n"
            f"[cyan]Results Found:[/cyan] {details.get('results_count', 'Processing')}\n"
            f"[cyan]Relevance:[/cyan] {details.get('relevance_score', 'Calculating')}",
            title="📚 Knowledge Retrieval",
            border_style="purple"
        ))
        print(f"📚 KNOWLEDGE SEARCH: {details.get('search_query')}")
        
    elif activity_type == "context_sharing":
        console.print(Panel.fit(
            f"[bold orange1]🔄 CONTEXT SHARING[/bold orange1]\n\n"
            f"[cyan]From:[/cyan] {details.get('from_agent', 'Team Leader')}\n"
            f"[cyan]To:[/cyan] {details.get('to_agent', 'Specialist')}\n"
            f"[cyan]Context Type:[/cyan] {details.get('context_type', 'Query Context')}\n"
            f"[cyan]Data Size:[/cyan] {details.get('data_size', 'Processing')}",
            title="🔄 Context Transfer",
            border_style="orange1"
        ))
        print(f"🔄 CONTEXT SHARING: {details.get('from_agent')} → {details.get('to_agent')}")