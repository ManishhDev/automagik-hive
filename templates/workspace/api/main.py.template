"""
{{workspace_name}} API main application.

FastAPI application with Agno integration for multi-agent AI functionality.
"""

import logging
from contextlib import asynccontextmanager

from agno import Playground
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from api.routes import health, agents, teams, workflows
from lib.config.settings import (
    WORKSPACE_NAME,
    ENVIRONMENT,
    LOG_LEVEL,
    DATABASE_URL
)

# Configure logging
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper()),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management."""
    # Startup
    logger.info(f"Starting {WORKSPACE_NAME} API in {ENVIRONMENT} mode")
    logger.info(f"Database: {DATABASE_URL}")
    
    # Initialize Agno playground
    try:
        playground = Playground(
            name=WORKSPACE_NAME,
            database_url=DATABASE_URL
        )
        app.state.playground = playground
        await playground.start()
        logger.info("Agno playground initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize Agno playground: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info(f"Shutting down {WORKSPACE_NAME} API")
    if hasattr(app.state, 'playground'):
        await app.state.playground.stop()
        logger.info("Agno playground stopped")


# Create FastAPI application
app = FastAPI(
    title=f"{WORKSPACE_NAME} API",
    description=f"Multi-agent AI API for {WORKSPACE_NAME} workspace",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"] if ENVIRONMENT == "development" else [],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Global exception handler."""
    logger.error(f"Unhandled exception: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal server error"}
    )

# Include routers
app.include_router(health.router, prefix="/health", tags=["health"])
app.include_router(agents.router, prefix="/api/v1/agents", tags=["agents"])
app.include_router(teams.router, prefix="/api/v1/teams", tags=["teams"])
app.include_router(workflows.router, prefix="/api/v1/workflows", tags=["workflows"])

# Root endpoint
@app.get("/")
async def root():
    """Root endpoint."""
    return {
        "workspace": WORKSPACE_NAME,
        "version": "1.0.0",
        "environment": ENVIRONMENT,
        "status": "healthy"
    }


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "api.main:app",
        host="{{api_host}}",
        port={{api_port}},
        reload=ENVIRONMENT == "development",
        log_level=LOG_LEVEL.lower()
    )