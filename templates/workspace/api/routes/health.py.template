"""
Health check endpoints for {{workspace_name}} API.

Provides system health monitoring and diagnostics.
"""

import logging
from datetime import datetime
from typing import Dict, Any

from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel

from lib.config.settings import WORKSPACE_NAME, DATABASE_URL

logger = logging.getLogger(__name__)

router = APIRouter()


class HealthResponse(BaseModel):
    """Health check response model."""
    workspace: str
    status: str
    timestamp: datetime
    version: str
    environment: str
    services: Dict[str, Any]


class DetailedHealthResponse(BaseModel):
    """Detailed health check response model."""
    workspace: str
    status: str
    timestamp: datetime
    version: str
    environment: str
    services: Dict[str, Any]
    dependencies: Dict[str, Any]
    metrics: Dict[str, Any]


@router.get("/", response_model=HealthResponse)
async def health_check():
    """Basic health check endpoint."""
    services = await _check_services()
    
    # Determine overall status
    status = "healthy"
    for service_status in services.values():
        if service_status.get("status") != "healthy":
            status = "degraded"
            break
    
    return HealthResponse(
        workspace=WORKSPACE_NAME,
        status=status,
        timestamp=datetime.utcnow(),
        version="1.0.0",
        environment="{{environment}}",
        services=services
    )


@router.get("/detailed", response_model=DetailedHealthResponse)
async def detailed_health_check():
    """Detailed health check with comprehensive diagnostics."""
    services = await _check_services()
    dependencies = await _check_dependencies()
    metrics = await _collect_metrics()
    
    # Determine overall status
    status = "healthy"
    for service_status in services.values():
        if service_status.get("status") != "healthy":
            status = "degraded"
            break
    
    for dep_status in dependencies.values():
        if dep_status.get("status") != "healthy":
            status = "degraded"
            break
    
    return DetailedHealthResponse(
        workspace=WORKSPACE_NAME,
        status=status,
        timestamp=datetime.utcnow(),
        version="1.0.0",
        environment="{{environment}}",
        services=services,
        dependencies=dependencies,
        metrics=metrics
    )


@router.get("/liveness")
async def liveness_probe():
    """Kubernetes liveness probe endpoint."""
    return {"status": "alive", "timestamp": datetime.utcnow()}


@router.get("/readiness")
async def readiness_probe():
    """Kubernetes readiness probe endpoint."""
    # Check critical services
    services = await _check_services()
    
    # If database is unhealthy, we're not ready
    if services.get("database", {}).get("status") != "healthy":
        raise HTTPException(status_code=503, detail="Database not ready")
    
    return {"status": "ready", "timestamp": datetime.utcnow()}


async def _check_services() -> Dict[str, Any]:
    """Check status of internal services."""
    services = {}
    
    # Database check
    try:
        import psycopg
        with psycopg.connect(DATABASE_URL, connect_timeout=5) as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT 1")
                result = cur.fetchone()
                
        services["database"] = {
            "status": "healthy" if result else "unhealthy",
            "type": "postgresql",
            "response_time_ms": 0  # Could measure actual response time
        }
    except Exception as e:
        logger.error(f"Database health check failed: {e}")
        services["database"] = {
            "status": "unhealthy",
            "type": "postgresql",
            "error": str(e)
        }
    
    # Agno playground check
    try:
        # This would check if Agno playground is running
        services["agno_playground"] = {
            "status": "healthy",
            "type": "agno",
            "agents_loaded": 0,  # Could count actual agents
            "teams_loaded": 0,   # Could count actual teams
            "workflows_loaded": 0  # Could count actual workflows
        }
    except Exception as e:
        logger.error(f"Agno playground health check failed: {e}")
        services["agno_playground"] = {
            "status": "unhealthy",
            "type": "agno",
            "error": str(e)
        }
    
    return services


async def _check_dependencies() -> Dict[str, Any]:
    """Check status of external dependencies."""
    dependencies = {}
    
    # Agent service check
    try:
        import httpx
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get("{{agent_api_url}}/health")
            dependencies["agent_service"] = {
                "status": "healthy" if response.status_code == 200 else "unhealthy",
                "url": "{{agent_api_url}}",
                "response_code": response.status_code
            }
    except Exception as e:
        dependencies["agent_service"] = {
            "status": "unhealthy",
            "url": "{{agent_api_url}}",
            "error": str(e)
        }
    
    # Genie service check  
    try:
        import httpx
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get("{{genie_api_url}}/health")
            dependencies["genie_service"] = {
                "status": "healthy" if response.status_code == 200 else "unhealthy",
                "url": "{{genie_api_url}}",
                "response_code": response.status_code
            }
    except Exception as e:
        dependencies["genie_service"] = {
            "status": "unhealthy", 
            "url": "{{genie_api_url}}",
            "error": str(e)
        }
    
    return dependencies


async def _collect_metrics() -> Dict[str, Any]:
    """Collect basic system metrics."""
    import psutil
    import os
    
    return {
        "system": {
            "cpu_percent": psutil.cpu_percent(interval=1),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_percent": psutil.disk_usage('/').percent,
            "load_average": os.getloadavg() if hasattr(os, 'getloadavg') else None
        },
        "process": {
            "pid": os.getpid(),
            "memory_mb": psutil.Process().memory_info().rss / 1024 / 1024,
            "cpu_percent": psutil.Process().cpu_percent(),
            "threads": psutil.Process().num_threads()
        },
        "workspace": {
            "name": WORKSPACE_NAME,
            "uptime_seconds": 0,  # Could track actual uptime
            "requests_total": 0,  # Could track actual requests
            "errors_total": 0     # Could track actual errors
        }
    }