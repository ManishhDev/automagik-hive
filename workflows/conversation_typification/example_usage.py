#!/usr/bin/env python3
"""
Example usage of the 5-level typification workflow
Demonstrates how to integrate with Ana team and use the workflow
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, Optional

from workflows.conversation_typification.workflow import get_conversation_typification_workflow
from workflows.conversation_typification.integration import (
    get_typification_integration,
    run_post_conversation_typification
)
from workflows.conversation_typification.models import (
    HierarchicalTypification,
    ConversationTypification,
    validate_typification_path,
    get_valid_products,
    get_valid_motives,
    get_valid_submotives
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TypificationWorkflowDemo:
    """Demo class showing how to use the typification workflow"""
    
    def __init__(self):
        self.integration = get_typification_integration(debug_mode=True)
        
    def demonstrate_hierarchy_validation(self):
        """Demonstrate hierarchy validation features"""
        
        print("=== HIERARCHY VALIDATION DEMO ===\n")
        
        # Show valid products for each business unit
        business_units = ["Adquir√™ncia Web", "Emiss√£o", "PagBank", "Adquir√™ncia Web / Adquir√™ncia Presencial"]
        
        for unit in business_units:
            products = get_valid_products(unit)
            print(f"üìä {unit}: {len(products)} products")
            for product in products[:3]:  # Show first 3
                print(f"   ‚Ä¢ {product}")
                
                # Show motives for first product
                motives = get_valid_motives(unit, product)
                if motives:
                    print(f"     ‚Üí {len(motives)} motives (first: {motives[0]})")
                    
                    # Show submotives for first motive
                    submotives = get_valid_submotives(unit, product, motives[0])
                    if submotives:
                        print(f"       ‚Üí {len(submotives)} submotives")
            print()
    
    def demonstrate_valid_typification(self):
        """Demonstrate creating valid typifications"""
        
        print("=== VALID TYPIFICATION DEMO ===\n")
        
        # Create a valid typification
        typification = HierarchicalTypification(
            unidade_negocio="Adquir√™ncia Web",
            produto="Antecipa√ß√£o de Vendas",
            motivo="D√∫vidas sobre a Antecipa√ß√£o de Vendas",
            submotivo="Cliente orientado sobre a Antecipa√ß√£o de Vendas"
        )
        
        print(f"‚úÖ Valid typification created:")
        print(f"   Path: {typification.hierarchy_path}")
        print(f"   Dict: {typification.as_dict}")
        print()
        
        # Validate the path
        validation = validate_typification_path(
            typification.unidade_negocio.value,
            typification.produto,
            typification.motivo,
            typification.submotivo
        )
        
        print(f"‚úÖ Validation result: {validation.valid}")
        print(f"   Level reached: {validation.level_reached}")
        print()
    
    def demonstrate_invalid_typification(self):
        """Demonstrate validation of invalid typifications"""
        
        print("=== INVALID TYPIFICATION DEMO ===\n")
        
        # Try invalid product for business unit
        validation = validate_typification_path(
            "PagBank",  # Business unit
            "Antecipa√ß√£o de Vendas",  # Invalid product for PagBank
            "Some motive",
            "Some submotive"
        )
        
        print(f"‚ùå Invalid typification:")
        print(f"   Valid: {validation.valid}")
        print(f"   Level reached: {validation.level_reached}")
        print(f"   Error: {validation.error_message}")
        print(f"   Suggestions: {validation.suggested_corrections[:3]}")
        print()
    
    def demonstrate_conversation_samples(self):
        """Demonstrate with sample conversations"""
        
        print("=== CONVERSATION SAMPLES DEMO ===\n")
        
        sample_conversations = [
            {
                "title": "Antecipa√ß√£o de Vendas",
                "conversation": """
                Cliente: Oi, quero antecipar minhas vendas
                Ana: Ol√°! Posso ajudar com a antecipa√ß√£o de vendas. Qual valor voc√™ gostaria de antecipar?
                Cliente: Tenho 5000 reais para receber amanh√£
                Ana: Entendi. A antecipa√ß√£o est√° dispon√≠vel para vendas no cr√©dito realizadas ontem ou antes. Vou verificar sua elegibilidade...
                Cliente: Ok, obrigado pela orienta√ß√£o
                Ana: Dispon√≠vel! Voc√™ pode antecipar at√© R$ 4.500,00 com taxa de 3.5%. Deseja prosseguir?
                Cliente: Sim, quero antecipar
                Ana: Perfeito! Antecipa√ß√£o realizada com sucesso. O valor estar√° dispon√≠vel em at√© 1 hora.
                """,
                "expected_unit": "Adquir√™ncia Web"
            },
            {
                "title": "Problema com Cart√£o",
                "conversation": """
                Cliente: Meu cart√£o est√° bloqueado, n√£o consigo usar
                Ana: Vou ajudar com o desbloqueio do cart√£o. Qual tipo de cart√£o voc√™ tem?
                Cliente: √â o cart√£o m√∫ltiplo do PagBank
                Ana: Entendi. Vou verificar o motivo do bloqueio...
                Cliente: Pode ser por seguran√ßa, fiz uma compra grande ontem
                Ana: Sim, foi bloqueio por seguran√ßa. Vou liberar para voc√™ agora.
                """,
                "expected_unit": "Emiss√£o"
            },
            {
                "title": "D√∫vida sobre Pix",
                "conversation": """
                Cliente: Como fa√ßo um Pix?
                Ana: Te ajudo com o Pix! Voc√™ quer enviar ou receber?
                Cliente: Quero enviar dinheiro para minha m√£e
                Ana: Para enviar Pix, acesse o app PagBank, v√° em Pix e escolha "Enviar"...
                Cliente: Posso usar o telefone dela como chave?
                Ana: Sim! Voc√™ pode usar CPF, telefone, email ou chave aleat√≥ria como chave Pix.
                """,
                "expected_unit": "PagBank"
            }
        ]
        
        for i, sample in enumerate(sample_conversations, 1):
            print(f"üìù Sample {i}: {sample['title']}")
            print(f"   Expected unit: {sample['expected_unit']}")
            print(f"   Conversation length: {len(sample['conversation'].split())} words")
            print()
    
    async def run_workflow_example(self):
        """Run the actual workflow with a sample conversation"""
        
        print("=== WORKFLOW EXECUTION DEMO ===\n")
        
        sample_conversation = """
        Cliente: Oi, quero antecipar minhas vendas do cart√£o
        Ana: Ol√°! Posso ajudar com a antecipa√ß√£o de vendas. Voc√™ tem vendas pendentes para receber?
        Cliente: Sim, tenho 3000 reais para receber na pr√≥xima semana
        Ana: Perfeito! Vou verificar sua elegibilidade para antecipa√ß√£o. A antecipa√ß√£o est√° dispon√≠vel para vendas no cr√©dito realizadas h√° pelo menos 1 dia.
        Cliente: Ok, quanto posso antecipar?
        Ana: Voc√™ pode antecipar at√© R$ 2.700,00 com taxa de 3.2%. O valor ficar√° dispon√≠vel em at√© 1 hora na sua conta PagBank.
        Cliente: Quero antecipar ent√£o
        Ana: Antecipa√ß√£o realizada com sucesso! Voc√™ receber√° R$ 2.700,00 em at√© 1 hora. Obrigada por usar o PagBank!
        """
        
        session_id = f"demo_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        print(f"üöÄ Running workflow for session: {session_id}")
        print(f"üìù Conversation: {len(sample_conversation.split())} words")
        print()
        
        # This would normally be called with actual agents
        # For demo purposes, we'll show the integration setup
        print("‚öôÔ∏è  Integration setup:")
        print(f"   - Workflow initialized: {self.integration.workflow is not None}")
        print(f"   - Debug mode: {self.integration.debug_mode}")
        print()
        
        # Show what the integration would do
        routing_suggestions = self.integration.get_agent_routing_suggestions({
            'typification': {
                'unidade_negocio': 'Adquir√™ncia Web',
                'produto': 'Antecipa√ß√£o de Vendas',
                'motivo': 'Cliente deseja fazer a Antecipa√ß√£o de Vendas',
                'submotivo': 'Cliente orientado a fazer o processo via m√°quina'
            },
            'hierarchy_path': 'Adquir√™ncia Web ‚Üí Antecipa√ß√£o de Vendas ‚Üí Cliente deseja fazer a Antecipa√ß√£o de Vendas ‚Üí Cliente orientado a fazer o processo via m√°quina',
            'confidence_scores': {
                'business_unit': 0.95,
                'product': 0.90,
                'motive': 0.85,
                'submotive': 0.88
            }
        })
        
        print("üìä Routing suggestions:")
        print(f"   - Suggested team: {routing_suggestions['suggested_team']}")
        print(f"   - Priority: {routing_suggestions['priority']}")
        print(f"   - Routing reason: {routing_suggestions['routing_reason']}")
        print()
        
        # Show escalation context
        escalation_context = self.integration.create_escalation_context(
            {
                'typification': {
                    'unidade_negocio': 'Adquir√™ncia Web',
                    'produto': 'Antecipa√ß√£o de Vendas',
                    'motivo': 'Cliente deseja fazer a Antecipa√ß√£o de Vendas',
                    'submotivo': 'Cliente orientado a fazer o processo via m√°quina'
                },
                'hierarchy_path': 'Adquir√™ncia Web ‚Üí Antecipa√ß√£o de Vendas ‚Üí Cliente deseja fazer a Antecipa√ß√£o de Vendas ‚Üí Cliente orientado a fazer o processo via m√°quina',
                'confidence_scores': {
                    'business_unit': 0.95,
                    'product': 0.90,
                    'motive': 0.85,
                    'submotive': 0.88
                }
            },
            sample_conversation,
            session_id
        )
        
        print("üîÑ Escalation context:")
        print(f"   - Business unit: {escalation_context['business_unit']}")
        print(f"   - Product: {escalation_context['product']}")
        print(f"   - Suggested actions: {len(escalation_context['suggested_actions'])}")
        print()
        
        print("‚úÖ Demo workflow completed successfully!")

def main():
    """Main demo function"""
    
    print("üéØ PagBank 5-Level Typification Workflow Demo")
    print("=" * 50)
    print()
    
    demo = TypificationWorkflowDemo()
    
    # Run demonstration sections
    demo.demonstrate_hierarchy_validation()
    demo.demonstrate_valid_typification()
    demo.demonstrate_invalid_typification()
    demo.demonstrate_conversation_samples()
    
    # Run async workflow example
    asyncio.run(demo.run_workflow_example())
    
    print("\nüèÅ Demo completed! The typification workflow is ready for integration.")

if __name__ == "__main__":
    main()